
Lab2_Blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000010e8  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f8  00800208  00800208  00001284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  000012b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b27  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000850  00000000  00000000  00003663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  00003eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000753  00000000  00000000  000042a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000140e  00000000  00000000  000049f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  00005e01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 30       	cpi	r26, 0x00	; 0
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6d 02 	call	0x4da	; 0x4da <main>
      9e:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:

OSStartHighRdy: 
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
      a6:	00 91 c6 04 	lds	r16, 0x04C6
                inc     R16                         ;
      aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
      ac:	00 93 c6 04 	sts	0x04C6, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
      b0:	e0 91 db 04 	lds	r30, 0x04DB
                lds     R31,OSTCBHighRdy+1          ; ready to run
      b4:	f0 91 dc 04 	lds	r31, 0x04DC

                ld      R28,Z+                      ; Load stack L pointer
      b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
      ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
      bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
      be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
                ret                                 ; Start task
     104:	08 95       	ret

00000106 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     14a:	e0 91 e9 04 	lds	r30, 0x04E9
                lds     R31,OSTCBCur+1              ;
     14e:	f0 91 ea 04 	lds	r31, 0x04EA

                in      r28,_SFR_IO_ADDR(SPL)
     152:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     154:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     156:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     158:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     15a:	00 91 cb 04 	lds	r16, 0x04CB
                sts     OSPrioCur,R16
     15e:	00 93 cc 04 	sts	0x04CC, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     162:	e0 91 db 04 	lds	r30, 0x04DB
                lds     R31,OSTCBHighRdy+1          ; ready to run
     166:	f0 91 dc 04 	lds	r31, 0x04DC
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     16a:	e0 93 e9 04 	sts	0x04E9, r30
                sts     OSTCBCur+1,R31              ;
     16e:	f0 93 ea 04 	sts	0x04EA, r31

                ld      R28,Z+                      ; Restore Y pointer
     172:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     174:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     176:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     178:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
                ret
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     1c0:	00 91 cb 04 	lds	r16, 0x04CB
                sts     OSPrioCur,R16               ;
     1c4:	00 93 cc 04 	sts	0x04CC, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     1c8:	e0 91 db 04 	lds	r30, 0x04DB
                lds     R31,OSTCBHighRdy+1          ;
     1cc:	f0 91 dc 04 	lds	r31, 0x04DC
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     1d0:	e0 93 e9 04 	sts	0x04E9, r30
                sts     OSTCBCur+1,R31              ;
     1d4:	f0 93 ea 04 	sts	0x04EA, r31

                ld      R28,Z+                      ; Restore Y pointer
     1d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
                ret
     224:	08 95       	ret

00000226 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     26c:	00 91 e8 04 	lds	r16, 0x04E8
                inc     R16                         ;
     270:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     272:	00 93 e8 04 	sts	0x04E8, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     276:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     27a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     27c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     27e:	e0 91 e9 04 	lds	r30, 0x04E9
                lds     R31,OSTCBCur+1              ;
     282:	f0 91 ea 04 	lds	r31, 0x04EA
                st      Z+,R28                      ; Save Y pointer
     286:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
     28a:	09 ed       	ldi	r16, 0xD9	; 217
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     28c:	06 bd       	out	0x26, r16	; 38
	
                sei                                 ; Enable interrupts
     28e:	78 94       	sei
                
                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     290:	0e 94 69 04 	call	0x8d2	; 0x8d2 <OSTimeTick>
                nop
     294:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     296:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OSIntExit>

                POPSREG
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     2de:	08 95       	ret

000002e0 <WatchDogReset>:



.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     2e0:	a8 95       	wdr
				ret
     2e2:	08 95       	ret

000002e4 <SerTxISR>:

.global USART_TX_vect							   ; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:      

			   ret
     2e4:	08 95       	ret

000002e6 <TaskStart>:
 */
void  TaskStart (void *pdata)
{
    pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     2e6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <OSStatInit>
	
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     2ea:	2b e0       	ldi	r18, 0x0B	; 11
     2ec:	42 ec       	ldi	r20, 0xC2	; 194
     2ee:	53 e0       	ldi	r21, 0x03	; 3
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	82 ea       	ldi	r24, 0xA2	; 162
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>

	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     2fc:	2a e0       	ldi	r18, 0x0A	; 10
     2fe:	44 e8       	ldi	r20, 0x84	; 132
     300:	54 e0       	ldi	r21, 0x04	; 4
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	84 ed       	ldi	r24, 0xD4	; 212
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     30e:	24 e1       	ldi	r18, 0x14	; 20
     310:	44 e4       	ldi	r20, 0x44	; 68
     312:	54 e0       	ldi	r21, 0x04	; 4
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	8d e9       	ldi	r24, 0x9D	; 157
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     320:	10 92 cf 04 	sts	0x04CF, r1
     324:	10 92 d0 04 	sts	0x04D0, r1
     328:	10 92 d1 04 	sts	0x04D1, r1
     32c:	10 92 d2 04 	sts	0x04D2, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     330:	88 ec       	ldi	r24, 0xC8	; 200
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
     338:	f3 cf       	rjmp	.-26     	; 0x320 <TaskStart+0x3a>

0000033a <SerialTransmitTask>:
	INT8U CharCounter=0;
	INT16U StringLength;
	char LocalMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
     33a:	88 ec       	ldi	r24, 0xC8	; 200
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
     342:	fb cf       	rjmp	.-10     	; 0x33a <SerialTransmitTask>

00000344 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	1f 92       	push	r1
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
     34e:	02 e0       	ldi	r16, 0x02	; 2
		OSMboxPost(LedMBox, (void *)&tmp);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
     350:	11 e0       	ldi	r17, 0x01	; 1
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
     352:	80 ed       	ldi	r24, 0xD0	; 208
     354:	97 e0       	ldi	r25, 0x07	; 7
     356:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
     35a:	09 83       	std	Y+1, r16	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	80 91 3d 03 	lds	r24, 0x033D
     366:	90 91 3e 03 	lds	r25, 0x033E
     36a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
     36e:	80 ed       	ldi	r24, 0xD0	; 208
     370:	97 e0       	ldi	r25, 0x07	; 7
     372:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
     376:	19 83       	std	Y+1, r17	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
     378:	be 01       	movw	r22, r28
     37a:	6f 5f       	subi	r22, 0xFF	; 255
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	80 91 3d 03 	lds	r24, 0x033D
     382:	90 91 3e 03 	lds	r25, 0x033E
     386:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
     38a:	80 ed       	ldi	r24, 0xD0	; 208
     38c:	97 e0       	ldi	r25, 0x07	; 7
     38e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
     392:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);				
     394:	be 01       	movw	r22, r28
     396:	6f 5f       	subi	r22, 0xFF	; 255
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	80 91 3d 03 	lds	r24, 0x033D
     39e:	90 91 3e 03 	lds	r25, 0x033E
     3a2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <OSMboxPost>
     3a6:	d5 cf       	rjmp	.-86     	; 0x352 <TimerTask+0xe>

000003a8 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     3a8:	0d ec       	ldi	r16, 0xCD	; 205
     3aa:	1c ec       	ldi	r17, 0xCC	; 204
     3ac:	dc ec       	ldi	r29, 0xCC	; 204
     3ae:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     3b0:	81 2c       	mov	r8, r1
     3b2:	91 2c       	mov	r9, r1
     3b4:	68 94       	set
     3b6:	aa 24       	eor	r10, r10
     3b8:	a7 f8       	bld	r10, 7
     3ba:	0f 2e       	mov	r0, r31
     3bc:	ff e3       	ldi	r31, 0x3F	; 63
     3be:	bf 2e       	mov	r11, r31
     3c0:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     3c2:	41 2c       	mov	r4, r1
     3c4:	51 2c       	mov	r5, r1
     3c6:	61 2c       	mov	r6, r1
     3c8:	0f 2e       	mov	r0, r31
     3ca:	ff e3       	ldi	r31, 0x3F	; 63
     3cc:	7f 2e       	mov	r7, r31
     3ce:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     3d0:	0f 2e       	mov	r0, r31
     3d2:	fd ec       	ldi	r31, 0xCD	; 205
     3d4:	2f 2e       	mov	r2, r31
     3d6:	f0 2d       	mov	r31, r0
     3d8:	0f 2e       	mov	r0, r31
     3da:	fc ec       	ldi	r31, 0xCC	; 204
     3dc:	3f 2e       	mov	r3, r31
     3de:	f0 2d       	mov	r31, r0
     3e0:	0d c0       	rjmp	.+26     	; 0x3fc <LedTask+0x54>
		if (msg != NULL){
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     3e2:	0d ec       	ldi	r16, 0xCD	; 205
     3e4:	1c ec       	ldi	r17, 0xCC	; 204
     3e6:	dc ec       	ldi	r29, 0xCC	; 204
     3e8:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     3ea:	81 2c       	mov	r8, r1
     3ec:	91 2c       	mov	r9, r1
     3ee:	68 94       	set
     3f0:	aa 24       	eor	r10, r10
     3f2:	a7 f8       	bld	r10, 7
     3f4:	0f 2e       	mov	r0, r31
     3f6:	ff e3       	ldi	r31, 0x3F	; 63
     3f8:	bf 2e       	mov	r11, r31
     3fa:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     3fc:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     3fe:	28 2d       	mov	r18, r8
     400:	39 2d       	mov	r19, r9
     402:	4a 2d       	mov	r20, r10
     404:	5b 2d       	mov	r21, r11
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e8       	ldi	r24, 0x80	; 128
     40c:	9f e3       	ldi	r25, 0x3F	; 63
     40e:	0e 94 ee 06 	call	0xddc	; 0xddc <__divsf3>
     412:	6b 01       	movw	r12, r22
     414:	7c 01       	movw	r14, r24
     416:	20 2f       	mov	r18, r16
     418:	31 2f       	mov	r19, r17
     41a:	4d 2f       	mov	r20, r29
     41c:	5c 2f       	mov	r21, r28
     41e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__mulsf3>
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	48 e4       	ldi	r20, 0x48	; 72
     428:	53 e4       	ldi	r21, 0x43	; 67
     42a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__mulsf3>
     42e:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     432:	cb 01       	movw	r24, r22
     434:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     438:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     43a:	20 2f       	mov	r18, r16
     43c:	31 2f       	mov	r19, r17
     43e:	4d 2f       	mov	r20, r29
     440:	5c 2f       	mov	r21, r28
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	80 e8       	ldi	r24, 0x80	; 128
     448:	9f e3       	ldi	r25, 0x3F	; 63
     44a:	0e 94 89 06 	call	0xd12	; 0xd12 <__subsf3>
     44e:	9b 01       	movw	r18, r22
     450:	ac 01       	movw	r20, r24
     452:	c7 01       	movw	r24, r14
     454:	b6 01       	movw	r22, r12
     456:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__mulsf3>
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	48 e4       	ldi	r20, 0x48	; 72
     460:	53 e4       	ldi	r21, 0x43	; 67
     462:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__mulsf3>
     466:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     46a:	cb 01       	movw	r24, r22
     46c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     470:	80 91 3d 03 	lds	r24, 0x033D
     474:	90 91 3e 03 	lds	r25, 0x033E
     478:	0e 94 af 04 	call	0x95e	; 0x95e <OSMboxAccept>

		if (msg != NULL){
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	09 f4       	brne	.+2      	; 0x482 <LedTask+0xda>
     480:	bd cf       	rjmp	.-134    	; 0x3fc <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     482:	fc 01       	movw	r30, r24
     484:	80 81       	ld	r24, Z
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	c9 f0       	breq	.+50     	; 0x4bc <LedTask+0x114>
     48a:	08 f4       	brcc	.+2      	; 0x48e <LedTask+0xe6>
     48c:	aa cf       	rjmp	.-172    	; 0x3e2 <LedTask+0x3a>
     48e:	82 30       	cpi	r24, 0x02	; 2
     490:	09 f0       	breq	.+2      	; 0x494 <LedTask+0xec>
     492:	b4 cf       	rjmp	.-152    	; 0x3fc <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     494:	04 2d       	mov	r16, r4
     496:	15 2d       	mov	r17, r5
     498:	d6 2d       	mov	r29, r6
     49a:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     49c:	0f 2e       	mov	r0, r31
     49e:	fa e9       	ldi	r31, 0x9A	; 154
     4a0:	8f 2e       	mov	r8, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f9 e9       	ldi	r31, 0x99	; 153
     4a8:	9f 2e       	mov	r9, r31
     4aa:	f0 2d       	mov	r31, r0
     4ac:	0f 2e       	mov	r0, r31
     4ae:	f9 e1       	ldi	r31, 0x19	; 25
     4b0:	af 2e       	mov	r10, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	68 94       	set
     4b6:	bb 24       	eor	r11, r11
     4b8:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     4ba:	a0 cf       	rjmp	.-192    	; 0x3fc <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     4bc:	04 2d       	mov	r16, r4
     4be:	15 2d       	mov	r17, r5
     4c0:	d6 2d       	mov	r29, r6
     4c2:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     4c4:	82 2c       	mov	r8, r2
     4c6:	93 2c       	mov	r9, r3
     4c8:	0f 2e       	mov	r0, r31
     4ca:	fc ec       	ldi	r31, 0xCC	; 204
     4cc:	af 2e       	mov	r10, r31
     4ce:	f0 2d       	mov	r31, r0
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe e3       	ldi	r31, 0x3E	; 62
     4d4:	bf 2e       	mov	r11, r31
     4d6:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     4d8:	91 cf       	rjmp	.-222    	; 0x3fc <LedTask+0x54>

000004da <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     4da:	0e 94 85 02 	call	0x50a	; 0x50a <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     4de:	0e 94 6c 05 	call	0xad8	; 0xad8 <OSInit>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 c3 04 	call	0x986	; 0x986 <OSMboxCreate>
     4ea:	90 93 3e 03 	sts	0x033E, r25
     4ee:	80 93 3d 03 	sts	0x033D, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	44 ec       	ldi	r20, 0xC4	; 196
     4f6:	54 e0       	ldi	r21, 0x04	; 4
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	83 e7       	ldi	r24, 0x73	; 115
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     504:	0e 94 de 03 	call	0x7bc	; 0x7bc <OSStart>
     508:	ff cf       	rjmp	.-2      	; 0x508 <main+0x2e>

0000050a <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     50a:	f8 94       	cli
	WatchDogReset();
     50c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     510:	84 b7       	in	r24, 0x34	; 52
     512:	87 7f       	andi	r24, 0xF7	; 247
     514:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     516:	e0 e6       	ldi	r30, 0x60	; 96
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	88 61       	ori	r24, 0x18	; 24
     51e:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     520:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     522:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     524:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     526:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     528:	24 9a       	sbi	0x04, 4	; 4

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     52e:	8d e0       	ldi	r24, 0x0D	; 13
     530:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     532:	86 e2       	ldi	r24, 0x26	; 38
     534:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     536:	ee e6       	ldi	r30, 0x6E	; 110
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	81 60       	ori	r24, 0x01	; 1
     53e:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     540:	e4 e6       	ldi	r30, 0x64	; 100
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
     546:	8f 7d       	andi	r24, 0xDF	; 223
     548:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     54a:	78 94       	sei
     54c:	08 95       	ret

0000054e <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     54e:	fa 01       	movw	r30, r20
     550:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     55a:	31 97       	sbiw	r30, 0x01	; 1
     55c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     58e:	31 97       	sbiw	r30, 0x01	; 1
     590:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     592:	31 97       	sbiw	r30, 0x01	; 1
     594:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     59a:	31 97       	sbiw	r30, 0x01	; 1
     59c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     59e:	31 97       	sbiw	r30, 0x01	; 1
     5a0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     5a2:	31 97       	sbiw	r30, 0x01	; 1
     5a4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     5aa:	31 97       	sbiw	r30, 0x01	; 1
     5ac:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     5c2:	31 97       	sbiw	r30, 0x01	; 1
     5c4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	80 e8       	ldi	r24, 0x80	; 128
     5da:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     5dc:	ca 01       	movw	r24, r20
     5de:	83 97       	sbiw	r24, 0x23	; 35
     5e0:	08 95       	ret

000005e2 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     5e2:	08 95       	ret

000005e4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     5e4:	08 95       	ret

000005e6 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     5e6:	08 95       	ret

000005e8 <OSTaskIdle>:

void OSTaskIdle (void *pdata)
{
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     5e8:	f8 94       	cli
        OSIdleCtr++;
        OS_EXIT_CRITICAL();
     5ea:	78 94       	sei
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <OSTaskIdle>

000005ee <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     5f6:	fc 01       	movw	r30, r24
     5f8:	05 85       	ldd	r16, Z+13	; 0x0d
     5fa:	e0 2f       	mov	r30, r16
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	e0 50       	subi	r30, 0x00	; 0
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	10 81       	ld	r17, Z
    bity = OSMapTbl[y];
     604:	21 2f       	mov	r18, r17
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	d9 01       	movw	r26, r18
     60a:	a0 50       	subi	r26, 0x00	; 0
     60c:	be 4f       	sbci	r27, 0xFE	; 254
     60e:	dc 91       	ld	r29, X
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     610:	fc 01       	movw	r30, r24
     612:	e2 0f       	add	r30, r18
     614:	f3 1f       	adc	r31, r19
     616:	52 81       	ldd	r21, Z+2	; 0x02
     618:	a5 2f       	mov	r26, r21
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	a0 50       	subi	r26, 0x00	; 0
     61e:	bf 4f       	sbci	r27, 0xFF	; 255
     620:	cc 91       	ld	r28, X
    bitx = OSMapTbl[x];
     622:	ac 2f       	mov	r26, r28
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	a0 50       	subi	r26, 0x00	; 0
     628:	be 4f       	sbci	r27, 0xFE	; 254
     62a:	ac 91       	ld	r26, X
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     62c:	11 0f       	add	r17, r17
     62e:	11 0f       	add	r17, r17
     630:	11 0f       	add	r17, r17
     632:	c1 0f       	add	r28, r17
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     634:	ba 2f       	mov	r27, r26
     636:	b0 95       	com	r27
     638:	5b 23       	and	r21, r27
     63a:	52 83       	std	Z+2, r21	; 0x02
     63c:	51 11       	cpse	r21, r1
     63e:	05 c0       	rjmp	.+10     	; 0x64a <OSEventTaskRdy+0x5c>
        pevent->OSEventGrp &= ~bity;
     640:	5d 2f       	mov	r21, r29
     642:	50 95       	com	r21
     644:	05 23       	and	r16, r21
     646:	fc 01       	movw	r30, r24
     648:	05 87       	std	Z+13, r16	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     64a:	ec 2f       	mov	r30, r28
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	e4 58       	subi	r30, 0x84	; 132
     654:	fa 4f       	sbci	r31, 0xFA	; 250
     656:	01 90       	ld	r0, Z+
     658:	f0 81       	ld	r31, Z
     65a:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     65c:	13 86       	std	Z+11, r1	; 0x0b
     65e:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     660:	17 82       	std	Z+7, r1	; 0x07
     662:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     664:	71 87       	std	Z+9, r23	; 0x09
     666:	60 87       	std	Z+8, r22	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */    
#endif    
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     668:	40 95       	com	r20
     66a:	84 85       	ldd	r24, Z+12	; 0x0c
     66c:	48 23       	and	r20, r24
     66e:	44 87       	std	Z+12, r20	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     670:	41 11       	cpse	r20, r1
     672:	0b c0       	rjmp	.+22     	; 0x68a <OSEventTaskRdy+0x9c>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     674:	80 91 dd 04 	lds	r24, 0x04DD
     678:	d8 2b       	or	r29, r24
     67a:	d0 93 dd 04 	sts	0x04DD, r29
        OSRdyTbl[y]     |=  bitx;
     67e:	f9 01       	movw	r30, r18
     680:	e2 52       	subi	r30, 0x22	; 34
     682:	fb 4f       	sbci	r31, 0xFB	; 251
     684:	80 81       	ld	r24, Z
     686:	a8 2b       	or	r26, r24
     688:	a0 83       	st	Z, r26
    }
}
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	08 95       	ret

00000694 <OSEventWaitListInit>:
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
     694:	fc 01       	movw	r30, r24
     696:	15 86       	std	Z+13, r1	; 0x0d
     698:	32 96       	adiw	r30, 0x02	; 2
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     69a:	80 e0       	ldi	r24, 0x00	; 0
        pevent->OSEventTbl[i] = 0x00;
     69c:	11 92       	st	Z+, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     69e:	8f 5f       	subi	r24, 0xFF	; 255
     6a0:	88 30       	cpi	r24, 0x08	; 8
     6a2:	e1 f7       	brne	.-8      	; 0x69c <OSEventWaitListInit+0x8>
        pevent->OSEventTbl[i] = 0x00;
    }
}
     6a4:	08 95       	ret

000006a6 <OSIntExit>:
*********************************************************************************************************
*/

void OSIntExit (void)
{
    OS_ENTER_CRITICAL();
     6a6:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
     6a8:	80 91 e8 04 	lds	r24, 0x04E8
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	80 93 e8 04 	sts	0x04E8, r24
     6b2:	90 91 c5 04 	lds	r25, 0x04C5
     6b6:	89 2b       	or	r24, r25
     6b8:	e1 f5       	brne	.+120    	; 0x732 <OSIntExit+0x8c>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
     6ba:	e0 91 dd 04 	lds	r30, 0x04DD
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e0 50       	subi	r30, 0x00	; 0
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 81       	ld	r24, Z
     6c6:	80 93 3c 03 	sts	0x033C, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
     6ca:	e8 2f       	mov	r30, r24
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	e2 52       	subi	r30, 0x22	; 34
     6d0:	fb 4f       	sbci	r31, 0xFB	; 251
     6d2:	e0 81       	ld	r30, Z
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	e0 50       	subi	r30, 0x00	; 0
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	88 0f       	add	r24, r24
     6dc:	88 0f       	add	r24, r24
     6de:	88 0f       	add	r24, r24
     6e0:	90 81       	ld	r25, Z
     6e2:	89 0f       	add	r24, r25
     6e4:	80 93 cb 04 	sts	0x04CB, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
     6e8:	90 91 cc 04 	lds	r25, 0x04CC
     6ec:	89 17       	cp	r24, r25
     6ee:	09 f1       	breq	.+66     	; 0x732 <OSIntExit+0x8c>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     6f0:	e8 2f       	mov	r30, r24
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e4 58       	subi	r30, 0x84	; 132
     6fa:	fa 4f       	sbci	r31, 0xFA	; 250
     6fc:	80 81       	ld	r24, Z
     6fe:	91 81       	ldd	r25, Z+1	; 0x01
     700:	90 93 dc 04 	sts	0x04DC, r25
     704:	80 93 db 04 	sts	0x04DB, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
     708:	80 91 cf 04 	lds	r24, 0x04CF
     70c:	90 91 d0 04 	lds	r25, 0x04D0
     710:	a0 91 d1 04 	lds	r26, 0x04D1
     714:	b0 91 d2 04 	lds	r27, 0x04D2
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	a1 1d       	adc	r26, r1
     71c:	b1 1d       	adc	r27, r1
     71e:	80 93 cf 04 	sts	0x04CF, r24
     722:	90 93 d0 04 	sts	0x04D0, r25
     726:	a0 93 d1 04 	sts	0x04D1, r26
     72a:	b0 93 d2 04 	sts	0x04D2, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
     72e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
     732:	78 94       	sei
     734:	08 95       	ret

00000736 <OSSched>:
void OSSched (void)
{
    INT8U y;


    OS_ENTER_CRITICAL();
     736:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
     738:	90 91 e8 04 	lds	r25, 0x04E8
     73c:	80 91 c5 04 	lds	r24, 0x04C5
     740:	89 2b       	or	r24, r25
     742:	d1 f5       	brne	.+116    	; 0x7b8 <OSSched+0x82>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
     744:	e0 91 dd 04 	lds	r30, 0x04DD
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e0 50       	subi	r30, 0x00	; 0
     74c:	ff 4f       	sbci	r31, 0xFF	; 255
     74e:	80 81       	ld	r24, Z
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     750:	e8 2f       	mov	r30, r24
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e2 52       	subi	r30, 0x22	; 34
     756:	fb 4f       	sbci	r31, 0xFB	; 251
     758:	e0 81       	ld	r30, Z
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	e0 50       	subi	r30, 0x00	; 0
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	88 0f       	add	r24, r24
     762:	88 0f       	add	r24, r24
     764:	88 0f       	add	r24, r24
     766:	90 81       	ld	r25, Z
     768:	e8 2f       	mov	r30, r24
     76a:	e9 0f       	add	r30, r25
     76c:	e0 93 cb 04 	sts	0x04CB, r30
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
     770:	80 91 cc 04 	lds	r24, 0x04CC
     774:	e8 17       	cp	r30, r24
     776:	01 f1       	breq	.+64     	; 0x7b8 <OSSched+0x82>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e4 58       	subi	r30, 0x84	; 132
     780:	fa 4f       	sbci	r31, 0xFA	; 250
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	90 93 dc 04 	sts	0x04DC, r25
     78a:	80 93 db 04 	sts	0x04DB, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
     78e:	80 91 cf 04 	lds	r24, 0x04CF
     792:	90 91 d0 04 	lds	r25, 0x04D0
     796:	a0 91 d1 04 	lds	r26, 0x04D1
     79a:	b0 91 d2 04 	lds	r27, 0x04D2
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	a1 1d       	adc	r26, r1
     7a2:	b1 1d       	adc	r27, r1
     7a4:	80 93 cf 04 	sts	0x04CF, r24
     7a8:	90 93 d0 04 	sts	0x04D0, r25
     7ac:	a0 93 d1 04 	sts	0x04D1, r26
     7b0:	b0 93 d2 04 	sts	0x04D2, r27
#if 1
			//DebugPulse ();
#endif	
			
#if 1			
            OS_TASK_SW();                        /* Perform a context switch                           */
     7b4:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
     7b8:	78 94       	sei
     7ba:	08 95       	ret

000007bc <OSStart>:
#if 0
	DebugPulse();
#endif	
	
	
    if (OSRunning == FALSE) {
     7bc:	80 91 c6 04 	lds	r24, 0x04C6
     7c0:	81 11       	cpse	r24, r1
     7c2:	26 c0       	rjmp	.+76     	; 0x810 <OSStart+0x54>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
     7c4:	e0 91 dd 04 	lds	r30, 0x04DD
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	e0 50       	subi	r30, 0x00	; 0
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	e0 81       	ld	r30, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
     7d0:	ae 2f       	mov	r26, r30
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	a2 52       	subi	r26, 0x22	; 34
     7d6:	bb 4f       	sbci	r27, 0xFB	; 251
     7d8:	ac 91       	ld	r26, X
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	a0 50       	subi	r26, 0x00	; 0
     7de:	bf 4f       	sbci	r27, 0xFF	; 255
        OSPrioHighRdy = (INT8U)((y << 3) + x);
     7e0:	ee 0f       	add	r30, r30
     7e2:	ee 0f       	add	r30, r30
     7e4:	ee 0f       	add	r30, r30
     7e6:	8c 91       	ld	r24, X
     7e8:	e8 0f       	add	r30, r24
     7ea:	e0 93 cb 04 	sts	0x04CB, r30
        OSPrioCur     = OSPrioHighRdy;
     7ee:	e0 93 cc 04 	sts	0x04CC, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	e4 58       	subi	r30, 0x84	; 132
     7fa:	fa 4f       	sbci	r31, 0xFA	; 250
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	90 93 dc 04 	sts	0x04DC, r25
     804:	80 93 db 04 	sts	0x04DB, r24
        OSTCBCur      = OSTCBHighRdy;
     808:	90 93 ea 04 	sts	0x04EA, r25
     80c:	80 93 e9 04 	sts	0x04E9, r24
    }
	
	
#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
     810:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
     814:	08 95       	ret

00000816 <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
     81a:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     81c:	e0 91 d7 04 	lds	r30, 0x04D7
     820:	f0 91 d8 04 	lds	r31, 0x04D8
    if (ptcb != (OS_TCB *)0) {
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	09 f4       	brne	.+2      	; 0x82a <OSTCBInit+0x14>
     828:	4f c0       	rjmp	.+158    	; 0x8c8 <OSTCBInit+0xb2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
     82a:	22 81       	ldd	r18, Z+2	; 0x02
     82c:	33 81       	ldd	r19, Z+3	; 0x03
     82e:	30 93 d8 04 	sts	0x04D8, r19
     832:	20 93 d7 04 	sts	0x04D7, r18
        OS_EXIT_CRITICAL();
     836:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
     838:	71 83       	std	Z+1, r23	; 0x01
     83a:	60 83       	st	Z, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
     83c:	85 87       	std	Z+13, r24	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
     83e:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
     840:	13 86       	std	Z+11, r1	; 0x0b
     842:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN        
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
     844:	c8 2f       	mov	r28, r24
     846:	c6 95       	lsr	r28
     848:	c6 95       	lsr	r28
     84a:	c6 95       	lsr	r28
     84c:	c7 87       	std	Z+15, r28	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
     84e:	d0 e0       	ldi	r29, 0x00	; 0
     850:	c0 50       	subi	r28, 0x00	; 0
     852:	de 4f       	sbci	r29, 0xFE	; 254
     854:	98 81       	ld	r25, Y
     856:	91 8b       	std	Z+17, r25	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
     858:	c8 2f       	mov	r28, r24
     85a:	c7 70       	andi	r28, 0x07	; 7
     85c:	c6 87       	std	Z+14, r28	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
     85e:	d0 e0       	ldi	r29, 0x00	; 0
     860:	c0 50       	subi	r28, 0x00	; 0
     862:	de 4f       	sbci	r29, 0xFE	; 254
     864:	98 81       	ld	r25, Y
     866:	90 8b       	std	Z+16, r25	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
     868:	17 82       	std	Z+7, r1	; 0x07
     86a:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     86c:	11 86       	std	Z+9, r1	; 0x09
     86e:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
     870:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
     872:	a8 2f       	mov	r26, r24
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	aa 0f       	add	r26, r26
     878:	bb 1f       	adc	r27, r27
     87a:	a4 58       	subi	r26, 0x84	; 132
     87c:	ba 4f       	sbci	r27, 0xFA	; 250
     87e:	ed 93       	st	X+, r30
     880:	fc 93       	st	X, r31
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
     882:	a0 91 cd 04 	lds	r26, 0x04CD
     886:	b0 91 ce 04 	lds	r27, 0x04CE
     88a:	b3 83       	std	Z+3, r27	; 0x03
     88c:	a2 83       	std	Z+2, r26	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
     88e:	15 82       	std	Z+5, r1	; 0x05
     890:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     892:	10 97       	sbiw	r26, 0x00	; 0
     894:	21 f0       	breq	.+8      	; 0x89e <OSTCBInit+0x88>
            OSTCBList->OSTCBPrev = ptcb;
     896:	15 96       	adiw	r26, 0x05	; 5
     898:	fc 93       	st	X, r31
     89a:	ee 93       	st	-X, r30
     89c:	14 97       	sbiw	r26, 0x04	; 4
        }
        OSTCBList               = ptcb;
     89e:	f0 93 ce 04 	sts	0x04CE, r31
     8a2:	e0 93 cd 04 	sts	0x04CD, r30
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     8a6:	90 91 dd 04 	lds	r25, 0x04DD
     8aa:	81 89       	ldd	r24, Z+17	; 0x11
     8ac:	89 2b       	or	r24, r25
     8ae:	80 93 dd 04 	sts	0x04DD, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     8b2:	a7 85       	ldd	r26, Z+15	; 0x0f
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	a2 52       	subi	r26, 0x22	; 34
     8b8:	bb 4f       	sbci	r27, 0xFB	; 251
     8ba:	9c 91       	ld	r25, X
     8bc:	80 89       	ldd	r24, Z+16	; 0x10
     8be:	89 2b       	or	r24, r25
     8c0:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
     8c2:	78 94       	sei
        return (OS_NO_ERR);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <OSTCBInit+0xb6>
    } else {
        OS_EXIT_CRITICAL();
     8c8:	78 94       	sei
        return (OS_NO_MORE_TCB);
     8ca:	86 e4       	ldi	r24, 0x46	; 70
    }
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <OSTimeTick>:

void OSTimeTick (void)
{
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
     8d2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <OSTimeTickHook>
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
     8d6:	e0 91 cd 04 	lds	r30, 0x04CD
     8da:	f0 91 ce 04 	lds	r31, 0x04CE
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     8de:	85 85       	ldd	r24, Z+13	; 0x0d
     8e0:	8f 33       	cpi	r24, 0x3F	; 63
     8e2:	39 f1       	breq	.+78     	; 0x932 <__stack+0x33>
     8e4:	40 91 dd 04 	lds	r20, 0x04DD
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	30 e0       	ldi	r19, 0x00	; 0

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
     8ec:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
     8ee:	82 85       	ldd	r24, Z+10	; 0x0a
     8f0:	93 85       	ldd	r25, Z+11	; 0x0b
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	a9 f0       	breq	.+42     	; 0x920 <__stack+0x21>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	93 87       	std	Z+11, r25	; 0x0b
     8fa:	82 87       	std	Z+10, r24	; 0x0a
     8fc:	89 2b       	or	r24, r25
     8fe:	81 f4       	brne	.+32     	; 0x920 <__stack+0x21>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
     900:	84 85       	ldd	r24, Z+12	; 0x0c
     902:	83 fd       	sbrc	r24, 3
     904:	0b c0       	rjmp	.+22     	; 0x91c <__stack+0x1d>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     906:	81 89       	ldd	r24, Z+17	; 0x11
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     908:	a7 85       	ldd	r26, Z+15	; 0x0f
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	a2 52       	subi	r26, 0x22	; 34
     90e:	bb 4f       	sbci	r27, 0xFB	; 251
     910:	5c 91       	ld	r21, X
     912:	90 89       	ldd	r25, Z+16	; 0x10
     914:	95 2b       	or	r25, r21
     916:	9c 93       	st	X, r25
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     918:	48 2b       	or	r20, r24
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     91c:	33 87       	std	Z+11, r19	; 0x0b
     91e:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
     920:	02 80       	ldd	r0, Z+2	; 0x02
     922:	f3 81       	ldd	r31, Z+3	; 0x03
     924:	e0 2d       	mov	r30, r0
        OS_EXIT_CRITICAL();
     926:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     928:	85 85       	ldd	r24, Z+13	; 0x0d
     92a:	8f 33       	cpi	r24, 0x3F	; 63
     92c:	f9 f6       	brne	.-66     	; 0x8ec <OSTimeTick+0x1a>
     92e:	40 93 dd 04 	sts	0x04DD, r20
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }
	
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
     932:	f8 94       	cli
    OSTime++;
     934:	80 91 eb 04 	lds	r24, 0x04EB
     938:	90 91 ec 04 	lds	r25, 0x04EC
     93c:	a0 91 ed 04 	lds	r26, 0x04ED
     940:	b0 91 ee 04 	lds	r27, 0x04EE
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	a1 1d       	adc	r26, r1
     948:	b1 1d       	adc	r27, r1
     94a:	80 93 eb 04 	sts	0x04EB, r24
     94e:	90 93 ec 04 	sts	0x04EC, r25
     952:	a0 93 ed 04 	sts	0x04ED, r26
     956:	b0 93 ee 04 	sts	0x04EE, r27
    OS_EXIT_CRITICAL();
     95a:	78 94       	sei
     95c:	08 95       	ret

0000095e <OSMboxAccept>:
*              == (void *)0  if the mailbox is empty or if you didn't pass the proper event pointer.
*********************************************************************************************************
*/

void *OSMboxAccept (OS_EVENT *pevent)
{
     95e:	fc 01       	movw	r30, r24
    void  *msg;


    OS_ENTER_CRITICAL();
     960:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
     962:	84 85       	ldd	r24, Z+12	; 0x0c
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	21 f0       	breq	.+8      	; 0x970 <OSMboxAccept+0x12>
        OS_EXIT_CRITICAL();
     968:	78 94       	sei
        return ((void *)0);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret
    }
    msg = pevent->OSEventPtr; 
     970:	20 81       	ld	r18, Z
     972:	31 81       	ldd	r19, Z+1	; 0x01
    if (msg != (void *)0) {                               /* See if there is already a message         */
     974:	21 15       	cp	r18, r1
     976:	31 05       	cpc	r19, r1
     978:	11 f0       	breq	.+4      	; 0x97e <OSMboxAccept+0x20>
        pevent->OSEventPtr = (void *)0;                   /* Clear the mailbox                         */
     97a:	11 82       	std	Z+1, r1	; 0x01
     97c:	10 82       	st	Z, r1
    }
    OS_EXIT_CRITICAL();
     97e:	78 94       	sei
    return (msg);                                         /* Return the message received (or NULL)     */
     980:	82 2f       	mov	r24, r18
     982:	93 2f       	mov	r25, r19
}
     984:	08 95       	ret

00000986 <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     98a:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     98c:	c0 91 e6 04 	lds	r28, 0x04E6
     990:	d0 91 e7 04 	lds	r29, 0x04E7
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	31 f0       	breq	.+12     	; 0x9a4 <OSMboxCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     998:	28 81       	ld	r18, Y
     99a:	39 81       	ldd	r19, Y+1	; 0x01
     99c:	30 93 e7 04 	sts	0x04E7, r19
     9a0:	20 93 e6 04 	sts	0x04E6, r18
    }
    OS_EXIT_CRITICAL();
     9a4:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
     9a6:	20 97       	sbiw	r28, 0x00	; 0
     9a8:	39 f0       	breq	.+14     	; 0x9b8 <OSMboxCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	88 83       	st	Y, r24
        OSEventWaitListInit(pevent);
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 4a 03 	call	0x694	; 0x694 <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
}
     9b8:	ce 01       	movw	r24, r28
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <OSMboxPost>:
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    OS_ENTER_CRITICAL();
     9c0:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
     9c2:	fc 01       	movw	r30, r24
     9c4:	24 85       	ldd	r18, Z+12	; 0x0c
     9c6:	21 30       	cpi	r18, 0x01	; 1
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <OSMboxPost+0x10>
        OS_EXIT_CRITICAL();
     9ca:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	08 95       	ret
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
     9d0:	fc 01       	movw	r30, r24
     9d2:	25 85       	ldd	r18, Z+13	; 0x0d
     9d4:	22 23       	and	r18, r18
     9d6:	41 f0       	breq	.+16     	; 0x9e8 <OSMboxPost+0x28>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
     9d8:	42 e0       	ldi	r20, 0x02	; 2
     9da:	0e 94 f7 02 	call	0x5ee	; 0x5ee <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
     9de:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
     9e0:	0e 94 9b 03 	call	0x736	; 0x736 <OSSched>
        return (OS_NO_ERR);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 95       	ret
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 81       	ld	r18, Z
     9ec:	31 81       	ldd	r19, Z+1	; 0x01
     9ee:	23 2b       	or	r18, r19
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <OSMboxPost+0x38>
            OS_EXIT_CRITICAL();
     9f2:	78 94       	sei
            return (OS_MBOX_FULL);
     9f4:	84 e1       	ldi	r24, 0x14	; 20
     9f6:	08 95       	ret
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
     9f8:	fc 01       	movw	r30, r24
     9fa:	71 83       	std	Z+1, r23	; 0x01
     9fc:	60 83       	st	Z, r22
            OS_EXIT_CRITICAL();
     9fe:	78 94       	sei
            return (OS_NO_ERR);
     a00:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
     a02:	08 95       	ret

00000a04 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	b2 2e       	mov	r11, r18

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
     a18:	2f e3       	ldi	r18, 0x3F	; 63
     a1a:	2b 15       	cp	r18, r11
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <OSTaskCreate+0x1c>
     a1e:	4f c0       	rjmp	.+158    	; 0xabe <OSTaskCreate+0xba>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     a20:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
     a22:	cb 2d       	mov	r28, r11
     a24:	d0 e0       	ldi	r29, 0x00	; 0
     a26:	fe 01       	movw	r30, r28
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e4 58       	subi	r30, 0x84	; 132
     a2e:	fa 4f       	sbci	r31, 0xFA	; 250
     a30:	01 90       	ld	r0, Z+
     a32:	f0 81       	ld	r31, Z
     a34:	e0 2d       	mov	r30, r0
     a36:	ef 2b       	or	r30, r31
     a38:	09 f0       	breq	.+2      	; 0xa3c <OSTaskCreate+0x38>
     a3a:	3e c0       	rjmp	.+124    	; 0xab8 <OSTaskCreate+0xb4>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
     a3c:	fe 01       	movw	r30, r28
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e4 58       	subi	r30, 0x84	; 132
     a44:	fa 4f       	sbci	r31, 0xFA	; 250
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	31 83       	std	Z+1, r19	; 0x01
     a4c:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
     a4e:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	0e 94 a7 02 	call	0x54e	; 0x54e <OSTaskStkInit>
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
     a58:	c1 2c       	mov	r12, r1
     a5a:	d1 2c       	mov	r13, r1
     a5c:	e1 2c       	mov	r14, r1
     a5e:	f1 2c       	mov	r15, r1
     a60:	00 e0       	ldi	r16, 0x00	; 0
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	bc 01       	movw	r22, r24
     a6e:	8b 2d       	mov	r24, r11
     a70:	0e 94 0b 04 	call	0x816	; 0x816 <OSTCBInit>
        if (err == OS_NO_ERR) {
     a74:	81 11       	cpse	r24, r1
     a76:	17 c0       	rjmp	.+46     	; 0xaa6 <OSTaskCreate+0xa2>
            OS_ENTER_CRITICAL();
     a78:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
     a7a:	80 91 da 04 	lds	r24, 0x04DA
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	80 93 da 04 	sts	0x04DA, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
     a84:	cc 0f       	add	r28, r28
     a86:	dd 1f       	adc	r29, r29
     a88:	c4 58       	subi	r28, 0x84	; 132
     a8a:	da 4f       	sbci	r29, 0xFA	; 250
     a8c:	88 81       	ld	r24, Y
     a8e:	99 81       	ldd	r25, Y+1	; 0x01
     a90:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
     a94:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
     a96:	80 91 c6 04 	lds	r24, 0x04C6
     a9a:	88 23       	and	r24, r24
     a9c:	91 f0       	breq	.+36     	; 0xac2 <OSTaskCreate+0xbe>
#if 0
				DebugPulse();
#endif					
                OSSched();
     a9e:	0e 94 9b 03 	call	0x736	; 0x736 <OSSched>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0f c0       	rjmp	.+30     	; 0xac4 <OSTaskCreate+0xc0>
				DebugPulse();
#endif					
                OSSched();
            }
        } else {
            OS_ENTER_CRITICAL();
     aa6:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
     aa8:	cc 0f       	add	r28, r28
     aaa:	dd 1f       	adc	r29, r29
     aac:	c4 58       	subi	r28, 0x84	; 132
     aae:	da 4f       	sbci	r29, 0xFA	; 250
     ab0:	19 82       	std	Y+1, r1	; 0x01
     ab2:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
     ab4:	78 94       	sei
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <OSTaskCreate+0xc0>
		DebugPulse();
#endif	
		
        return (err);
    } else {
        OS_EXIT_CRITICAL();
     ab8:	78 94       	sei
        return (OS_PRIO_EXIST);
     aba:	88 e2       	ldi	r24, 0x28	; 40
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <OSTaskCreate+0xc0>
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
     abe:	8a e2       	ldi	r24, 0x2A	; 42
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <OSTaskCreate+0xc0>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        OS_EXIT_CRITICAL();
        return (OS_PRIO_EXIST);
    }	
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	bf 90       	pop	r11
     ad6:	08 95       	ret

00000ad8 <OSInit>:
#if 0
	DebugPulse();
#endif	


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
     ad8:	10 92 eb 04 	sts	0x04EB, r1
     adc:	10 92 ec 04 	sts	0x04EC, r1
     ae0:	10 92 ed 04 	sts	0x04ED, r1
     ae4:	10 92 ee 04 	sts	0x04EE, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
     ae8:	10 92 e8 04 	sts	0x04E8, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
     aec:	10 92 c5 04 	sts	0x04C5, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
     af0:	10 92 da 04 	sts	0x04DA, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
     af4:	10 92 c6 04 	sts	0x04C6, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
     af8:	10 92 c7 04 	sts	0x04C7, r1
     afc:	10 92 c8 04 	sts	0x04C8, r1
     b00:	10 92 c9 04 	sts	0x04C9, r1
     b04:	10 92 ca 04 	sts	0x04CA, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
     b08:	10 92 cf 04 	sts	0x04CF, r1
     b0c:	10 92 d0 04 	sts	0x04D0, r1
     b10:	10 92 d1 04 	sts	0x04D1, r1
     b14:	10 92 d2 04 	sts	0x04D2, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
     b18:	10 92 dd 04 	sts	0x04DD, r1
     b1c:	ee ed       	ldi	r30, 0xDE	; 222
     b1e:	f4 e0       	ldi	r31, 0x04	; 4
     b20:	86 ee       	ldi	r24, 0xE6	; 230
     b22:	94 e0       	ldi	r25, 0x04	; 4
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0;
     b24:	11 92       	st	Z+, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
     b26:	e8 17       	cp	r30, r24
     b28:	f9 07       	cpc	r31, r25
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <OSInit+0x4c>
        OSRdyTbl[i] = 0;
    }
                
    OSPrioCur     = 0;
     b2c:	10 92 cc 04 	sts	0x04CC, r1
    OSPrioHighRdy = 0;                                           
     b30:	10 92 cb 04 	sts	0x04CB, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
     b34:	10 92 dc 04 	sts	0x04DC, r1
     b38:	10 92 db 04 	sts	0x04DB, r1
    OSTCBCur      = (OS_TCB *)0;
     b3c:	10 92 ea 04 	sts	0x04EA, r1
     b40:	10 92 e9 04 	sts	0x04E9, r1
    OSTCBList     = (OS_TCB *)0;
     b44:	10 92 ce 04 	sts	0x04CE, r1
     b48:	10 92 cd 04 	sts	0x04CD, r1
     b4c:	ec e7       	ldi	r30, 0x7C	; 124
     b4e:	f5 e0       	ldi	r31, 0x05	; 5
     b50:	8c ef       	ldi	r24, 0xFC	; 252
     b52:	95 e0       	ldi	r25, 0x05	; 5
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
     b54:	11 92       	st	Z+, r1
     b56:	11 92       	st	Z+, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;                                           
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
     b58:	e8 17       	cp	r30, r24
     b5a:	f9 07       	cpc	r31, r25
     b5c:	d9 f7       	brne	.-10     	; 0xb54 <OSInit+0x7c>
     b5e:	8a e1       	ldi	r24, 0x1A	; 26
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	2c eb       	ldi	r18, 0xBC	; 188
     b64:	32 e0       	ldi	r19, 0x02	; 2
     b66:	fc 01       	movw	r30, r24
     b68:	70 97       	sbiw	r30, 0x10	; 16
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24
     b6e:	42 96       	adiw	r24, 0x12	; 18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
     b70:	82 17       	cp	r24, r18
     b72:	93 07       	cpc	r25, r19
     b74:	c1 f7       	brne	.-16     	; 0xb66 <OSInit+0x8e>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
     b76:	10 92 ad 02 	sts	0x02AD, r1
     b7a:	10 92 ac 02 	sts	0x02AC, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	90 93 d8 04 	sts	0x04D8, r25
     b86:	80 93 d7 04 	sts	0x04D7, r24
     b8a:	8d ef       	ldi	r24, 0xFD	; 253
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	2b e7       	ldi	r18, 0x7B	; 123
     b90:	35 e0       	ldi	r19, 0x05	; 5
     b92:	fc 01       	movw	r30, r24
     b94:	3e 97       	sbiw	r30, 0x0e	; 14

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
     b9a:	0e 96       	adiw	r24, 0x0e	; 14
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
     b9c:	82 17       	cp	r24, r18
     b9e:	93 07       	cpc	r25, r19
     ba0:	c1 f7       	brne	.-16     	; 0xb92 <OSInit+0xba>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
     ba2:	10 92 6e 05 	sts	0x056E, r1
     ba6:	10 92 6d 05 	sts	0x056D, r1
    OSEventFreeList                          = &OSEventTbl[0];    
     baa:	8f ee       	ldi	r24, 0xEF	; 239
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	90 93 e7 04 	sts	0x04E7, r25
     bb2:	80 93 e6 04 	sts	0x04E6, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE, 
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
     bb6:	2f e3       	ldi	r18, 0x3F	; 63
     bb8:	4b e3       	ldi	r20, 0x3B	; 59
     bba:	53 e0       	ldi	r21, 0x03	; 3
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	84 ef       	ldi	r24, 0xF4	; 244
     bc2:	92 e0       	ldi	r25, 0x02	; 2
     bc4:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat, 
     bc8:	2e e3       	ldi	r18, 0x3E	; 62
     bca:	4b ef       	ldi	r20, 0xFB	; 251
     bcc:	52 e0       	ldi	r21, 0x02	; 2
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	85 e3       	ldi	r24, 0x35	; 53
     bd4:	96 e0       	ldi	r25, 0x06	; 6
     bd6:	0e 94 02 05 	call	0xa04	; 0xa04 <OSTaskCreate>
     bda:	08 95       	ret

00000bdc <OSTimeDly>:
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    if (ticks > 0) {                                                      /* 0 means no delay!         */
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	e1 f0       	breq	.+56     	; 0xc18 <OSTimeDly+0x3c>
        OS_ENTER_CRITICAL();
     be0:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
     be2:	e0 91 e9 04 	lds	r30, 0x04E9
     be6:	f0 91 ea 04 	lds	r31, 0x04EA
     bea:	a7 85       	ldd	r26, Z+15	; 0x0f
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	a2 52       	subi	r26, 0x22	; 34
     bf0:	bb 4f       	sbci	r27, 0xFB	; 251
     bf2:	20 89       	ldd	r18, Z+16	; 0x10
     bf4:	20 95       	com	r18
     bf6:	3c 91       	ld	r19, X
     bf8:	23 23       	and	r18, r19
     bfa:	2c 93       	st	X, r18
     bfc:	21 11       	cpse	r18, r1
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <OSTimeDly+0x32>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     c00:	21 89       	ldd	r18, Z+17	; 0x11
     c02:	20 95       	com	r18
     c04:	30 91 dd 04 	lds	r19, 0x04DD
     c08:	23 23       	and	r18, r19
     c0a:	20 93 dd 04 	sts	0x04DD, r18
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
     c0e:	93 87       	std	Z+11, r25	; 0x0b
     c10:	82 87       	std	Z+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
     c12:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
     c14:	0e 94 9b 03 	call	0x736	; 0x736 <OSSched>
     c18:	08 95       	ret

00000c1a <OSStatInit>:
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
    OS_ENTER_CRITICAL();
     c22:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
     c24:	10 92 c7 04 	sts	0x04C7, r1
     c28:	10 92 c8 04 	sts	0x04C8, r1
     c2c:	10 92 c9 04 	sts	0x04C9, r1
     c30:	10 92 ca 04 	sts	0x04CA, r1
    OS_EXIT_CRITICAL();
     c34:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
     c36:	88 ec       	ldi	r24, 0xC8	; 200
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
    OS_ENTER_CRITICAL();
     c3e:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
     c40:	80 91 c7 04 	lds	r24, 0x04C7
     c44:	90 91 c8 04 	lds	r25, 0x04C8
     c48:	a0 91 c9 04 	lds	r26, 0x04C9
     c4c:	b0 91 ca 04 	lds	r27, 0x04CA
     c50:	80 93 d3 04 	sts	0x04D3, r24
     c54:	90 93 d4 04 	sts	0x04D4, r25
     c58:	a0 93 d5 04 	sts	0x04D5, r26
     c5c:	b0 93 d6 04 	sts	0x04D6, r27
    OSStatRdy    = TRUE;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 7b 05 	sts	0x057B, r24
    OS_EXIT_CRITICAL();
     c66:	78 94       	sei
     c68:	08 95       	ret

00000c6a <OSTaskStat>:
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
     c6a:	80 91 7b 05 	lds	r24, 0x057B
     c6e:	81 11       	cpse	r24, r1
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <OSTaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
     c72:	80 e9       	ldi	r24, 0x90	; 144
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
     c7a:	80 91 7b 05 	lds	r24, 0x057B
     c7e:	88 23       	and	r24, r24
     c80:	c1 f3       	breq	.-16     	; 0xc72 <OSTaskStat+0x8>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        if (OSIdleCtrMax > 0L) {
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
     c82:	c4 e6       	ldi	r28, 0x64	; 100
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
     c84:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
     c86:	20 91 c7 04 	lds	r18, 0x04C7
     c8a:	30 91 c8 04 	lds	r19, 0x04C8
     c8e:	40 91 c9 04 	lds	r20, 0x04C9
     c92:	50 91 ca 04 	lds	r21, 0x04CA
     c96:	20 93 fc 05 	sts	0x05FC, r18
     c9a:	30 93 fd 05 	sts	0x05FD, r19
     c9e:	40 93 fe 05 	sts	0x05FE, r20
     ca2:	50 93 ff 05 	sts	0x05FF, r21
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
     ca6:	10 92 c7 04 	sts	0x04C7, r1
     caa:	10 92 c8 04 	sts	0x04C8, r1
     cae:	10 92 c9 04 	sts	0x04C9, r1
     cb2:	10 92 ca 04 	sts	0x04CA, r1
        OS_EXIT_CRITICAL();
     cb6:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
     cb8:	c0 90 d3 04 	lds	r12, 0x04D3
     cbc:	d0 90 d4 04 	lds	r13, 0x04D4
     cc0:	e0 90 d5 04 	lds	r14, 0x04D5
     cc4:	f0 90 d6 04 	lds	r15, 0x04D6
     cc8:	c1 14       	cp	r12, r1
     cca:	d1 04       	cpc	r13, r1
     ccc:	e1 04       	cpc	r14, r1
     cce:	f1 04       	cpc	r15, r1
     cd0:	b9 f0       	breq	.+46     	; 0xd00 <OSTaskStat+0x96>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
     cd2:	a4 e6       	ldi	r26, 0x64	; 100
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	0e 94 67 08 	call	0x10ce	; 0x10ce <__muluhisi3>
     cda:	a7 01       	movw	r20, r14
     cdc:	96 01       	movw	r18, r12
     cde:	0e 94 36 08 	call	0x106c	; 0x106c <__udivmodsi4>
     ce2:	8c 2f       	mov	r24, r28
     ce4:	82 1b       	sub	r24, r18
            if (usage > 100) {
     ce6:	85 36       	cpi	r24, 0x65	; 101
     ce8:	1c f0       	brlt	.+6      	; 0xcf0 <OSTaskStat+0x86>
                OSCPUUsage = 100;
     cea:	c0 93 d9 04 	sts	0x04D9, r28
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <OSTaskStat+0x9a>
            } else if (usage < 0) {
     cf0:	88 23       	and	r24, r24
     cf2:	1c f4       	brge	.+6      	; 0xcfa <OSTaskStat+0x90>
                OSCPUUsage =   0;
     cf4:	10 92 d9 04 	sts	0x04D9, r1
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <OSTaskStat+0x9a>
            } else {
                OSCPUUsage = usage;
     cfa:	80 93 d9 04 	sts	0x04D9, r24
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <OSTaskStat+0x9a>
            }
        } else {
            OSCPUUsage = 0;
     d00:	10 92 d9 04 	sts	0x04D9, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
     d04:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
     d08:	88 ec       	ldi	r24, 0xC8	; 200
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <OSTimeDly>
    }
     d10:	b9 cf       	rjmp	.-142    	; 0xc84 <OSTaskStat+0x1a>

00000d12 <__subsf3>:
     d12:	50 58       	subi	r21, 0x80	; 128

00000d14 <__addsf3>:
     d14:	bb 27       	eor	r27, r27
     d16:	aa 27       	eor	r26, r26
     d18:	0e d0       	rcall	.+28     	; 0xd36 <__addsf3x>
     d1a:	0b c1       	rjmp	.+534    	; 0xf32 <__fp_round>
     d1c:	fc d0       	rcall	.+504    	; 0xf16 <__fp_pscA>
     d1e:	30 f0       	brcs	.+12     	; 0xd2c <__addsf3+0x18>
     d20:	01 d1       	rcall	.+514    	; 0xf24 <__fp_pscB>
     d22:	20 f0       	brcs	.+8      	; 0xd2c <__addsf3+0x18>
     d24:	31 f4       	brne	.+12     	; 0xd32 <__addsf3+0x1e>
     d26:	9f 3f       	cpi	r25, 0xFF	; 255
     d28:	11 f4       	brne	.+4      	; 0xd2e <__addsf3+0x1a>
     d2a:	1e f4       	brtc	.+6      	; 0xd32 <__addsf3+0x1e>
     d2c:	f1 c0       	rjmp	.+482    	; 0xf10 <__fp_nan>
     d2e:	0e f4       	brtc	.+2      	; 0xd32 <__addsf3+0x1e>
     d30:	e0 95       	com	r30
     d32:	e7 fb       	bst	r30, 7
     d34:	e7 c0       	rjmp	.+462    	; 0xf04 <__fp_inf>

00000d36 <__addsf3x>:
     d36:	e9 2f       	mov	r30, r25
     d38:	0d d1       	rcall	.+538    	; 0xf54 <__fp_split3>
     d3a:	80 f3       	brcs	.-32     	; 0xd1c <__addsf3+0x8>
     d3c:	ba 17       	cp	r27, r26
     d3e:	62 07       	cpc	r22, r18
     d40:	73 07       	cpc	r23, r19
     d42:	84 07       	cpc	r24, r20
     d44:	95 07       	cpc	r25, r21
     d46:	18 f0       	brcs	.+6      	; 0xd4e <__addsf3x+0x18>
     d48:	71 f4       	brne	.+28     	; 0xd66 <__addsf3x+0x30>
     d4a:	9e f5       	brtc	.+102    	; 0xdb2 <__addsf3x+0x7c>
     d4c:	25 c1       	rjmp	.+586    	; 0xf98 <__fp_zero>
     d4e:	0e f4       	brtc	.+2      	; 0xd52 <__addsf3x+0x1c>
     d50:	e0 95       	com	r30
     d52:	0b 2e       	mov	r0, r27
     d54:	ba 2f       	mov	r27, r26
     d56:	a0 2d       	mov	r26, r0
     d58:	0b 01       	movw	r0, r22
     d5a:	b9 01       	movw	r22, r18
     d5c:	90 01       	movw	r18, r0
     d5e:	0c 01       	movw	r0, r24
     d60:	ca 01       	movw	r24, r20
     d62:	a0 01       	movw	r20, r0
     d64:	11 24       	eor	r1, r1
     d66:	ff 27       	eor	r31, r31
     d68:	59 1b       	sub	r21, r25
     d6a:	99 f0       	breq	.+38     	; 0xd92 <__addsf3x+0x5c>
     d6c:	59 3f       	cpi	r21, 0xF9	; 249
     d6e:	50 f4       	brcc	.+20     	; 0xd84 <__addsf3x+0x4e>
     d70:	50 3e       	cpi	r21, 0xE0	; 224
     d72:	68 f1       	brcs	.+90     	; 0xdce <__addsf3x+0x98>
     d74:	1a 16       	cp	r1, r26
     d76:	f0 40       	sbci	r31, 0x00	; 0
     d78:	a2 2f       	mov	r26, r18
     d7a:	23 2f       	mov	r18, r19
     d7c:	34 2f       	mov	r19, r20
     d7e:	44 27       	eor	r20, r20
     d80:	58 5f       	subi	r21, 0xF8	; 248
     d82:	f3 cf       	rjmp	.-26     	; 0xd6a <__addsf3x+0x34>
     d84:	46 95       	lsr	r20
     d86:	37 95       	ror	r19
     d88:	27 95       	ror	r18
     d8a:	a7 95       	ror	r26
     d8c:	f0 40       	sbci	r31, 0x00	; 0
     d8e:	53 95       	inc	r21
     d90:	c9 f7       	brne	.-14     	; 0xd84 <__addsf3x+0x4e>
     d92:	7e f4       	brtc	.+30     	; 0xdb2 <__addsf3x+0x7c>
     d94:	1f 16       	cp	r1, r31
     d96:	ba 0b       	sbc	r27, r26
     d98:	62 0b       	sbc	r22, r18
     d9a:	73 0b       	sbc	r23, r19
     d9c:	84 0b       	sbc	r24, r20
     d9e:	ba f0       	brmi	.+46     	; 0xdce <__addsf3x+0x98>
     da0:	91 50       	subi	r25, 0x01	; 1
     da2:	a1 f0       	breq	.+40     	; 0xdcc <__addsf3x+0x96>
     da4:	ff 0f       	add	r31, r31
     da6:	bb 1f       	adc	r27, r27
     da8:	66 1f       	adc	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	c2 f7       	brpl	.-16     	; 0xda0 <__addsf3x+0x6a>
     db0:	0e c0       	rjmp	.+28     	; 0xdce <__addsf3x+0x98>
     db2:	ba 0f       	add	r27, r26
     db4:	62 1f       	adc	r22, r18
     db6:	73 1f       	adc	r23, r19
     db8:	84 1f       	adc	r24, r20
     dba:	48 f4       	brcc	.+18     	; 0xdce <__addsf3x+0x98>
     dbc:	87 95       	ror	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b7 95       	ror	r27
     dc4:	f7 95       	ror	r31
     dc6:	9e 3f       	cpi	r25, 0xFE	; 254
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <__addsf3x+0x96>
     dca:	b3 cf       	rjmp	.-154    	; 0xd32 <__addsf3+0x1e>
     dcc:	93 95       	inc	r25
     dce:	88 0f       	add	r24, r24
     dd0:	08 f0       	brcs	.+2      	; 0xdd4 <__addsf3x+0x9e>
     dd2:	99 27       	eor	r25, r25
     dd4:	ee 0f       	add	r30, r30
     dd6:	97 95       	ror	r25
     dd8:	87 95       	ror	r24
     dda:	08 95       	ret

00000ddc <__divsf3>:
     ddc:	0c d0       	rcall	.+24     	; 0xdf6 <__divsf3x>
     dde:	a9 c0       	rjmp	.+338    	; 0xf32 <__fp_round>
     de0:	a1 d0       	rcall	.+322    	; 0xf24 <__fp_pscB>
     de2:	40 f0       	brcs	.+16     	; 0xdf4 <__divsf3+0x18>
     de4:	98 d0       	rcall	.+304    	; 0xf16 <__fp_pscA>
     de6:	30 f0       	brcs	.+12     	; 0xdf4 <__divsf3+0x18>
     de8:	21 f4       	brne	.+8      	; 0xdf2 <__divsf3+0x16>
     dea:	5f 3f       	cpi	r21, 0xFF	; 255
     dec:	19 f0       	breq	.+6      	; 0xdf4 <__divsf3+0x18>
     dee:	8a c0       	rjmp	.+276    	; 0xf04 <__fp_inf>
     df0:	51 11       	cpse	r21, r1
     df2:	d3 c0       	rjmp	.+422    	; 0xf9a <__fp_szero>
     df4:	8d c0       	rjmp	.+282    	; 0xf10 <__fp_nan>

00000df6 <__divsf3x>:
     df6:	ae d0       	rcall	.+348    	; 0xf54 <__fp_split3>
     df8:	98 f3       	brcs	.-26     	; 0xde0 <__divsf3+0x4>

00000dfa <__divsf3_pse>:
     dfa:	99 23       	and	r25, r25
     dfc:	c9 f3       	breq	.-14     	; 0xdf0 <__divsf3+0x14>
     dfe:	55 23       	and	r21, r21
     e00:	b1 f3       	breq	.-20     	; 0xdee <__divsf3+0x12>
     e02:	95 1b       	sub	r25, r21
     e04:	55 0b       	sbc	r21, r21
     e06:	bb 27       	eor	r27, r27
     e08:	aa 27       	eor	r26, r26
     e0a:	62 17       	cp	r22, r18
     e0c:	73 07       	cpc	r23, r19
     e0e:	84 07       	cpc	r24, r20
     e10:	38 f0       	brcs	.+14     	; 0xe20 <__divsf3_pse+0x26>
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	5f 4f       	sbci	r21, 0xFF	; 255
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	aa 1f       	adc	r26, r26
     e1e:	a9 f3       	breq	.-22     	; 0xe0a <__divsf3_pse+0x10>
     e20:	33 d0       	rcall	.+102    	; 0xe88 <__divsf3_pse+0x8e>
     e22:	0e 2e       	mov	r0, r30
     e24:	3a f0       	brmi	.+14     	; 0xe34 <__divsf3_pse+0x3a>
     e26:	e0 e8       	ldi	r30, 0x80	; 128
     e28:	30 d0       	rcall	.+96     	; 0xe8a <__divsf3_pse+0x90>
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	50 40       	sbci	r21, 0x00	; 0
     e2e:	e6 95       	lsr	r30
     e30:	00 1c       	adc	r0, r0
     e32:	ca f7       	brpl	.-14     	; 0xe26 <__divsf3_pse+0x2c>
     e34:	29 d0       	rcall	.+82     	; 0xe88 <__divsf3_pse+0x8e>
     e36:	fe 2f       	mov	r31, r30
     e38:	27 d0       	rcall	.+78     	; 0xe88 <__divsf3_pse+0x8e>
     e3a:	66 0f       	add	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	bb 1f       	adc	r27, r27
     e42:	26 17       	cp	r18, r22
     e44:	37 07       	cpc	r19, r23
     e46:	48 07       	cpc	r20, r24
     e48:	ab 07       	cpc	r26, r27
     e4a:	b0 e8       	ldi	r27, 0x80	; 128
     e4c:	09 f0       	breq	.+2      	; 0xe50 <__divsf3_pse+0x56>
     e4e:	bb 0b       	sbc	r27, r27
     e50:	80 2d       	mov	r24, r0
     e52:	bf 01       	movw	r22, r30
     e54:	ff 27       	eor	r31, r31
     e56:	93 58       	subi	r25, 0x83	; 131
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	2a f0       	brmi	.+10     	; 0xe66 <__divsf3_pse+0x6c>
     e5c:	9e 3f       	cpi	r25, 0xFE	; 254
     e5e:	51 05       	cpc	r21, r1
     e60:	68 f0       	brcs	.+26     	; 0xe7c <__divsf3_pse+0x82>
     e62:	50 c0       	rjmp	.+160    	; 0xf04 <__fp_inf>
     e64:	9a c0       	rjmp	.+308    	; 0xf9a <__fp_szero>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	ec f3       	brlt	.-6      	; 0xe64 <__divsf3_pse+0x6a>
     e6a:	98 3e       	cpi	r25, 0xE8	; 232
     e6c:	dc f3       	brlt	.-10     	; 0xe64 <__divsf3_pse+0x6a>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f7 95       	ror	r31
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <__divsf3_pse+0x74>
     e7c:	88 0f       	add	r24, r24
     e7e:	91 1d       	adc	r25, r1
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret
     e88:	e1 e0       	ldi	r30, 0x01	; 1
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	bb 1f       	adc	r27, r27
     e92:	62 17       	cp	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	ba 07       	cpc	r27, r26
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__divsf3_pse+0xaa>
     e9c:	62 1b       	sub	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	ee 1f       	adc	r30, r30
     ea6:	88 f7       	brcc	.-30     	; 0xe8a <__divsf3_pse+0x90>
     ea8:	e0 95       	com	r30
     eaa:	08 95       	ret

00000eac <__fixunssfsi>:
     eac:	5b d0       	rcall	.+182    	; 0xf64 <__fp_splitA>
     eae:	88 f0       	brcs	.+34     	; 0xed2 <__fixunssfsi+0x26>
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	90 f0       	brcs	.+36     	; 0xed8 <__fixunssfsi+0x2c>
     eb4:	b9 2f       	mov	r27, r25
     eb6:	99 27       	eor	r25, r25
     eb8:	b7 51       	subi	r27, 0x17	; 23
     eba:	a0 f0       	brcs	.+40     	; 0xee4 <__fixunssfsi+0x38>
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <__fixunssfsi+0x46>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	1a f0       	brmi	.+6      	; 0xece <__fixunssfsi+0x22>
     ec8:	ba 95       	dec	r27
     eca:	c9 f7       	brne	.-14     	; 0xebe <__fixunssfsi+0x12>
     ecc:	12 c0       	rjmp	.+36     	; 0xef2 <__fixunssfsi+0x46>
     ece:	b1 30       	cpi	r27, 0x01	; 1
     ed0:	81 f0       	breq	.+32     	; 0xef2 <__fixunssfsi+0x46>
     ed2:	62 d0       	rcall	.+196    	; 0xf98 <__fp_zero>
     ed4:	b1 e0       	ldi	r27, 0x01	; 1
     ed6:	08 95       	ret
     ed8:	5f c0       	rjmp	.+190    	; 0xf98 <__fp_zero>
     eda:	67 2f       	mov	r22, r23
     edc:	78 2f       	mov	r23, r24
     ede:	88 27       	eor	r24, r24
     ee0:	b8 5f       	subi	r27, 0xF8	; 248
     ee2:	39 f0       	breq	.+14     	; 0xef2 <__fixunssfsi+0x46>
     ee4:	b9 3f       	cpi	r27, 0xF9	; 249
     ee6:	cc f3       	brlt	.-14     	; 0xeda <__fixunssfsi+0x2e>
     ee8:	86 95       	lsr	r24
     eea:	77 95       	ror	r23
     eec:	67 95       	ror	r22
     eee:	b3 95       	inc	r27
     ef0:	d9 f7       	brne	.-10     	; 0xee8 <__fixunssfsi+0x3c>
     ef2:	3e f4       	brtc	.+14     	; 0xf02 <__fixunssfsi+0x56>
     ef4:	90 95       	com	r25
     ef6:	80 95       	com	r24
     ef8:	70 95       	com	r23
     efa:	61 95       	neg	r22
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	08 95       	ret

00000f04 <__fp_inf>:
     f04:	97 f9       	bld	r25, 7
     f06:	9f 67       	ori	r25, 0x7F	; 127
     f08:	80 e8       	ldi	r24, 0x80	; 128
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	08 95       	ret

00000f10 <__fp_nan>:
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	80 ec       	ldi	r24, 0xC0	; 192
     f14:	08 95       	ret

00000f16 <__fp_pscA>:
     f16:	00 24       	eor	r0, r0
     f18:	0a 94       	dec	r0
     f1a:	16 16       	cp	r1, r22
     f1c:	17 06       	cpc	r1, r23
     f1e:	18 06       	cpc	r1, r24
     f20:	09 06       	cpc	r0, r25
     f22:	08 95       	ret

00000f24 <__fp_pscB>:
     f24:	00 24       	eor	r0, r0
     f26:	0a 94       	dec	r0
     f28:	12 16       	cp	r1, r18
     f2a:	13 06       	cpc	r1, r19
     f2c:	14 06       	cpc	r1, r20
     f2e:	05 06       	cpc	r0, r21
     f30:	08 95       	ret

00000f32 <__fp_round>:
     f32:	09 2e       	mov	r0, r25
     f34:	03 94       	inc	r0
     f36:	00 0c       	add	r0, r0
     f38:	11 f4       	brne	.+4      	; 0xf3e <__fp_round+0xc>
     f3a:	88 23       	and	r24, r24
     f3c:	52 f0       	brmi	.+20     	; 0xf52 <__fp_round+0x20>
     f3e:	bb 0f       	add	r27, r27
     f40:	40 f4       	brcc	.+16     	; 0xf52 <__fp_round+0x20>
     f42:	bf 2b       	or	r27, r31
     f44:	11 f4       	brne	.+4      	; 0xf4a <__fp_round+0x18>
     f46:	60 ff       	sbrs	r22, 0
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <__fp_round+0x20>
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	08 95       	ret

00000f54 <__fp_split3>:
     f54:	57 fd       	sbrc	r21, 7
     f56:	90 58       	subi	r25, 0x80	; 128
     f58:	44 0f       	add	r20, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	59 f0       	breq	.+22     	; 0xf74 <__fp_splitA+0x10>
     f5e:	5f 3f       	cpi	r21, 0xFF	; 255
     f60:	71 f0       	breq	.+28     	; 0xf7e <__fp_splitA+0x1a>
     f62:	47 95       	ror	r20

00000f64 <__fp_splitA>:
     f64:	88 0f       	add	r24, r24
     f66:	97 fb       	bst	r25, 7
     f68:	99 1f       	adc	r25, r25
     f6a:	61 f0       	breq	.+24     	; 0xf84 <__fp_splitA+0x20>
     f6c:	9f 3f       	cpi	r25, 0xFF	; 255
     f6e:	79 f0       	breq	.+30     	; 0xf8e <__fp_splitA+0x2a>
     f70:	87 95       	ror	r24
     f72:	08 95       	ret
     f74:	12 16       	cp	r1, r18
     f76:	13 06       	cpc	r1, r19
     f78:	14 06       	cpc	r1, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	f2 cf       	rjmp	.-28     	; 0xf62 <__fp_split3+0xe>
     f7e:	46 95       	lsr	r20
     f80:	f1 df       	rcall	.-30     	; 0xf64 <__fp_splitA>
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <__fp_splitA+0x30>
     f84:	16 16       	cp	r1, r22
     f86:	17 06       	cpc	r1, r23
     f88:	18 06       	cpc	r1, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	f1 cf       	rjmp	.-30     	; 0xf70 <__fp_splitA+0xc>
     f8e:	86 95       	lsr	r24
     f90:	71 05       	cpc	r23, r1
     f92:	61 05       	cpc	r22, r1
     f94:	08 94       	sec
     f96:	08 95       	ret

00000f98 <__fp_zero>:
     f98:	e8 94       	clt

00000f9a <__fp_szero>:
     f9a:	bb 27       	eor	r27, r27
     f9c:	66 27       	eor	r22, r22
     f9e:	77 27       	eor	r23, r23
     fa0:	cb 01       	movw	r24, r22
     fa2:	97 f9       	bld	r25, 7
     fa4:	08 95       	ret

00000fa6 <__mulsf3>:
     fa6:	0b d0       	rcall	.+22     	; 0xfbe <__mulsf3x>
     fa8:	c4 cf       	rjmp	.-120    	; 0xf32 <__fp_round>
     faa:	b5 df       	rcall	.-150    	; 0xf16 <__fp_pscA>
     fac:	28 f0       	brcs	.+10     	; 0xfb8 <__mulsf3+0x12>
     fae:	ba df       	rcall	.-140    	; 0xf24 <__fp_pscB>
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <__mulsf3+0x12>
     fb2:	95 23       	and	r25, r21
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__mulsf3+0x12>
     fb6:	a6 cf       	rjmp	.-180    	; 0xf04 <__fp_inf>
     fb8:	ab cf       	rjmp	.-170    	; 0xf10 <__fp_nan>
     fba:	11 24       	eor	r1, r1
     fbc:	ee cf       	rjmp	.-36     	; 0xf9a <__fp_szero>

00000fbe <__mulsf3x>:
     fbe:	ca df       	rcall	.-108    	; 0xf54 <__fp_split3>
     fc0:	a0 f3       	brcs	.-24     	; 0xfaa <__mulsf3+0x4>

00000fc2 <__mulsf3_pse>:
     fc2:	95 9f       	mul	r25, r21
     fc4:	d1 f3       	breq	.-12     	; 0xfba <__mulsf3+0x14>
     fc6:	95 0f       	add	r25, r21
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	55 1f       	adc	r21, r21
     fcc:	62 9f       	mul	r22, r18
     fce:	f0 01       	movw	r30, r0
     fd0:	72 9f       	mul	r23, r18
     fd2:	bb 27       	eor	r27, r27
     fd4:	f0 0d       	add	r31, r0
     fd6:	b1 1d       	adc	r27, r1
     fd8:	63 9f       	mul	r22, r19
     fda:	aa 27       	eor	r26, r26
     fdc:	f0 0d       	add	r31, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	aa 1f       	adc	r26, r26
     fe2:	64 9f       	mul	r22, r20
     fe4:	66 27       	eor	r22, r22
     fe6:	b0 0d       	add	r27, r0
     fe8:	a1 1d       	adc	r26, r1
     fea:	66 1f       	adc	r22, r22
     fec:	82 9f       	mul	r24, r18
     fee:	22 27       	eor	r18, r18
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	62 1f       	adc	r22, r18
     ff6:	73 9f       	mul	r23, r19
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	62 1f       	adc	r22, r18
     ffe:	83 9f       	mul	r24, r19
    1000:	a0 0d       	add	r26, r0
    1002:	61 1d       	adc	r22, r1
    1004:	22 1f       	adc	r18, r18
    1006:	74 9f       	mul	r23, r20
    1008:	33 27       	eor	r19, r19
    100a:	a0 0d       	add	r26, r0
    100c:	61 1d       	adc	r22, r1
    100e:	23 1f       	adc	r18, r19
    1010:	84 9f       	mul	r24, r20
    1012:	60 0d       	add	r22, r0
    1014:	21 1d       	adc	r18, r1
    1016:	82 2f       	mov	r24, r18
    1018:	76 2f       	mov	r23, r22
    101a:	6a 2f       	mov	r22, r26
    101c:	11 24       	eor	r1, r1
    101e:	9f 57       	subi	r25, 0x7F	; 127
    1020:	50 40       	sbci	r21, 0x00	; 0
    1022:	8a f0       	brmi	.+34     	; 0x1046 <__mulsf3_pse+0x84>
    1024:	e1 f0       	breq	.+56     	; 0x105e <__mulsf3_pse+0x9c>
    1026:	88 23       	and	r24, r24
    1028:	4a f0       	brmi	.+18     	; 0x103c <__mulsf3_pse+0x7a>
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	bb 1f       	adc	r27, r27
    1030:	66 1f       	adc	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	91 50       	subi	r25, 0x01	; 1
    1038:	50 40       	sbci	r21, 0x00	; 0
    103a:	a9 f7       	brne	.-22     	; 0x1026 <__mulsf3_pse+0x64>
    103c:	9e 3f       	cpi	r25, 0xFE	; 254
    103e:	51 05       	cpc	r21, r1
    1040:	70 f0       	brcs	.+28     	; 0x105e <__mulsf3_pse+0x9c>
    1042:	60 cf       	rjmp	.-320    	; 0xf04 <__fp_inf>
    1044:	aa cf       	rjmp	.-172    	; 0xf9a <__fp_szero>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	ec f3       	brlt	.-6      	; 0x1044 <__mulsf3_pse+0x82>
    104a:	98 3e       	cpi	r25, 0xE8	; 232
    104c:	dc f3       	brlt	.-10     	; 0x1044 <__mulsf3_pse+0x82>
    104e:	86 95       	lsr	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f7 95       	ror	r31
    1058:	e7 95       	ror	r30
    105a:	9f 5f       	subi	r25, 0xFF	; 255
    105c:	c1 f7       	brne	.-16     	; 0x104e <__mulsf3_pse+0x8c>
    105e:	fe 2b       	or	r31, r30
    1060:	88 0f       	add	r24, r24
    1062:	91 1d       	adc	r25, r1
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	97 f9       	bld	r25, 7
    106a:	08 95       	ret

0000106c <__udivmodsi4>:
    106c:	a1 e2       	ldi	r26, 0x21	; 33
    106e:	1a 2e       	mov	r1, r26
    1070:	aa 1b       	sub	r26, r26
    1072:	bb 1b       	sub	r27, r27
    1074:	fd 01       	movw	r30, r26
    1076:	0d c0       	rjmp	.+26     	; 0x1092 <__udivmodsi4_ep>

00001078 <__udivmodsi4_loop>:
    1078:	aa 1f       	adc	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	ee 1f       	adc	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	a2 17       	cp	r26, r18
    1082:	b3 07       	cpc	r27, r19
    1084:	e4 07       	cpc	r30, r20
    1086:	f5 07       	cpc	r31, r21
    1088:	20 f0       	brcs	.+8      	; 0x1092 <__udivmodsi4_ep>
    108a:	a2 1b       	sub	r26, r18
    108c:	b3 0b       	sbc	r27, r19
    108e:	e4 0b       	sbc	r30, r20
    1090:	f5 0b       	sbc	r31, r21

00001092 <__udivmodsi4_ep>:
    1092:	66 1f       	adc	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	1a 94       	dec	r1
    109c:	69 f7       	brne	.-38     	; 0x1078 <__udivmodsi4_loop>
    109e:	60 95       	com	r22
    10a0:	70 95       	com	r23
    10a2:	80 95       	com	r24
    10a4:	90 95       	com	r25
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	bd 01       	movw	r22, r26
    10ac:	cf 01       	movw	r24, r30
    10ae:	08 95       	ret

000010b0 <__umulhisi3>:
    10b0:	a2 9f       	mul	r26, r18
    10b2:	b0 01       	movw	r22, r0
    10b4:	b3 9f       	mul	r27, r19
    10b6:	c0 01       	movw	r24, r0
    10b8:	a3 9f       	mul	r26, r19
    10ba:	70 0d       	add	r23, r0
    10bc:	81 1d       	adc	r24, r1
    10be:	11 24       	eor	r1, r1
    10c0:	91 1d       	adc	r25, r1
    10c2:	b2 9f       	mul	r27, r18
    10c4:	70 0d       	add	r23, r0
    10c6:	81 1d       	adc	r24, r1
    10c8:	11 24       	eor	r1, r1
    10ca:	91 1d       	adc	r25, r1
    10cc:	08 95       	ret

000010ce <__muluhisi3>:
    10ce:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__umulhisi3>
    10d2:	a5 9f       	mul	r26, r21
    10d4:	90 0d       	add	r25, r0
    10d6:	b4 9f       	mul	r27, r20
    10d8:	90 0d       	add	r25, r0
    10da:	a4 9f       	mul	r26, r20
    10dc:	80 0d       	add	r24, r0
    10de:	91 1d       	adc	r25, r1
    10e0:	11 24       	eor	r1, r1
    10e2:	08 95       	ret

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
