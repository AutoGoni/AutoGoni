
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00001542  000015d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000478  0080023e  0080023e  00001714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001748  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f0c  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092a  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00004900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e9  00000000  00000000  00004d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001622  00000000  00000000  00005535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00006b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <SerTxISR>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 33       	cpi	r26, 0x3E	; 62
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ae e3       	ldi	r26, 0x3E	; 62
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 91 03 	call	0x722	; 0x722 <main>
      9e:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:

OSStartHighRdy: 
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
      a6:	00 91 7c 05 	lds	r16, 0x057C
                inc     R16                         ;
      aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
      ac:	00 93 7c 05 	sts	0x057C, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
      b0:	e0 91 91 05 	lds	r30, 0x0591
                lds     R31,OSTCBHighRdy+1          ; ready to run
      b4:	f0 91 92 05 	lds	r31, 0x0592

                ld      R28,Z+                      ; Load stack L pointer
      b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
      ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
      bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
      be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
      c0:	0f 91       	pop	r16
      c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	bf 91       	pop	r27
      ce:	af 91       	pop	r26
      d0:	9f 91       	pop	r25
      d2:	8f 91       	pop	r24
      d4:	7f 91       	pop	r23
      d6:	6f 91       	pop	r22
      d8:	5f 91       	pop	r21
      da:	4f 91       	pop	r20
      dc:	3f 91       	pop	r19
      de:	2f 91       	pop	r18
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	df 90       	pop	r13
      ea:	cf 90       	pop	r12
      ec:	bf 90       	pop	r11
      ee:	af 90       	pop	r10
      f0:	9f 90       	pop	r9
      f2:	8f 90       	pop	r8
      f4:	7f 90       	pop	r7
      f6:	6f 90       	pop	r6
      f8:	5f 90       	pop	r5
      fa:	4f 90       	pop	r4
      fc:	3f 90       	pop	r3
      fe:	2f 90       	pop	r2
     100:	1f 90       	pop	r1
     102:	0f 90       	pop	r0
                ret                                 ; Start task
     104:	08 95       	ret

00000106 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     106:	0f 92       	push	r0
     108:	1f 92       	push	r1
     10a:	2f 92       	push	r2
     10c:	3f 92       	push	r3
     10e:	4f 92       	push	r4
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     146:	0f b7       	in	r16, 0x3f	; 63
     148:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     14a:	e0 91 9f 05 	lds	r30, 0x059F
                lds     R31,OSTCBCur+1              ;
     14e:	f0 91 a0 05 	lds	r31, 0x05A0

                in      r28,_SFR_IO_ADDR(SPL)
     152:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     154:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     156:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     158:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     15a:	00 91 81 05 	lds	r16, 0x0581
                sts     OSPrioCur,R16
     15e:	00 93 82 05 	sts	0x0582, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     162:	e0 91 91 05 	lds	r30, 0x0591
                lds     R31,OSTCBHighRdy+1          ; ready to run
     166:	f0 91 92 05 	lds	r31, 0x0592
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     16a:	e0 93 9f 05 	sts	0x059F, r30
                sts     OSTCBCur+1,R31              ;
     16e:	f0 93 a0 05 	sts	0x05A0, r31

                ld      R28,Z+                      ; Restore Y pointer
     172:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     174:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     176:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     178:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     17a:	0f 91       	pop	r16
     17c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     17e:	ff 91       	pop	r31
     180:	ef 91       	pop	r30
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	bf 91       	pop	r27
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	5f 90       	pop	r5
     1b4:	4f 90       	pop	r4
     1b6:	3f 90       	pop	r3
     1b8:	2f 90       	pop	r2
     1ba:	1f 90       	pop	r1
     1bc:	0f 90       	pop	r0
                ret
     1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     1c0:	00 91 81 05 	lds	r16, 0x0581
                sts     OSPrioCur,R16               ;
     1c4:	00 93 82 05 	sts	0x0582, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     1c8:	e0 91 91 05 	lds	r30, 0x0591
                lds     R31,OSTCBHighRdy+1          ;
     1cc:	f0 91 92 05 	lds	r31, 0x0592
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     1d0:	e0 93 9f 05 	sts	0x059F, r30
                sts     OSTCBCur+1,R31              ;
     1d4:	f0 93 a0 05 	sts	0x05A0, r31

                ld      R28,Z+                      ; Restore Y pointer
     1d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     1e0:	0f 91       	pop	r16
     1e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	ff 90       	pop	r15
     206:	ef 90       	pop	r14
     208:	df 90       	pop	r13
     20a:	cf 90       	pop	r12
     20c:	bf 90       	pop	r11
     20e:	af 90       	pop	r10
     210:	9f 90       	pop	r9
     212:	8f 90       	pop	r8
     214:	7f 90       	pop	r7
     216:	6f 90       	pop	r6
     218:	5f 90       	pop	r5
     21a:	4f 90       	pop	r4
     21c:	3f 90       	pop	r3
     21e:	2f 90       	pop	r2
     220:	1f 90       	pop	r1
     222:	0f 90       	pop	r0
                ret
     224:	08 95       	ret

00000226 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     226:	0f 92       	push	r0
     228:	1f 92       	push	r1
     22a:	2f 92       	push	r2
     22c:	3f 92       	push	r3
     22e:	4f 92       	push	r4
     230:	5f 92       	push	r5
     232:	6f 92       	push	r6
     234:	7f 92       	push	r7
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     266:	0f b7       	in	r16, 0x3f	; 63
     268:	00 68       	ori	r16, 0x80	; 128
     26a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     26c:	00 91 9e 05 	lds	r16, 0x059E
                inc     R16                         ;
     270:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     272:	00 93 9e 05 	sts	0x059E, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     276:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     27a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     27c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     27e:	e0 91 9f 05 	lds	r30, 0x059F
                lds     R31,OSTCBCur+1              ;
     282:	f0 91 a0 05 	lds	r31, 0x05A0
                st      Z+,R28                      ; Save Y pointer
     286:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
     28a:	0d ee       	ldi	r16, 0xED	; 237
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     28c:	06 bd       	out	0x26, r16	; 38
	
                sei                                 ; Enable interrupts
     28e:	78 94       	sei
                
                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     290:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OSTimeTick>
                nop
     294:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     296:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <OSIntExit>

                POPSREG
     29a:	0f 91       	pop	r16
     29c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	bf 91       	pop	r27
     2a8:	af 91       	pop	r26
     2aa:	9f 91       	pop	r25
     2ac:	8f 91       	pop	r24
     2ae:	7f 91       	pop	r23
     2b0:	6f 91       	pop	r22
     2b2:	5f 91       	pop	r21
     2b4:	4f 91       	pop	r20
     2b6:	3f 91       	pop	r19
     2b8:	2f 91       	pop	r18
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	bf 90       	pop	r11
     2c8:	af 90       	pop	r10
     2ca:	9f 90       	pop	r9
     2cc:	8f 90       	pop	r8
     2ce:	7f 90       	pop	r7
     2d0:	6f 90       	pop	r6
     2d2:	5f 90       	pop	r5
     2d4:	4f 90       	pop	r4
     2d6:	3f 90       	pop	r3
     2d8:	2f 90       	pop	r2
     2da:	1f 90       	pop	r1
     2dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     2de:	08 95       	ret

000002e0 <WatchDogReset>:



.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     2e0:	a8 95       	wdr
				ret
     2e2:	08 95       	ret

000002e4 <SerTxISR>:

.global USART_TX_vect							   ; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:      
.extern PostTxCompleteSem
			   ret
     2e4:	08 95       	ret

000002e6 <TaskStart>:
	char *threeDollarSign = "$$$";
	char *baudString = "U,38400,N";
	char *sys_on_str = "\r\nuCOS ON\r\n---\r\n";			//helps see when the system turns on
	pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     2e6:	0e 94 0b 08 	call	0x1016	; 0x1016 <OSStatInit>
	
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     2ea:	2b e0       	ldi	r18, 0x0B	; 11
     2ec:	48 e7       	ldi	r20, 0x78	; 120
     2ee:	54 e0       	ldi	r21, 0x04	; 4
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	8d e2       	ldi	r24, 0x2D	; 45
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     2fc:	2a e0       	ldi	r18, 0x0A	; 10
     2fe:	4a e3       	ldi	r20, 0x3A	; 58
     300:	55 e0       	ldi	r21, 0x05	; 5
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	8f e9       	ldi	r24, 0x9F	; 159
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     30e:	2f e0       	ldi	r18, 0x0F	; 15
     310:	46 eb       	ldi	r20, 0xB6	; 182
     312:	53 e0       	ldi	r21, 0x03	; 3
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	86 ec       	ldi	r24, 0xC6	; 198
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     320:	24 e1       	ldi	r18, 0x14	; 20
     322:	4a ef       	ldi	r20, 0xFA	; 250
     324:	54 e0       	ldi	r21, 0x04	; 4
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	88 e3       	ldi	r24, 0x38	; 56
     32c:	93 e0       	ldi	r25, 0x03	; 3
     32e:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
	
	OSMboxPost(SerialTxMBox, (void *)threeDollarSign); //enter command mode
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	80 91 f7 03 	lds	r24, 0x03F7
     33a:	90 91 f8 03 	lds	r25, 0x03F8
     33e:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     342:	80 e9       	ldi	r24, 0x90	; 144
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)baudString); //set baud to 38400
     34a:	64 e0       	ldi	r22, 0x04	; 4
     34c:	71 e0       	ldi	r23, 0x01	; 1
     34e:	80 91 f7 03 	lds	r24, 0x03F7
     352:	90 91 f8 03 	lds	r25, 0x03F8
     356:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     35a:	80 e9       	ldi	r24, 0x90	; 144
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     362:	6e e0       	ldi	r22, 0x0E	; 14
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	80 91 f7 03 	lds	r24, 0x03F7
     36a:	90 91 f8 03 	lds	r25, 0x03F8
     36e:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     372:	10 92 85 05 	sts	0x0585, r1
     376:	10 92 86 05 	sts	0x0586, r1
     37a:	10 92 87 05 	sts	0x0587, r1
     37e:	10 92 88 05 	sts	0x0588, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     382:	88 ec       	ldi	r24, 0xC8	; 200
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
     38a:	f3 cf       	rjmp	.-26     	; 0x372 <TaskStart+0x8c>

0000038c <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	68 97       	sbiw	r28, 0x18	; 24
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
		CommRxBuff[digitCounter] = '\r';
		CommRxBuff[digitCounter + 1] = '\n';
		
		while (digitCounter >= 0)
		{
			CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     3a0:	0f 2e       	mov	r0, r31
     3a2:	fa e0       	ldi	r31, 0x0A	; 10
     3a4:	ef 2e       	mov	r14, r31
     3a6:	f1 2c       	mov	r15, r1
     3a8:	f0 2d       	mov	r31, r0
		tempInt = rotaryInput;	// reset input

		// Decimal 48 -> ASCII '0'
		// Decimal 57 -> ASCII '9'
		
		CommRxBuff[digitCounter] = '\r';
     3aa:	0f 2e       	mov	r0, r31
     3ac:	fd e0       	ldi	r31, 0x0D	; 13
     3ae:	af 2e       	mov	r10, r31
     3b0:	f0 2d       	mov	r31, r0
		CommRxBuff[digitCounter + 1] = '\n';
     3b2:	0f 2e       	mov	r0, r31
     3b4:	fa e0       	ldi	r31, 0x0A	; 10
     3b6:	bf 2e       	mov	r11, r31
     3b8:	f0 2d       	mov	r31, r0
		//}
		
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		
		tempInt = rotaryInput;
		digitCounter = 0;
     3ba:	c1 2c       	mov	r12, r1
     3bc:	d1 2c       	mov	r13, r1
		//{
			//strcpy(TextMessage, "pin 14 is low\r\n");
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     3be:	86 b1       	in	r24, 0x06	; 6
     3c0:	e9 b1       	in	r30, 0x09	; 9
     3c2:	e0 7f       	andi	r30, 0xF0	; 240
     3c4:	8f 70       	andi	r24, 0x0F	; 15
     3c6:	e8 2b       	or	r30, r24
		
		tempInt = rotaryInput;
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
		digitCounter = 0;
		
		while(tempInt != 0)
     3ca:	30 97       	sbiw	r30, 0x00	; 0
     3cc:	d9 f1       	breq	.+118    	; 0x444 <AngleOutputTask+0xb8>
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		
		tempInt = rotaryInput;
     3ce:	cf 01       	movw	r24, r30
		digitCounter = 0;
     3d0:	0c 2d       	mov	r16, r12
     3d2:	1d 2d       	mov	r17, r13
		
		while(tempInt != 0)
		{
			digitCounter++;
     3d4:	98 01       	movw	r18, r16
     3d6:	2f 5f       	subi	r18, 0xFF	; 255
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
			tempInt = tempInt / 10;
     3da:	b7 01       	movw	r22, r14
     3dc:	0e 94 34 0a 	call	0x1468	; 0x1468 <__divmodhi4>
     3e0:	cb 01       	movw	r24, r22
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		
		tempInt = rotaryInput;
		digitCounter = 0;
		
		while(tempInt != 0)
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	11 f0       	breq	.+4      	; 0x3ea <AngleOutputTask+0x5e>
		{
			digitCounter++;
     3e6:	89 01       	movw	r16, r18
     3e8:	f5 cf       	rjmp	.-22     	; 0x3d4 <AngleOutputTask+0x48>
		tempInt = rotaryInput;	// reset input

		// Decimal 48 -> ASCII '0'
		// Decimal 57 -> ASCII '9'
		
		CommRxBuff[digitCounter] = '\r';
     3ea:	a1 e0       	ldi	r26, 0x01	; 1
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	ac 0f       	add	r26, r28
     3f0:	bd 1f       	adc	r27, r29
     3f2:	a2 0f       	add	r26, r18
     3f4:	b3 1f       	adc	r27, r19
     3f6:	ac 92       	st	X, r10
		CommRxBuff[digitCounter + 1] = '\n';
     3f8:	a3 e0       	ldi	r26, 0x03	; 3
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	ac 0f       	add	r26, r28
     3fe:	bd 1f       	adc	r27, r29
     400:	a0 0f       	add	r26, r16
     402:	b1 1f       	adc	r27, r17
     404:	bc 92       	st	X, r11
		
		while (digitCounter >= 0)
     406:	33 23       	and	r19, r19
     408:	0c f5       	brge	.+66     	; 0x44c <AngleOutputTask+0xc0>
     40a:	0e c0       	rjmp	.+28     	; 0x428 <AngleOutputTask+0x9c>
		{
			CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	31 09       	sbc	r19, r1
     410:	cf 01       	movw	r24, r30
     412:	b7 01       	movw	r22, r14
     414:	0e 94 34 0a 	call	0x1468	; 0x1468 <__divmodhi4>
     418:	80 5d       	subi	r24, 0xD0	; 208
     41a:	f8 01       	movw	r30, r16
     41c:	82 93       	st	-Z, r24
     41e:	8f 01       	movw	r16, r30
			digitCounter--;
			tempInt = tempInt / 10;
     420:	e6 2f       	mov	r30, r22
     422:	f7 2f       	mov	r31, r23
		// Decimal 57 -> ASCII '9'
		
		CommRxBuff[digitCounter] = '\r';
		CommRxBuff[digitCounter + 1] = '\n';
		
		while (digitCounter >= 0)
     424:	33 23       	and	r19, r19
     426:	94 f7       	brge	.-28     	; 0x40c <AngleOutputTask+0x80>
		}
		// END Turn number value into serial ^
		
		if(CommRxBuff)
		{
			OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
     428:	be 01       	movw	r22, r28
     42a:	6f 5f       	subi	r22, 0xFF	; 255
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	80 91 f7 03 	lds	r24, 0x03F7
     432:	90 91 f8 03 	lds	r25, 0x03F8
     436:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
		}
		
//		rotaryInput = (PINC & 0b00001111) | (PIND & 0b11110000);

					
		OSTimeDly(OS_TICKS_PER_SEC);	// relinquish CPU
     43a:	88 ec       	ldi	r24, 0xC8	; 200
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
    }	
     442:	bd cf       	rjmp	.-134    	; 0x3be <AngleOutputTask+0x32>
		tempInt = rotaryInput;	// reset input

		// Decimal 48 -> ASCII '0'
		// Decimal 57 -> ASCII '9'
		
		CommRxBuff[digitCounter] = '\r';
     444:	a9 82       	std	Y+1, r10	; 0x01
		CommRxBuff[digitCounter + 1] = '\n';
     446:	ba 82       	std	Y+2, r11	; 0x02
		//}
		
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		
		tempInt = rotaryInput;
		digitCounter = 0;
     448:	2c 2d       	mov	r18, r12
     44a:	3d 2d       	mov	r19, r13
     44c:	01 e0       	ldi	r16, 0x01	; 1
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	0c 0f       	add	r16, r28
     452:	1d 1f       	adc	r17, r29
     454:	02 0f       	add	r16, r18
     456:	13 1f       	adc	r17, r19
     458:	d9 cf       	rjmp	.-78     	; 0x40c <AngleOutputTask+0x80>

0000045a <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	69 97       	sbiw	r28, 0x19	; 25
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
     46e:	68 94       	set
     470:	ee 24       	eor	r14, r14
     472:	e1 f8       	bld	r14, 1
		OSMboxPost(LedMBox, (void *)&tmp);
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "[Hi]\n\r");
     474:	17 e0       	ldi	r17, 0x07	; 7
		OSMboxPost(SerialTxMBox, (void *)TextMessage);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
     476:	ff 24       	eor	r15, r15
     478:	f3 94       	inc	r15
		OSMboxPost(LedMBox, (void *)&tmp);	
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "[Med]\n\r");
     47a:	08 e0       	ldi	r16, 0x08	; 8
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
     47c:	80 ed       	ldi	r24, 0xD0	; 208
     47e:	97 e0       	ldi	r25, 0x07	; 7
     480:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
     484:	e9 82       	std	Y+1, r14	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     486:	be 01       	movw	r22, r28
     488:	6f 5f       	subi	r22, 0xFF	; 255
     48a:	7f 4f       	sbci	r23, 0xFF	; 255
     48c:	80 91 73 03 	lds	r24, 0x0373
     490:	90 91 74 03 	lds	r25, 0x0374
     494:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "[Hi]\n\r");
     498:	ef e1       	ldi	r30, 0x1F	; 31
     49a:	f1 e0       	ldi	r31, 0x01	; 1
     49c:	de 01       	movw	r26, r28
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	81 2f       	mov	r24, r17
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <TimerTask+0x48>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     4aa:	be 01       	movw	r22, r28
     4ac:	6e 5f       	subi	r22, 0xFE	; 254
     4ae:	7f 4f       	sbci	r23, 0xFF	; 255
     4b0:	80 91 f7 03 	lds	r24, 0x03F7
     4b4:	90 91 f8 03 	lds	r25, 0x03F8
     4b8:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
     4bc:	80 ed       	ldi	r24, 0xD0	; 208
     4be:	97 e0       	ldi	r25, 0x07	; 7
     4c0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
     4c4:	f9 82       	std	Y+1, r15	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
     4c6:	be 01       	movw	r22, r28
     4c8:	6f 5f       	subi	r22, 0xFF	; 255
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	80 91 73 03 	lds	r24, 0x0373
     4d0:	90 91 74 03 	lds	r25, 0x0374
     4d4:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "[Med]\n\r");
     4d8:	e6 e2       	ldi	r30, 0x26	; 38
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	de 01       	movw	r26, r28
     4de:	12 96       	adiw	r26, 0x02	; 2
     4e0:	80 2f       	mov	r24, r16
     4e2:	01 90       	ld	r0, Z+
     4e4:	0d 92       	st	X+, r0
     4e6:	8a 95       	dec	r24
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <TimerTask+0x88>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     4ea:	be 01       	movw	r22, r28
     4ec:	6e 5f       	subi	r22, 0xFE	; 254
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	80 91 f7 03 	lds	r24, 0x03F7
     4f4:	90 91 f8 03 	lds	r25, 0x03F8
     4f8:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
     4fc:	80 ed       	ldi	r24, 0xD0	; 208
     4fe:	97 e0       	ldi	r25, 0x07	; 7
     500:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
     504:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     506:	be 01       	movw	r22, r28
     508:	6f 5f       	subi	r22, 0xFF	; 255
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	80 91 73 03 	lds	r24, 0x0373
     510:	90 91 74 03 	lds	r25, 0x0374
     514:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
		//strcpy(TextMessage, "NO ERR STATE\n\r");
		strcpy(TextMessage, "[No]\n\r");
     518:	ee e2       	ldi	r30, 0x2E	; 46
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	de 01       	movw	r26, r28
     51e:	12 96       	adiw	r26, 0x02	; 2
     520:	81 2f       	mov	r24, r17
     522:	01 90       	ld	r0, Z+
     524:	0d 92       	st	X+, r0
     526:	8a 95       	dec	r24
     528:	e1 f7       	brne	.-8      	; 0x522 <TimerTask+0xc8>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     52a:	be 01       	movw	r22, r28
     52c:	6e 5f       	subi	r22, 0xFE	; 254
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 91 f7 03 	lds	r24, 0x03F7
     534:	90 91 f8 03 	lds	r25, 0x03F8
     538:	0e 94 76 06 	call	0xcec	; 0xcec <OSMboxPost>
     53c:	9f cf       	rjmp	.-194    	; 0x47c <TimerTask+0x22>

0000053e <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     53e:	0d ec       	ldi	r16, 0xCD	; 205
     540:	1c ec       	ldi	r17, 0xCC	; 204
     542:	dc ec       	ldi	r29, 0xCC	; 204
     544:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     546:	81 2c       	mov	r8, r1
     548:	91 2c       	mov	r9, r1
     54a:	68 94       	set
     54c:	aa 24       	eor	r10, r10
     54e:	a7 f8       	bld	r10, 7
     550:	0f 2e       	mov	r0, r31
     552:	ff e3       	ldi	r31, 0x3F	; 63
     554:	bf 2e       	mov	r11, r31
     556:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     558:	41 2c       	mov	r4, r1
     55a:	51 2c       	mov	r5, r1
     55c:	61 2c       	mov	r6, r1
     55e:	0f 2e       	mov	r0, r31
     560:	ff e3       	ldi	r31, 0x3F	; 63
     562:	7f 2e       	mov	r7, r31
     564:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     566:	0f 2e       	mov	r0, r31
     568:	fd ec       	ldi	r31, 0xCD	; 205
     56a:	2f 2e       	mov	r2, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	0f 2e       	mov	r0, r31
     570:	fc ec       	ldi	r31, 0xCC	; 204
     572:	3f 2e       	mov	r3, r31
     574:	f0 2d       	mov	r31, r0
     576:	0d c0       	rjmp	.+26     	; 0x592 <LedTask+0x54>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     578:	0d ec       	ldi	r16, 0xCD	; 205
     57a:	1c ec       	ldi	r17, 0xCC	; 204
     57c:	dc ec       	ldi	r29, 0xCC	; 204
     57e:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     580:	81 2c       	mov	r8, r1
     582:	91 2c       	mov	r9, r1
     584:	68 94       	set
     586:	aa 24       	eor	r10, r10
     588:	a7 f8       	bld	r10, 7
     58a:	0f 2e       	mov	r0, r31
     58c:	ff e3       	ldi	r31, 0x3F	; 63
     58e:	bf 2e       	mov	r11, r31
     590:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     592:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     594:	28 2d       	mov	r18, r8
     596:	39 2d       	mov	r19, r9
     598:	4a 2d       	mov	r20, r10
     59a:	5b 2d       	mov	r21, r11
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	9f e3       	ldi	r25, 0x3F	; 63
     5a4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divsf3>
     5a8:	6b 01       	movw	r12, r22
     5aa:	7c 01       	movw	r14, r24
     5ac:	20 2f       	mov	r18, r16
     5ae:	31 2f       	mov	r19, r17
     5b0:	4d 2f       	mov	r20, r29
     5b2:	5c 2f       	mov	r21, r28
     5b4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	48 e4       	ldi	r20, 0x48	; 72
     5be:	53 e4       	ldi	r21, 0x43	; 67
     5c0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3>
     5c4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fixunssfsi>
     5c8:	cb 01       	movw	r24, r22
     5ca:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     5ce:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     5d0:	20 2f       	mov	r18, r16
     5d2:	31 2f       	mov	r19, r17
     5d4:	4d 2f       	mov	r20, r29
     5d6:	5c 2f       	mov	r21, r28
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e8       	ldi	r24, 0x80	; 128
     5de:	9f e3       	ldi	r25, 0x3F	; 63
     5e0:	0e 94 87 08 	call	0x110e	; 0x110e <__subsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	48 e4       	ldi	r20, 0x48	; 72
     5f6:	53 e4       	ldi	r21, 0x43	; 67
     5f8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3>
     5fc:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fixunssfsi>
     600:	cb 01       	movw	r24, r22
     602:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     606:	80 91 73 03 	lds	r24, 0x0373
     60a:	90 91 74 03 	lds	r25, 0x0374
     60e:	0e 94 45 06 	call	0xc8a	; 0xc8a <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	09 f4       	brne	.+2      	; 0x618 <LedTask+0xda>
     616:	bd cf       	rjmp	.-134    	; 0x592 <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	c9 f0       	breq	.+50     	; 0x652 <LedTask+0x114>
     620:	08 f4       	brcc	.+2      	; 0x624 <LedTask+0xe6>
     622:	aa cf       	rjmp	.-172    	; 0x578 <LedTask+0x3a>
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	09 f0       	breq	.+2      	; 0x62a <LedTask+0xec>
     628:	b4 cf       	rjmp	.-152    	; 0x592 <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     62a:	04 2d       	mov	r16, r4
     62c:	15 2d       	mov	r17, r5
     62e:	d6 2d       	mov	r29, r6
     630:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     632:	0f 2e       	mov	r0, r31
     634:	fa e9       	ldi	r31, 0x9A	; 154
     636:	8f 2e       	mov	r8, r31
     638:	f0 2d       	mov	r31, r0
     63a:	0f 2e       	mov	r0, r31
     63c:	f9 e9       	ldi	r31, 0x99	; 153
     63e:	9f 2e       	mov	r9, r31
     640:	f0 2d       	mov	r31, r0
     642:	0f 2e       	mov	r0, r31
     644:	f9 e1       	ldi	r31, 0x19	; 25
     646:	af 2e       	mov	r10, r31
     648:	f0 2d       	mov	r31, r0
     64a:	68 94       	set
     64c:	bb 24       	eor	r11, r11
     64e:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     650:	a0 cf       	rjmp	.-192    	; 0x592 <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     652:	04 2d       	mov	r16, r4
     654:	15 2d       	mov	r17, r5
     656:	d6 2d       	mov	r29, r6
     658:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     65a:	82 2c       	mov	r8, r2
     65c:	93 2c       	mov	r9, r3
     65e:	0f 2e       	mov	r0, r31
     660:	fc ec       	ldi	r31, 0xCC	; 204
     662:	af 2e       	mov	r10, r31
     664:	f0 2d       	mov	r31, r0
     666:	0f 2e       	mov	r0, r31
     668:	fe e3       	ldi	r31, 0x3E	; 62
     66a:	bf 2e       	mov	r11, r31
     66c:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     66e:	91 cf       	rjmp	.-222    	; 0x592 <LedTask+0x54>

00000670 <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	69 97       	sbiw	r28, 0x19	; 25
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     684:	0f 2e       	mov	r0, r31
     686:	f1 ec       	ldi	r31, 0xC1	; 193
     688:	cf 2e       	mov	r12, r31
     68a:	d1 2c       	mov	r13, r1
     68c:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     68e:	81 2c       	mov	r8, r1
     690:	91 2c       	mov	r9, r1
     692:	a1 2c       	mov	r10, r1
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     694:	0f 2e       	mov	r0, r31
     696:	f6 ec       	ldi	r31, 0xC6	; 198
     698:	ef 2e       	mov	r14, r31
     69a:	f1 2c       	mov	r15, r1
     69c:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
     69e:	88 ec       	ldi	r24, 0xC8	; 200
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     6a6:	80 91 f7 03 	lds	r24, 0x03F7
     6aa:	90 91 f8 03 	lds	r25, 0x03F8
     6ae:	0e 94 45 06 	call	0xc8a	; 0xc8a <OSMboxAccept>
		
		if(msg != NULL){
     6b2:	00 97       	sbiw	r24, 0x00	; 0
     6b4:	89 f1       	breq	.+98     	; 0x718 <SerialTransmitTask+0xa8>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	02 96       	adiw	r24, 0x02	; 2
     6bc:	0e 94 98 0a 	call	0x1530	; 0x1530 <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     6c0:	f6 01       	movw	r30, r12
     6c2:	80 81       	ld	r24, Z
     6c4:	86 60       	ori	r24, 0x06	; 6
     6c6:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	88 23       	and	r24, r24
     6cc:	29 f1       	breq	.+74     	; 0x718 <SerialTransmitTask+0xa8>
     6ce:	08 2d       	mov	r16, r8
     6d0:	19 2d       	mov	r17, r9
     6d2:	ba 2c       	mov	r11, r10
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     6d4:	ae 01       	movw	r20, r28
     6d6:	4f 5f       	subi	r20, 0xFF	; 255
     6d8:	5f 4f       	sbci	r21, 0xFF	; 255
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 91 79 04 	lds	r24, 0x0479
     6e2:	90 91 7a 04 	lds	r25, 0x047A
     6e6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     6ea:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     6ec:	e2 e0       	ldi	r30, 0x02	; 2
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ec 0f       	add	r30, r28
     6f2:	fd 1f       	adc	r31, r29
     6f4:	e0 0f       	add	r30, r16
     6f6:	f1 1f       	adc	r31, r17
     6f8:	80 81       	ld	r24, Z
     6fa:	f7 01       	movw	r30, r14
     6fc:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     6fe:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     700:	b3 94       	inc	r11
     702:	0b 2d       	mov	r16, r11
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	e2 e0       	ldi	r30, 0x02	; 2
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ec 0f       	add	r30, r28
     70c:	fd 1f       	adc	r31, r29
     70e:	e0 0f       	add	r30, r16
     710:	f1 1f       	adc	r31, r17
     712:	80 81       	ld	r24, Z
     714:	81 11       	cpse	r24, r1
     716:	de cf       	rjmp	.-68     	; 0x6d4 <SerialTransmitTask+0x64>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     718:	f6 01       	movw	r30, r12
     71a:	80 81       	ld	r24, Z
     71c:	89 7f       	andi	r24, 0xF9	; 249
     71e:	80 83       	st	Z, r24
	}
     720:	be cf       	rjmp	.-132    	; 0x69e <SerialTransmitTask+0x2e>

00000722 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     722:	0e 94 bb 03 	call	0x776	; 0x776 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     726:	0e 94 6a 07 	call	0xed4	; 0xed4 <OSInit>
	
	USART_Init();
     72a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 59 06 	call	0xcb2	; 0xcb2 <OSMboxCreate>
     736:	90 93 74 03 	sts	0x0374, r25
     73a:	80 93 73 03 	sts	0x0373, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 59 06 	call	0xcb2	; 0xcb2 <OSMboxCreate>
     746:	90 93 f8 03 	sts	0x03F8, r25
     74a:	80 93 f7 03 	sts	0x03F7, r24
	SerialTxSem = OSSemCreate(1);
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 98 06 	call	0xd30	; 0xd30 <OSSemCreate>
     756:	90 93 7a 04 	sts	0x047A, r25
     75a:	80 93 79 04 	sts	0x0479, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	4a e7       	ldi	r20, 0x7A	; 122
     762:	55 e0       	ldi	r21, 0x05	; 5
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	83 e7       	ldi	r24, 0x73	; 115
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     770:	0e 94 74 05 	call	0xae8	; 0xae8 <OSStart>
     774:	ff cf       	rjmp	.-2      	; 0x774 <main+0x52>

00000776 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     776:	f8 94       	cli
	WatchDogReset();
     778:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     77c:	84 b7       	in	r24, 0x34	; 52
     77e:	87 7f       	andi	r24, 0xF7	; 247
     780:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     782:	e0 e6       	ldi	r30, 0x60	; 96
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	88 61       	ori	r24, 0x18	; 24
     78a:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     78c:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     78e:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     790:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     792:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     794:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (set lower four bits to 0 for input)
     796:	87 b1       	in	r24, 0x07	; 7
     798:	80 7f       	andi	r24, 0xF0	; 240
     79a:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (set upper four bits to 0 for input)
     79c:	8a b1       	in	r24, 0x0a	; 10
     79e:	8f 70       	andi	r24, 0x0F	; 15
     7a0:	8a b9       	out	0x0a, r24	; 10
	// END TEAM ROTARY
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     7a6:	8d e0       	ldi	r24, 0x0D	; 13
     7a8:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     7aa:	82 e1       	ldi	r24, 0x12	; 18
     7ac:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     7ae:	ee e6       	ldi	r30, 0x6E	; 110
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	81 60       	ori	r24, 0x01	; 1
     7b6:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     7b8:	e4 e6       	ldi	r30, 0x64	; 100
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8f 7d       	andi	r24, 0xDF	; 223
     7c0:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     7c2:	78 94       	sei
     7c4:	08 95       	ret

000007c6 <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     7c6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     7ca:	89 e1       	ldi	r24, 0x19	; 25
     7cc:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7d0:	88 e1       	ldi	r24, 0x18	; 24
     7d2:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     7d6:	8e e0       	ldi	r24, 0x0E	; 14
     7d8:	80 93 c2 00 	sts	0x00C2, r24
     7dc:	08 95       	ret

000007de <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     7de:	fa 01       	movw	r30, r20
     7e0:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     836:	31 97       	sbiw	r30, 0x01	; 1
     838:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     84e:	31 97       	sbiw	r30, 0x01	; 1
     850:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     852:	31 97       	sbiw	r30, 0x01	; 1
     854:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     86c:	ca 01       	movw	r24, r20
     86e:	83 97       	sbiw	r24, 0x23	; 35
     870:	08 95       	ret

00000872 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     872:	08 95       	ret

00000874 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     874:	08 95       	ret

00000876 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     876:	08 95       	ret

00000878 <OSTaskIdle>:

void OSTaskIdle (void *pdata)
{
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     878:	f8 94       	cli
        OSIdleCtr++;
        OS_EXIT_CRITICAL();
     87a:	78 94       	sei
     87c:	fd cf       	rjmp	.-6      	; 0x878 <OSTaskIdle>

0000087e <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     886:	fc 01       	movw	r30, r24
     888:	05 85       	ldd	r16, Z+13	; 0x0d
     88a:	e0 2f       	mov	r30, r16
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	eb 5c       	subi	r30, 0xCB	; 203
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	10 81       	ld	r17, Z
    bity = OSMapTbl[y];
     894:	21 2f       	mov	r18, r17
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	d9 01       	movw	r26, r18
     89a:	ab 5c       	subi	r26, 0xCB	; 203
     89c:	bd 4f       	sbci	r27, 0xFD	; 253
     89e:	dc 91       	ld	r29, X
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     8a0:	fc 01       	movw	r30, r24
     8a2:	e2 0f       	add	r30, r18
     8a4:	f3 1f       	adc	r31, r19
     8a6:	52 81       	ldd	r21, Z+2	; 0x02
     8a8:	a5 2f       	mov	r26, r21
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	ab 5c       	subi	r26, 0xCB	; 203
     8ae:	be 4f       	sbci	r27, 0xFE	; 254
     8b0:	cc 91       	ld	r28, X
    bitx = OSMapTbl[x];
     8b2:	ac 2f       	mov	r26, r28
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ab 5c       	subi	r26, 0xCB	; 203
     8b8:	bd 4f       	sbci	r27, 0xFD	; 253
     8ba:	ac 91       	ld	r26, X
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     8bc:	11 0f       	add	r17, r17
     8be:	11 0f       	add	r17, r17
     8c0:	11 0f       	add	r17, r17
     8c2:	c1 0f       	add	r28, r17
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     8c4:	ba 2f       	mov	r27, r26
     8c6:	b0 95       	com	r27
     8c8:	5b 23       	and	r21, r27
     8ca:	52 83       	std	Z+2, r21	; 0x02
     8cc:	51 11       	cpse	r21, r1
     8ce:	05 c0       	rjmp	.+10     	; 0x8da <OSEventTaskRdy+0x5c>
        pevent->OSEventGrp &= ~bity;
     8d0:	5d 2f       	mov	r21, r29
     8d2:	50 95       	com	r21
     8d4:	05 23       	and	r16, r21
     8d6:	fc 01       	movw	r30, r24
     8d8:	05 87       	std	Z+13, r16	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     8da:	ec 2f       	mov	r30, r28
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 5c       	subi	r30, 0xCE	; 206
     8e4:	f9 4f       	sbci	r31, 0xF9	; 249
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     8ec:	13 86       	std	Z+11, r1	; 0x0b
     8ee:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     8f0:	17 82       	std	Z+7, r1	; 0x07
     8f2:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     8f4:	71 87       	std	Z+9, r23	; 0x09
     8f6:	60 87       	std	Z+8, r22	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */    
#endif    
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     8f8:	40 95       	com	r20
     8fa:	84 85       	ldd	r24, Z+12	; 0x0c
     8fc:	48 23       	and	r20, r24
     8fe:	44 87       	std	Z+12, r20	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     900:	41 11       	cpse	r20, r1
     902:	0b c0       	rjmp	.+22     	; 0x91a <__stack+0x1b>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     904:	80 91 93 05 	lds	r24, 0x0593
     908:	d8 2b       	or	r29, r24
     90a:	d0 93 93 05 	sts	0x0593, r29
        OSRdyTbl[y]     |=  bitx;
     90e:	f9 01       	movw	r30, r18
     910:	ec 56       	subi	r30, 0x6C	; 108
     912:	fa 4f       	sbci	r31, 0xFA	; 250
     914:	80 81       	ld	r24, Z
     916:	a8 2b       	or	r26, r24
     918:	a0 83       	st	Z, r26
    }
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	08 95       	ret

00000924 <OSEventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskWait (OS_EVENT *pevent)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
     928:	e0 91 9f 05 	lds	r30, 0x059F
     92c:	f0 91 a0 05 	lds	r31, 0x05A0
     930:	97 83       	std	Z+7, r25	; 0x07
     932:	86 83       	std	Z+6, r24	; 0x06
    if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {      /* Task no longer ready      */
     934:	a7 85       	ldd	r26, Z+15	; 0x0f
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	20 89       	ldd	r18, Z+16	; 0x10
     93a:	ed 01       	movw	r28, r26
     93c:	cc 56       	subi	r28, 0x6C	; 108
     93e:	da 4f       	sbci	r29, 0xFA	; 250
     940:	42 2f       	mov	r20, r18
     942:	40 95       	com	r20
     944:	38 81       	ld	r19, Y
     946:	34 23       	and	r19, r20
     948:	38 83       	st	Y, r19
     94a:	31 11       	cpse	r19, r1
     94c:	07 c0       	rjmp	.+14     	; 0x95c <OSEventTaskWait+0x38>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     94e:	31 89       	ldd	r19, Z+17	; 0x11
     950:	30 95       	com	r19
     952:	40 91 93 05 	lds	r20, 0x0593
     956:	34 23       	and	r19, r20
     958:	30 93 93 05 	sts	0x0593, r19
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
     95c:	a8 0f       	add	r26, r24
     95e:	b9 1f       	adc	r27, r25
     960:	12 96       	adiw	r26, 0x02	; 2
     962:	3c 91       	ld	r19, X
     964:	12 97       	sbiw	r26, 0x02	; 2
     966:	23 2b       	or	r18, r19
     968:	12 96       	adiw	r26, 0x02	; 2
     96a:	2c 93       	st	X, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     96c:	dc 01       	movw	r26, r24
     96e:	1d 96       	adiw	r26, 0x0d	; 13
     970:	3c 91       	ld	r19, X
     972:	1d 97       	sbiw	r26, 0x0d	; 13
     974:	21 89       	ldd	r18, Z+17	; 0x11
     976:	23 2b       	or	r18, r19
     978:	1d 96       	adiw	r26, 0x0d	; 13
     97a:	2c 93       	st	X, r18
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <OSEventTO>:
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTO (OS_EVENT *pevent)
{
    if ((pevent->OSEventTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
     982:	e0 91 9f 05 	lds	r30, 0x059F
     986:	f0 91 a0 05 	lds	r31, 0x05A0
     98a:	27 85       	ldd	r18, Z+15	; 0x0f
     98c:	dc 01       	movw	r26, r24
     98e:	a2 0f       	add	r26, r18
     990:	b1 1d       	adc	r27, r1
     992:	20 89       	ldd	r18, Z+16	; 0x10
     994:	20 95       	com	r18
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	3c 91       	ld	r19, X
     99a:	12 97       	sbiw	r26, 0x02	; 2
     99c:	23 23       	and	r18, r19
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	2c 93       	st	X, r18
     9a2:	21 11       	cpse	r18, r1
     9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <OSEventTO+0x36>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
     9a6:	21 89       	ldd	r18, Z+17	; 0x11
     9a8:	20 95       	com	r18
     9aa:	dc 01       	movw	r26, r24
     9ac:	1d 96       	adiw	r26, 0x0d	; 13
     9ae:	3c 91       	ld	r19, X
     9b0:	1d 97       	sbiw	r26, 0x0d	; 13
     9b2:	23 23       	and	r18, r19
     9b4:	1d 96       	adiw	r26, 0x0d	; 13
     9b6:	2c 93       	st	X, r18
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
     9b8:	14 86       	std	Z+12, r1	; 0x0c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
     9ba:	17 82       	std	Z+7, r1	; 0x07
     9bc:	16 82       	std	Z+6, r1	; 0x06
     9be:	08 95       	ret

000009c0 <OSEventWaitListInit>:
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
     9c0:	fc 01       	movw	r30, r24
     9c2:	15 86       	std	Z+13, r1	; 0x0d
     9c4:	32 96       	adiw	r30, 0x02	; 2
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     9c6:	80 e0       	ldi	r24, 0x00	; 0
        pevent->OSEventTbl[i] = 0x00;
     9c8:	11 92       	st	Z+, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	88 30       	cpi	r24, 0x08	; 8
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <OSEventWaitListInit+0x8>
        pevent->OSEventTbl[i] = 0x00;
    }
}
     9d0:	08 95       	ret

000009d2 <OSIntExit>:
*********************************************************************************************************
*/

void OSIntExit (void)
{
    OS_ENTER_CRITICAL();
     9d2:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
     9d4:	80 91 9e 05 	lds	r24, 0x059E
     9d8:	81 50       	subi	r24, 0x01	; 1
     9da:	80 93 9e 05 	sts	0x059E, r24
     9de:	90 91 7b 05 	lds	r25, 0x057B
     9e2:	89 2b       	or	r24, r25
     9e4:	e1 f5       	brne	.+120    	; 0xa5e <OSIntExit+0x8c>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
     9e6:	e0 91 93 05 	lds	r30, 0x0593
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	eb 5c       	subi	r30, 0xCB	; 203
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	80 81       	ld	r24, Z
     9f2:	80 93 72 03 	sts	0x0372, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
     9f6:	e8 2f       	mov	r30, r24
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	ec 56       	subi	r30, 0x6C	; 108
     9fc:	fa 4f       	sbci	r31, 0xFA	; 250
     9fe:	e0 81       	ld	r30, Z
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	eb 5c       	subi	r30, 0xCB	; 203
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	88 0f       	add	r24, r24
     a08:	88 0f       	add	r24, r24
     a0a:	88 0f       	add	r24, r24
     a0c:	90 81       	ld	r25, Z
     a0e:	89 0f       	add	r24, r25
     a10:	80 93 81 05 	sts	0x0581, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
     a14:	90 91 82 05 	lds	r25, 0x0582
     a18:	89 17       	cp	r24, r25
     a1a:	09 f1       	breq	.+66     	; 0xa5e <OSIntExit+0x8c>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     a1c:	e8 2f       	mov	r30, r24
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 5c       	subi	r30, 0xCE	; 206
     a26:	f9 4f       	sbci	r31, 0xF9	; 249
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	90 93 92 05 	sts	0x0592, r25
     a30:	80 93 91 05 	sts	0x0591, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
     a34:	80 91 85 05 	lds	r24, 0x0585
     a38:	90 91 86 05 	lds	r25, 0x0586
     a3c:	a0 91 87 05 	lds	r26, 0x0587
     a40:	b0 91 88 05 	lds	r27, 0x0588
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	a1 1d       	adc	r26, r1
     a48:	b1 1d       	adc	r27, r1
     a4a:	80 93 85 05 	sts	0x0585, r24
     a4e:	90 93 86 05 	sts	0x0586, r25
     a52:	a0 93 87 05 	sts	0x0587, r26
     a56:	b0 93 88 05 	sts	0x0588, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
     a5a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
     a5e:	78 94       	sei
     a60:	08 95       	ret

00000a62 <OSSched>:
void OSSched (void)
{
    INT8U y;


    OS_ENTER_CRITICAL();
     a62:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
     a64:	90 91 9e 05 	lds	r25, 0x059E
     a68:	80 91 7b 05 	lds	r24, 0x057B
     a6c:	89 2b       	or	r24, r25
     a6e:	d1 f5       	brne	.+116    	; 0xae4 <OSSched+0x82>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
     a70:	e0 91 93 05 	lds	r30, 0x0593
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	eb 5c       	subi	r30, 0xCB	; 203
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
     a7a:	80 81       	ld	r24, Z
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     a7c:	e8 2f       	mov	r30, r24
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	ec 56       	subi	r30, 0x6C	; 108
     a82:	fa 4f       	sbci	r31, 0xFA	; 250
     a84:	e0 81       	ld	r30, Z
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	eb 5c       	subi	r30, 0xCB	; 203
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	88 0f       	add	r24, r24
     a8e:	88 0f       	add	r24, r24
     a90:	88 0f       	add	r24, r24
     a92:	90 81       	ld	r25, Z
     a94:	e8 2f       	mov	r30, r24
     a96:	e9 0f       	add	r30, r25
     a98:	e0 93 81 05 	sts	0x0581, r30
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
     a9c:	80 91 82 05 	lds	r24, 0x0582
     aa0:	e8 17       	cp	r30, r24
     aa2:	01 f1       	breq	.+64     	; 0xae4 <OSSched+0x82>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	ee 5c       	subi	r30, 0xCE	; 206
     aac:	f9 4f       	sbci	r31, 0xF9	; 249
     aae:	80 81       	ld	r24, Z
     ab0:	91 81       	ldd	r25, Z+1	; 0x01
     ab2:	90 93 92 05 	sts	0x0592, r25
     ab6:	80 93 91 05 	sts	0x0591, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
     aba:	80 91 85 05 	lds	r24, 0x0585
     abe:	90 91 86 05 	lds	r25, 0x0586
     ac2:	a0 91 87 05 	lds	r26, 0x0587
     ac6:	b0 91 88 05 	lds	r27, 0x0588
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	a1 1d       	adc	r26, r1
     ace:	b1 1d       	adc	r27, r1
     ad0:	80 93 85 05 	sts	0x0585, r24
     ad4:	90 93 86 05 	sts	0x0586, r25
     ad8:	a0 93 87 05 	sts	0x0587, r26
     adc:	b0 93 88 05 	sts	0x0588, r27
#if 1
			//DebugPulse ();
#endif	
			
#if 1			
            OS_TASK_SW();                        /* Perform a context switch                           */
     ae0:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
     ae4:	78 94       	sei
     ae6:	08 95       	ret

00000ae8 <OSStart>:
#if 0
	DebugPulse();
#endif	
	
	
    if (OSRunning == FALSE) {
     ae8:	80 91 7c 05 	lds	r24, 0x057C
     aec:	81 11       	cpse	r24, r1
     aee:	26 c0       	rjmp	.+76     	; 0xb3c <OSStart+0x54>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
     af0:	e0 91 93 05 	lds	r30, 0x0593
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	eb 5c       	subi	r30, 0xCB	; 203
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	e0 81       	ld	r30, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
     afc:	ae 2f       	mov	r26, r30
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	ac 56       	subi	r26, 0x6C	; 108
     b02:	ba 4f       	sbci	r27, 0xFA	; 250
     b04:	ac 91       	ld	r26, X
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	ab 5c       	subi	r26, 0xCB	; 203
     b0a:	be 4f       	sbci	r27, 0xFE	; 254
        OSPrioHighRdy = (INT8U)((y << 3) + x);
     b0c:	ee 0f       	add	r30, r30
     b0e:	ee 0f       	add	r30, r30
     b10:	ee 0f       	add	r30, r30
     b12:	8c 91       	ld	r24, X
     b14:	e8 0f       	add	r30, r24
     b16:	e0 93 81 05 	sts	0x0581, r30
        OSPrioCur     = OSPrioHighRdy;
     b1a:	e0 93 82 05 	sts	0x0582, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 5c       	subi	r30, 0xCE	; 206
     b26:	f9 4f       	sbci	r31, 0xF9	; 249
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	90 93 92 05 	sts	0x0592, r25
     b30:	80 93 91 05 	sts	0x0591, r24
        OSTCBCur      = OSTCBHighRdy;
     b34:	90 93 a0 05 	sts	0x05A0, r25
     b38:	80 93 9f 05 	sts	0x059F, r24
    }
	
	
#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
     b3c:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
     b40:	08 95       	ret

00000b42 <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
     b46:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     b48:	e0 91 8d 05 	lds	r30, 0x058D
     b4c:	f0 91 8e 05 	lds	r31, 0x058E
    if (ptcb != (OS_TCB *)0) {
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	09 f4       	brne	.+2      	; 0xb56 <OSTCBInit+0x14>
     b54:	4f c0       	rjmp	.+158    	; 0xbf4 <OSTCBInit+0xb2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
     b56:	22 81       	ldd	r18, Z+2	; 0x02
     b58:	33 81       	ldd	r19, Z+3	; 0x03
     b5a:	30 93 8e 05 	sts	0x058E, r19
     b5e:	20 93 8d 05 	sts	0x058D, r18
        OS_EXIT_CRITICAL();
     b62:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
     b64:	71 83       	std	Z+1, r23	; 0x01
     b66:	60 83       	st	Z, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
     b68:	85 87       	std	Z+13, r24	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
     b6a:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
     b6c:	13 86       	std	Z+11, r1	; 0x0b
     b6e:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN        
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
     b70:	c8 2f       	mov	r28, r24
     b72:	c6 95       	lsr	r28
     b74:	c6 95       	lsr	r28
     b76:	c6 95       	lsr	r28
     b78:	c7 87       	std	Z+15, r28	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
     b7a:	d0 e0       	ldi	r29, 0x00	; 0
     b7c:	cb 5c       	subi	r28, 0xCB	; 203
     b7e:	dd 4f       	sbci	r29, 0xFD	; 253
     b80:	98 81       	ld	r25, Y
     b82:	91 8b       	std	Z+17, r25	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
     b84:	c8 2f       	mov	r28, r24
     b86:	c7 70       	andi	r28, 0x07	; 7
     b88:	c6 87       	std	Z+14, r28	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
     b8a:	d0 e0       	ldi	r29, 0x00	; 0
     b8c:	cb 5c       	subi	r28, 0xCB	; 203
     b8e:	dd 4f       	sbci	r29, 0xFD	; 253
     b90:	98 81       	ld	r25, Y
     b92:	90 8b       	std	Z+16, r25	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
     b94:	17 82       	std	Z+7, r1	; 0x07
     b96:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     b98:	11 86       	std	Z+9, r1	; 0x09
     b9a:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
     b9c:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
     b9e:	a8 2f       	mov	r26, r24
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	aa 0f       	add	r26, r26
     ba4:	bb 1f       	adc	r27, r27
     ba6:	ae 5c       	subi	r26, 0xCE	; 206
     ba8:	b9 4f       	sbci	r27, 0xF9	; 249
     baa:	ed 93       	st	X+, r30
     bac:	fc 93       	st	X, r31
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
     bae:	a0 91 83 05 	lds	r26, 0x0583
     bb2:	b0 91 84 05 	lds	r27, 0x0584
     bb6:	b3 83       	std	Z+3, r27	; 0x03
     bb8:	a2 83       	std	Z+2, r26	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
     bba:	15 82       	std	Z+5, r1	; 0x05
     bbc:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     bbe:	10 97       	sbiw	r26, 0x00	; 0
     bc0:	21 f0       	breq	.+8      	; 0xbca <OSTCBInit+0x88>
            OSTCBList->OSTCBPrev = ptcb;
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	fc 93       	st	X, r31
     bc6:	ee 93       	st	-X, r30
     bc8:	14 97       	sbiw	r26, 0x04	; 4
        }
        OSTCBList               = ptcb;
     bca:	f0 93 84 05 	sts	0x0584, r31
     bce:	e0 93 83 05 	sts	0x0583, r30
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     bd2:	90 91 93 05 	lds	r25, 0x0593
     bd6:	81 89       	ldd	r24, Z+17	; 0x11
     bd8:	89 2b       	or	r24, r25
     bda:	80 93 93 05 	sts	0x0593, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     bde:	a7 85       	ldd	r26, Z+15	; 0x0f
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ac 56       	subi	r26, 0x6C	; 108
     be4:	ba 4f       	sbci	r27, 0xFA	; 250
     be6:	9c 91       	ld	r25, X
     be8:	80 89       	ldd	r24, Z+16	; 0x10
     bea:	89 2b       	or	r24, r25
     bec:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
     bee:	78 94       	sei
        return (OS_NO_ERR);
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <OSTCBInit+0xb6>
    } else {
        OS_EXIT_CRITICAL();
     bf4:	78 94       	sei
        return (OS_NO_MORE_TCB);
     bf6:	86 e4       	ldi	r24, 0x46	; 70
    }
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <OSTimeTick>:

void OSTimeTick (void)
{
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
     bfe:	0e 94 3b 04 	call	0x876	; 0x876 <OSTimeTickHook>
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
     c02:	e0 91 83 05 	lds	r30, 0x0583
     c06:	f0 91 84 05 	lds	r31, 0x0584
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     c0a:	85 85       	ldd	r24, Z+13	; 0x0d
     c0c:	8f 33       	cpi	r24, 0x3F	; 63
     c0e:	39 f1       	breq	.+78     	; 0xc5e <OSTimeTick+0x60>
     c10:	40 91 93 05 	lds	r20, 0x0593
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	30 e0       	ldi	r19, 0x00	; 0

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
     c18:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
     c1a:	82 85       	ldd	r24, Z+10	; 0x0a
     c1c:	93 85       	ldd	r25, Z+11	; 0x0b
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	a9 f0       	breq	.+42     	; 0xc4c <OSTimeTick+0x4e>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	93 87       	std	Z+11, r25	; 0x0b
     c26:	82 87       	std	Z+10, r24	; 0x0a
     c28:	89 2b       	or	r24, r25
     c2a:	81 f4       	brne	.+32     	; 0xc4c <OSTimeTick+0x4e>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
     c2c:	84 85       	ldd	r24, Z+12	; 0x0c
     c2e:	83 fd       	sbrc	r24, 3
     c30:	0b c0       	rjmp	.+22     	; 0xc48 <OSTimeTick+0x4a>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     c32:	81 89       	ldd	r24, Z+17	; 0x11
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     c34:	a7 85       	ldd	r26, Z+15	; 0x0f
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ac 56       	subi	r26, 0x6C	; 108
     c3a:	ba 4f       	sbci	r27, 0xFA	; 250
     c3c:	5c 91       	ld	r21, X
     c3e:	90 89       	ldd	r25, Z+16	; 0x10
     c40:	95 2b       	or	r25, r21
     c42:	9c 93       	st	X, r25
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     c44:	48 2b       	or	r20, r24
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <OSTimeTick+0x4e>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     c48:	33 87       	std	Z+11, r19	; 0x0b
     c4a:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
     c4c:	02 80       	ldd	r0, Z+2	; 0x02
     c4e:	f3 81       	ldd	r31, Z+3	; 0x03
     c50:	e0 2d       	mov	r30, r0
        OS_EXIT_CRITICAL();
     c52:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     c54:	85 85       	ldd	r24, Z+13	; 0x0d
     c56:	8f 33       	cpi	r24, 0x3F	; 63
     c58:	f9 f6       	brne	.-66     	; 0xc18 <OSTimeTick+0x1a>
     c5a:	40 93 93 05 	sts	0x0593, r20
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }
	
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
     c5e:	f8 94       	cli
    OSTime++;
     c60:	80 91 a1 05 	lds	r24, 0x05A1
     c64:	90 91 a2 05 	lds	r25, 0x05A2
     c68:	a0 91 a3 05 	lds	r26, 0x05A3
     c6c:	b0 91 a4 05 	lds	r27, 0x05A4
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	80 93 a1 05 	sts	0x05A1, r24
     c7a:	90 93 a2 05 	sts	0x05A2, r25
     c7e:	a0 93 a3 05 	sts	0x05A3, r26
     c82:	b0 93 a4 05 	sts	0x05A4, r27
    OS_EXIT_CRITICAL();
     c86:	78 94       	sei
     c88:	08 95       	ret

00000c8a <OSMboxAccept>:
*              == (void *)0  if the mailbox is empty or if you didn't pass the proper event pointer.
*********************************************************************************************************
*/

void *OSMboxAccept (OS_EVENT *pevent)
{
     c8a:	fc 01       	movw	r30, r24
    void  *msg;


    OS_ENTER_CRITICAL();
     c8c:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
     c8e:	84 85       	ldd	r24, Z+12	; 0x0c
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	21 f0       	breq	.+8      	; 0xc9c <OSMboxAccept+0x12>
        OS_EXIT_CRITICAL();
     c94:	78 94       	sei
        return ((void *)0);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	08 95       	ret
    }
    msg = pevent->OSEventPtr; 
     c9c:	20 81       	ld	r18, Z
     c9e:	31 81       	ldd	r19, Z+1	; 0x01
    if (msg != (void *)0) {                               /* See if there is already a message         */
     ca0:	21 15       	cp	r18, r1
     ca2:	31 05       	cpc	r19, r1
     ca4:	11 f0       	breq	.+4      	; 0xcaa <OSMboxAccept+0x20>
        pevent->OSEventPtr = (void *)0;                   /* Clear the mailbox                         */
     ca6:	11 82       	std	Z+1, r1	; 0x01
     ca8:	10 82       	st	Z, r1
    }
    OS_EXIT_CRITICAL();
     caa:	78 94       	sei
    return (msg);                                         /* Return the message received (or NULL)     */
     cac:	82 2f       	mov	r24, r18
     cae:	93 2f       	mov	r25, r19
}
     cb0:	08 95       	ret

00000cb2 <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     cb6:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     cb8:	c0 91 9c 05 	lds	r28, 0x059C
     cbc:	d0 91 9d 05 	lds	r29, 0x059D
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     cc0:	20 97       	sbiw	r28, 0x00	; 0
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <OSMboxCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     cc4:	28 81       	ld	r18, Y
     cc6:	39 81       	ldd	r19, Y+1	; 0x01
     cc8:	30 93 9d 05 	sts	0x059D, r19
     ccc:	20 93 9c 05 	sts	0x059C, r18
    }
    OS_EXIT_CRITICAL();
     cd0:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
     cd2:	20 97       	sbiw	r28, 0x00	; 0
     cd4:	39 f0       	breq	.+14     	; 0xce4 <OSMboxCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
     cda:	99 83       	std	Y+1, r25	; 0x01
     cdc:	88 83       	st	Y, r24
        OSEventWaitListInit(pevent);
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
}
     ce4:	ce 01       	movw	r24, r28
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <OSMboxPost>:
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    OS_ENTER_CRITICAL();
     cec:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
     cee:	fc 01       	movw	r30, r24
     cf0:	24 85       	ldd	r18, Z+12	; 0x0c
     cf2:	21 30       	cpi	r18, 0x01	; 1
     cf4:	19 f0       	breq	.+6      	; 0xcfc <OSMboxPost+0x10>
        OS_EXIT_CRITICAL();
     cf6:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
     cfc:	fc 01       	movw	r30, r24
     cfe:	25 85       	ldd	r18, Z+13	; 0x0d
     d00:	22 23       	and	r18, r18
     d02:	41 f0       	breq	.+16     	; 0xd14 <OSMboxPost+0x28>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
     d04:	42 e0       	ldi	r20, 0x02	; 2
     d06:	0e 94 3f 04 	call	0x87e	; 0x87e <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
     d0a:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
     d0c:	0e 94 31 05 	call	0xa62	; 0xa62 <OSSched>
        return (OS_NO_ERR);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	08 95       	ret
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
     d14:	fc 01       	movw	r30, r24
     d16:	20 81       	ld	r18, Z
     d18:	31 81       	ldd	r19, Z+1	; 0x01
     d1a:	23 2b       	or	r18, r19
     d1c:	19 f0       	breq	.+6      	; 0xd24 <OSMboxPost+0x38>
            OS_EXIT_CRITICAL();
     d1e:	78 94       	sei
            return (OS_MBOX_FULL);
     d20:	84 e1       	ldi	r24, 0x14	; 20
     d22:	08 95       	ret
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
     d24:	fc 01       	movw	r30, r24
     d26:	71 83       	std	Z+1, r23	; 0x01
     d28:	60 83       	st	Z, r22
            OS_EXIT_CRITICAL();
     d2a:	78 94       	sei
            return (OS_NO_ERR);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
     d2e:	08 95       	ret

00000d30 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     d34:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
     d36:	c0 91 9c 05 	lds	r28, 0x059C
     d3a:	d0 91 9d 05 	lds	r29, 0x059D
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
     d3e:	20 97       	sbiw	r28, 0x00	; 0
     d40:	31 f0       	breq	.+12     	; 0xd4e <OSSemCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     d42:	28 81       	ld	r18, Y
     d44:	39 81       	ldd	r19, Y+1	; 0x01
     d46:	30 93 9d 05 	sts	0x059D, r19
     d4a:	20 93 9c 05 	sts	0x059C, r18
    }
    OS_EXIT_CRITICAL();
     d4e:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
     d50:	20 97       	sbiw	r28, 0x00	; 0
     d52:	39 f0       	breq	.+14     	; 0xd62 <OSSemCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
     d54:	23 e0       	ldi	r18, 0x03	; 3
     d56:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
     d58:	9b 87       	std	Y+11, r25	; 0x0b
     d5a:	8a 87       	std	Y+10, r24	; 0x0a
        OSEventWaitListInit(pevent);
     d5c:	ce 01       	movw	r24, r28
     d5e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <OSEventWaitListInit>
    }
    return (pevent);
}
     d62:	ce 01       	movw	r24, r28
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	8a 01       	movw	r16, r20
    OS_ENTER_CRITICAL();
     d76:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
     d78:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	21 f0       	breq	.+8      	; 0xd86 <OSSemPend+0x1c>
        OS_EXIT_CRITICAL();
     d7e:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	fa 01       	movw	r30, r20
     d84:	80 83       	st	Z, r24
    }
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
     d86:	8a 85       	ldd	r24, Y+10	; 0x0a
     d88:	9b 85       	ldd	r25, Y+11	; 0x0b
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	39 f0       	breq	.+14     	; 0xd9c <OSSemPend+0x32>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9b 87       	std	Y+11, r25	; 0x0b
     d92:	8a 87       	std	Y+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
     d94:	78 94       	sei
        *err = OS_NO_ERR;
     d96:	f8 01       	movw	r30, r16
     d98:	10 82       	st	Z, r1
     d9a:	2d c0       	rjmp	.+90     	; 0xdf6 <OSSemPend+0x8c>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
     d9c:	80 91 9e 05 	lds	r24, 0x059E
     da0:	88 23       	and	r24, r24
     da2:	29 f0       	breq	.+10     	; 0xdae <OSSemPend+0x44>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
     da4:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	f8 01       	movw	r30, r16
     daa:	80 83       	st	Z, r24
     dac:	24 c0       	rjmp	.+72     	; 0xdf6 <OSSemPend+0x8c>
    } else {                                          /* Otherwise, must wait until event occurs       */
        OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
     dae:	e0 91 9f 05 	lds	r30, 0x059F
     db2:	f0 91 a0 05 	lds	r31, 0x05A0
     db6:	84 85       	ldd	r24, Z+12	; 0x0c
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	84 87       	std	Z+12, r24	; 0x0c
        OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
     dbc:	73 87       	std	Z+11, r23	; 0x0b
     dbe:	62 87       	std	Z+10, r22	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 92 04 	call	0x924	; 0x924 <OSEventTaskWait>
        OS_EXIT_CRITICAL();
     dc6:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready         */
     dc8:	0e 94 31 05 	call	0xa62	; 0xa62 <OSSched>
        OS_ENTER_CRITICAL();
     dcc:	f8 94       	cli
        if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {      /* Must have timed out if still waiting for event*/
     dce:	e0 91 9f 05 	lds	r30, 0x059F
     dd2:	f0 91 a0 05 	lds	r31, 0x05A0
     dd6:	84 85       	ldd	r24, Z+12	; 0x0c
     dd8:	80 ff       	sbrs	r24, 0
     dda:	08 c0       	rjmp	.+16     	; 0xdec <OSSemPend+0x82>
            OSEventTO(pevent);
     ddc:	ce 01       	movw	r24, r28
     dde:	0e 94 c1 04 	call	0x982	; 0x982 <OSEventTO>
            OS_EXIT_CRITICAL();
     de2:	78 94       	sei
            *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	f8 01       	movw	r30, r16
     de8:	80 83       	st	Z, r24
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <OSSemPend+0x8c>
        } else {
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
     dec:	17 82       	std	Z+7, r1	; 0x07
     dee:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
     df0:	78 94       	sei
            *err = OS_NO_ERR;
     df2:	f8 01       	movw	r30, r16
     df4:	10 82       	st	Z, r1
        }
    }
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret

00000e00 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
     e00:	bf 92       	push	r11
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	b2 2e       	mov	r11, r18

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
     e14:	2f e3       	ldi	r18, 0x3F	; 63
     e16:	2b 15       	cp	r18, r11
     e18:	08 f4       	brcc	.+2      	; 0xe1c <OSTaskCreate+0x1c>
     e1a:	4f c0       	rjmp	.+158    	; 0xeba <OSTaskCreate+0xba>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     e1c:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
     e1e:	cb 2d       	mov	r28, r11
     e20:	d0 e0       	ldi	r29, 0x00	; 0
     e22:	fe 01       	movw	r30, r28
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 5c       	subi	r30, 0xCE	; 206
     e2a:	f9 4f       	sbci	r31, 0xF9	; 249
     e2c:	01 90       	ld	r0, Z+
     e2e:	f0 81       	ld	r31, Z
     e30:	e0 2d       	mov	r30, r0
     e32:	ef 2b       	or	r30, r31
     e34:	09 f0       	breq	.+2      	; 0xe38 <OSTaskCreate+0x38>
     e36:	3e c0       	rjmp	.+124    	; 0xeb4 <OSTaskCreate+0xb4>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
     e38:	fe 01       	movw	r30, r28
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	ee 5c       	subi	r30, 0xCE	; 206
     e40:	f9 4f       	sbci	r31, 0xF9	; 249
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
     e4a:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	0e 94 ef 03 	call	0x7de	; 0x7de <OSTaskStkInit>
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
     e54:	c1 2c       	mov	r12, r1
     e56:	d1 2c       	mov	r13, r1
     e58:	e1 2c       	mov	r14, r1
     e5a:	f1 2c       	mov	r15, r1
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	10 e0       	ldi	r17, 0x00	; 0
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	bc 01       	movw	r22, r24
     e6a:	8b 2d       	mov	r24, r11
     e6c:	0e 94 a1 05 	call	0xb42	; 0xb42 <OSTCBInit>
        if (err == OS_NO_ERR) {
     e70:	81 11       	cpse	r24, r1
     e72:	17 c0       	rjmp	.+46     	; 0xea2 <OSTaskCreate+0xa2>
            OS_ENTER_CRITICAL();
     e74:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
     e76:	80 91 90 05 	lds	r24, 0x0590
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	80 93 90 05 	sts	0x0590, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
     e80:	cc 0f       	add	r28, r28
     e82:	dd 1f       	adc	r29, r29
     e84:	ce 5c       	subi	r28, 0xCE	; 206
     e86:	d9 4f       	sbci	r29, 0xF9	; 249
     e88:	88 81       	ld	r24, Y
     e8a:	99 81       	ldd	r25, Y+1	; 0x01
     e8c:	0e 94 39 04 	call	0x872	; 0x872 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
     e90:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
     e92:	80 91 7c 05 	lds	r24, 0x057C
     e96:	88 23       	and	r24, r24
     e98:	91 f0       	breq	.+36     	; 0xebe <OSTaskCreate+0xbe>
#if 0
				DebugPulse();
#endif					
                OSSched();
     e9a:	0e 94 31 05 	call	0xa62	; 0xa62 <OSSched>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <OSTaskCreate+0xc0>
				DebugPulse();
#endif					
                OSSched();
            }
        } else {
            OS_ENTER_CRITICAL();
     ea2:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
     ea4:	cc 0f       	add	r28, r28
     ea6:	dd 1f       	adc	r29, r29
     ea8:	ce 5c       	subi	r28, 0xCE	; 206
     eaa:	d9 4f       	sbci	r29, 0xF9	; 249
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
     eb0:	78 94       	sei
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <OSTaskCreate+0xc0>
		DebugPulse();
#endif	
		
        return (err);
    } else {
        OS_EXIT_CRITICAL();
     eb4:	78 94       	sei
        return (OS_PRIO_EXIST);
     eb6:	88 e2       	ldi	r24, 0x28	; 40
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <OSTaskCreate+0xc0>
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
     eba:	8a e2       	ldi	r24, 0x2A	; 42
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <OSTaskCreate+0xc0>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        OS_EXIT_CRITICAL();
        return (OS_PRIO_EXIST);
    }	
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	08 95       	ret

00000ed4 <OSInit>:
#if 0
	DebugPulse();
#endif	


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
     ed4:	10 92 a1 05 	sts	0x05A1, r1
     ed8:	10 92 a2 05 	sts	0x05A2, r1
     edc:	10 92 a3 05 	sts	0x05A3, r1
     ee0:	10 92 a4 05 	sts	0x05A4, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
     ee4:	10 92 9e 05 	sts	0x059E, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
     ee8:	10 92 7b 05 	sts	0x057B, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
     eec:	10 92 90 05 	sts	0x0590, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
     ef0:	10 92 7c 05 	sts	0x057C, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
     ef4:	10 92 7d 05 	sts	0x057D, r1
     ef8:	10 92 7e 05 	sts	0x057E, r1
     efc:	10 92 7f 05 	sts	0x057F, r1
     f00:	10 92 80 05 	sts	0x0580, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
     f04:	10 92 85 05 	sts	0x0585, r1
     f08:	10 92 86 05 	sts	0x0586, r1
     f0c:	10 92 87 05 	sts	0x0587, r1
     f10:	10 92 88 05 	sts	0x0588, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
     f14:	10 92 93 05 	sts	0x0593, r1
     f18:	e4 e9       	ldi	r30, 0x94	; 148
     f1a:	f5 e0       	ldi	r31, 0x05	; 5
     f1c:	8c e9       	ldi	r24, 0x9C	; 156
     f1e:	95 e0       	ldi	r25, 0x05	; 5
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0;
     f20:	11 92       	st	Z+, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
     f22:	e8 17       	cp	r30, r24
     f24:	f9 07       	cpc	r31, r25
     f26:	e1 f7       	brne	.-8      	; 0xf20 <OSInit+0x4c>
        OSRdyTbl[i] = 0;
    }
                
    OSPrioCur     = 0;
     f28:	10 92 82 05 	sts	0x0582, r1
    OSPrioHighRdy = 0;                                           
     f2c:	10 92 81 05 	sts	0x0581, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
     f30:	10 92 92 05 	sts	0x0592, r1
     f34:	10 92 91 05 	sts	0x0591, r1
    OSTCBCur      = (OS_TCB *)0;
     f38:	10 92 a0 05 	sts	0x05A0, r1
     f3c:	10 92 9f 05 	sts	0x059F, r1
    OSTCBList     = (OS_TCB *)0;
     f40:	10 92 84 05 	sts	0x0584, r1
     f44:	10 92 83 05 	sts	0x0583, r1
     f48:	e2 e3       	ldi	r30, 0x32	; 50
     f4a:	f6 e0       	ldi	r31, 0x06	; 6
     f4c:	82 eb       	ldi	r24, 0xB2	; 178
     f4e:	96 e0       	ldi	r25, 0x06	; 6
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
     f50:	11 92       	st	Z+, r1
     f52:	11 92       	st	Z+, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;                                           
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
     f54:	e8 17       	cp	r30, r24
     f56:	f9 07       	cpc	r31, r25
     f58:	d9 f7       	brne	.-10     	; 0xf50 <OSInit+0x7c>
     f5a:	80 e5       	ldi	r24, 0x50	; 80
     f5c:	92 e0       	ldi	r25, 0x02	; 2
     f5e:	22 ef       	ldi	r18, 0xF2	; 242
     f60:	32 e0       	ldi	r19, 0x02	; 2
     f62:	fc 01       	movw	r30, r24
     f64:	70 97       	sbiw	r30, 0x10	; 16
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
     f6a:	42 96       	adiw	r24, 0x12	; 18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
     f6c:	82 17       	cp	r24, r18
     f6e:	93 07       	cpc	r25, r19
     f70:	c1 f7       	brne	.-16     	; 0xf62 <OSInit+0x8e>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
     f72:	10 92 e3 02 	sts	0x02E3, r1
     f76:	10 92 e2 02 	sts	0x02E2, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
     f7a:	8e e3       	ldi	r24, 0x3E	; 62
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	90 93 8e 05 	sts	0x058E, r25
     f82:	80 93 8d 05 	sts	0x058D, r24
     f86:	83 eb       	ldi	r24, 0xB3	; 179
     f88:	95 e0       	ldi	r25, 0x05	; 5
     f8a:	21 e3       	ldi	r18, 0x31	; 49
     f8c:	36 e0       	ldi	r19, 0x06	; 6
     f8e:	fc 01       	movw	r30, r24
     f90:	3e 97       	sbiw	r30, 0x0e	; 14

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
     f96:	0e 96       	adiw	r24, 0x0e	; 14
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
     f98:	82 17       	cp	r24, r18
     f9a:	93 07       	cpc	r25, r19
     f9c:	c1 f7       	brne	.-16     	; 0xf8e <OSInit+0xba>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
     f9e:	10 92 24 06 	sts	0x0624, r1
     fa2:	10 92 23 06 	sts	0x0623, r1
    OSEventFreeList                          = &OSEventTbl[0];    
     fa6:	85 ea       	ldi	r24, 0xA5	; 165
     fa8:	95 e0       	ldi	r25, 0x05	; 5
     faa:	90 93 9d 05 	sts	0x059D, r25
     fae:	80 93 9c 05 	sts	0x059C, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE, 
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
     fb2:	2f e3       	ldi	r18, 0x3F	; 63
     fb4:	41 e7       	ldi	r20, 0x71	; 113
     fb6:	53 e0       	ldi	r21, 0x03	; 3
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	8c e3       	ldi	r24, 0x3C	; 60
     fbe:	94 e0       	ldi	r25, 0x04	; 4
     fc0:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat, 
     fc4:	2e e3       	ldi	r18, 0x3E	; 62
     fc6:	41 e3       	ldi	r20, 0x31	; 49
     fc8:	53 e0       	ldi	r21, 0x03	; 3
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	83 e3       	ldi	r24, 0x33	; 51
     fd0:	98 e0       	ldi	r25, 0x08	; 8
     fd2:	0e 94 00 07 	call	0xe00	; 0xe00 <OSTaskCreate>
     fd6:	08 95       	ret

00000fd8 <OSTimeDly>:
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    if (ticks > 0) {                                                      /* 0 means no delay!         */
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	e1 f0       	breq	.+56     	; 0x1014 <OSTimeDly+0x3c>
        OS_ENTER_CRITICAL();
     fdc:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
     fde:	e0 91 9f 05 	lds	r30, 0x059F
     fe2:	f0 91 a0 05 	lds	r31, 0x05A0
     fe6:	a7 85       	ldd	r26, Z+15	; 0x0f
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ac 56       	subi	r26, 0x6C	; 108
     fec:	ba 4f       	sbci	r27, 0xFA	; 250
     fee:	20 89       	ldd	r18, Z+16	; 0x10
     ff0:	20 95       	com	r18
     ff2:	3c 91       	ld	r19, X
     ff4:	23 23       	and	r18, r19
     ff6:	2c 93       	st	X, r18
     ff8:	21 11       	cpse	r18, r1
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <OSTimeDly+0x32>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     ffc:	21 89       	ldd	r18, Z+17	; 0x11
     ffe:	20 95       	com	r18
    1000:	30 91 93 05 	lds	r19, 0x0593
    1004:	23 23       	and	r18, r19
    1006:	20 93 93 05 	sts	0x0593, r18
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
    100a:	93 87       	std	Z+11, r25	; 0x0b
    100c:	82 87       	std	Z+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
    100e:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
    1010:	0e 94 31 05 	call	0xa62	; 0xa62 <OSSched>
    1014:	08 95       	ret

00001016 <OSStatInit>:
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
    OS_ENTER_CRITICAL();
    101e:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    1020:	10 92 7d 05 	sts	0x057D, r1
    1024:	10 92 7e 05 	sts	0x057E, r1
    1028:	10 92 7f 05 	sts	0x057F, r1
    102c:	10 92 80 05 	sts	0x0580, r1
    OS_EXIT_CRITICAL();
    1030:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
    OS_ENTER_CRITICAL();
    103a:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
    103c:	80 91 7d 05 	lds	r24, 0x057D
    1040:	90 91 7e 05 	lds	r25, 0x057E
    1044:	a0 91 7f 05 	lds	r26, 0x057F
    1048:	b0 91 80 05 	lds	r27, 0x0580
    104c:	80 93 89 05 	sts	0x0589, r24
    1050:	90 93 8a 05 	sts	0x058A, r25
    1054:	a0 93 8b 05 	sts	0x058B, r26
    1058:	b0 93 8c 05 	sts	0x058C, r27
    OSStatRdy    = TRUE;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 31 06 	sts	0x0631, r24
    OS_EXIT_CRITICAL();
    1062:	78 94       	sei
    1064:	08 95       	ret

00001066 <OSTaskStat>:
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1066:	80 91 31 06 	lds	r24, 0x0631
    106a:	81 11       	cpse	r24, r1
    106c:	08 c0       	rjmp	.+16     	; 0x107e <OSTaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    106e:	80 e9       	ldi	r24, 0x90	; 144
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1076:	80 91 31 06 	lds	r24, 0x0631
    107a:	88 23       	and	r24, r24
    107c:	c1 f3       	breq	.-16     	; 0x106e <OSTaskStat+0x8>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        if (OSIdleCtrMax > 0L) {
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    107e:	c4 e6       	ldi	r28, 0x64	; 100
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    1080:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    1082:	20 91 7d 05 	lds	r18, 0x057D
    1086:	30 91 7e 05 	lds	r19, 0x057E
    108a:	40 91 7f 05 	lds	r20, 0x057F
    108e:	50 91 80 05 	lds	r21, 0x0580
    1092:	20 93 b2 06 	sts	0x06B2, r18
    1096:	30 93 b3 06 	sts	0x06B3, r19
    109a:	40 93 b4 06 	sts	0x06B4, r20
    109e:	50 93 b5 06 	sts	0x06B5, r21
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    10a2:	10 92 7d 05 	sts	0x057D, r1
    10a6:	10 92 7e 05 	sts	0x057E, r1
    10aa:	10 92 7f 05 	sts	0x057F, r1
    10ae:	10 92 80 05 	sts	0x0580, r1
        OS_EXIT_CRITICAL();
    10b2:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
    10b4:	c0 90 89 05 	lds	r12, 0x0589
    10b8:	d0 90 8a 05 	lds	r13, 0x058A
    10bc:	e0 90 8b 05 	lds	r14, 0x058B
    10c0:	f0 90 8c 05 	lds	r15, 0x058C
    10c4:	c1 14       	cp	r12, r1
    10c6:	d1 04       	cpc	r13, r1
    10c8:	e1 04       	cpc	r14, r1
    10ca:	f1 04       	cpc	r15, r1
    10cc:	b9 f0       	breq	.+46     	; 0x10fc <OSTaskStat+0x96>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    10ce:	a4 e6       	ldi	r26, 0x64	; 100
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__muluhisi3>
    10d6:	a7 01       	movw	r20, r14
    10d8:	96 01       	movw	r18, r12
    10da:	0e 94 48 0a 	call	0x1490	; 0x1490 <__udivmodsi4>
    10de:	8c 2f       	mov	r24, r28
    10e0:	82 1b       	sub	r24, r18
            if (usage > 100) {
    10e2:	85 36       	cpi	r24, 0x65	; 101
    10e4:	1c f0       	brlt	.+6      	; 0x10ec <OSTaskStat+0x86>
                OSCPUUsage = 100;
    10e6:	c0 93 8f 05 	sts	0x058F, r28
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <OSTaskStat+0x9a>
            } else if (usage < 0) {
    10ec:	88 23       	and	r24, r24
    10ee:	1c f4       	brge	.+6      	; 0x10f6 <OSTaskStat+0x90>
                OSCPUUsage =   0;
    10f0:	10 92 8f 05 	sts	0x058F, r1
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <OSTaskStat+0x9a>
            } else {
                OSCPUUsage = usage;
    10f6:	80 93 8f 05 	sts	0x058F, r24
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <OSTaskStat+0x9a>
            }
        } else {
            OSCPUUsage = 0;
    10fc:	10 92 8f 05 	sts	0x058F, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    1100:	0e 94 3a 04 	call	0x874	; 0x874 <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
    1104:	88 ec       	ldi	r24, 0xC8	; 200
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OSTimeDly>
    }
    110c:	b9 cf       	rjmp	.-142    	; 0x1080 <OSTaskStat+0x1a>

0000110e <__subsf3>:
    110e:	50 58       	subi	r21, 0x80	; 128

00001110 <__addsf3>:
    1110:	bb 27       	eor	r27, r27
    1112:	aa 27       	eor	r26, r26
    1114:	0e d0       	rcall	.+28     	; 0x1132 <__addsf3x>
    1116:	0b c1       	rjmp	.+534    	; 0x132e <__fp_round>
    1118:	fc d0       	rcall	.+504    	; 0x1312 <__fp_pscA>
    111a:	30 f0       	brcs	.+12     	; 0x1128 <__addsf3+0x18>
    111c:	01 d1       	rcall	.+514    	; 0x1320 <__fp_pscB>
    111e:	20 f0       	brcs	.+8      	; 0x1128 <__addsf3+0x18>
    1120:	31 f4       	brne	.+12     	; 0x112e <__addsf3+0x1e>
    1122:	9f 3f       	cpi	r25, 0xFF	; 255
    1124:	11 f4       	brne	.+4      	; 0x112a <__addsf3+0x1a>
    1126:	1e f4       	brtc	.+6      	; 0x112e <__addsf3+0x1e>
    1128:	f1 c0       	rjmp	.+482    	; 0x130c <__fp_nan>
    112a:	0e f4       	brtc	.+2      	; 0x112e <__addsf3+0x1e>
    112c:	e0 95       	com	r30
    112e:	e7 fb       	bst	r30, 7
    1130:	e7 c0       	rjmp	.+462    	; 0x1300 <__fp_inf>

00001132 <__addsf3x>:
    1132:	e9 2f       	mov	r30, r25
    1134:	0d d1       	rcall	.+538    	; 0x1350 <__fp_split3>
    1136:	80 f3       	brcs	.-32     	; 0x1118 <__addsf3+0x8>
    1138:	ba 17       	cp	r27, r26
    113a:	62 07       	cpc	r22, r18
    113c:	73 07       	cpc	r23, r19
    113e:	84 07       	cpc	r24, r20
    1140:	95 07       	cpc	r25, r21
    1142:	18 f0       	brcs	.+6      	; 0x114a <__addsf3x+0x18>
    1144:	71 f4       	brne	.+28     	; 0x1162 <__addsf3x+0x30>
    1146:	9e f5       	brtc	.+102    	; 0x11ae <__addsf3x+0x7c>
    1148:	25 c1       	rjmp	.+586    	; 0x1394 <__fp_zero>
    114a:	0e f4       	brtc	.+2      	; 0x114e <__addsf3x+0x1c>
    114c:	e0 95       	com	r30
    114e:	0b 2e       	mov	r0, r27
    1150:	ba 2f       	mov	r27, r26
    1152:	a0 2d       	mov	r26, r0
    1154:	0b 01       	movw	r0, r22
    1156:	b9 01       	movw	r22, r18
    1158:	90 01       	movw	r18, r0
    115a:	0c 01       	movw	r0, r24
    115c:	ca 01       	movw	r24, r20
    115e:	a0 01       	movw	r20, r0
    1160:	11 24       	eor	r1, r1
    1162:	ff 27       	eor	r31, r31
    1164:	59 1b       	sub	r21, r25
    1166:	99 f0       	breq	.+38     	; 0x118e <__addsf3x+0x5c>
    1168:	59 3f       	cpi	r21, 0xF9	; 249
    116a:	50 f4       	brcc	.+20     	; 0x1180 <__addsf3x+0x4e>
    116c:	50 3e       	cpi	r21, 0xE0	; 224
    116e:	68 f1       	brcs	.+90     	; 0x11ca <__addsf3x+0x98>
    1170:	1a 16       	cp	r1, r26
    1172:	f0 40       	sbci	r31, 0x00	; 0
    1174:	a2 2f       	mov	r26, r18
    1176:	23 2f       	mov	r18, r19
    1178:	34 2f       	mov	r19, r20
    117a:	44 27       	eor	r20, r20
    117c:	58 5f       	subi	r21, 0xF8	; 248
    117e:	f3 cf       	rjmp	.-26     	; 0x1166 <__addsf3x+0x34>
    1180:	46 95       	lsr	r20
    1182:	37 95       	ror	r19
    1184:	27 95       	ror	r18
    1186:	a7 95       	ror	r26
    1188:	f0 40       	sbci	r31, 0x00	; 0
    118a:	53 95       	inc	r21
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__addsf3x+0x4e>
    118e:	7e f4       	brtc	.+30     	; 0x11ae <__addsf3x+0x7c>
    1190:	1f 16       	cp	r1, r31
    1192:	ba 0b       	sbc	r27, r26
    1194:	62 0b       	sbc	r22, r18
    1196:	73 0b       	sbc	r23, r19
    1198:	84 0b       	sbc	r24, r20
    119a:	ba f0       	brmi	.+46     	; 0x11ca <__addsf3x+0x98>
    119c:	91 50       	subi	r25, 0x01	; 1
    119e:	a1 f0       	breq	.+40     	; 0x11c8 <__addsf3x+0x96>
    11a0:	ff 0f       	add	r31, r31
    11a2:	bb 1f       	adc	r27, r27
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	c2 f7       	brpl	.-16     	; 0x119c <__addsf3x+0x6a>
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <__addsf3x+0x98>
    11ae:	ba 0f       	add	r27, r26
    11b0:	62 1f       	adc	r22, r18
    11b2:	73 1f       	adc	r23, r19
    11b4:	84 1f       	adc	r24, r20
    11b6:	48 f4       	brcc	.+18     	; 0x11ca <__addsf3x+0x98>
    11b8:	87 95       	ror	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	b7 95       	ror	r27
    11c0:	f7 95       	ror	r31
    11c2:	9e 3f       	cpi	r25, 0xFE	; 254
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <__addsf3x+0x96>
    11c6:	b3 cf       	rjmp	.-154    	; 0x112e <__addsf3+0x1e>
    11c8:	93 95       	inc	r25
    11ca:	88 0f       	add	r24, r24
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <__addsf3x+0x9e>
    11ce:	99 27       	eor	r25, r25
    11d0:	ee 0f       	add	r30, r30
    11d2:	97 95       	ror	r25
    11d4:	87 95       	ror	r24
    11d6:	08 95       	ret

000011d8 <__divsf3>:
    11d8:	0c d0       	rcall	.+24     	; 0x11f2 <__divsf3x>
    11da:	a9 c0       	rjmp	.+338    	; 0x132e <__fp_round>
    11dc:	a1 d0       	rcall	.+322    	; 0x1320 <__fp_pscB>
    11de:	40 f0       	brcs	.+16     	; 0x11f0 <__divsf3+0x18>
    11e0:	98 d0       	rcall	.+304    	; 0x1312 <__fp_pscA>
    11e2:	30 f0       	brcs	.+12     	; 0x11f0 <__divsf3+0x18>
    11e4:	21 f4       	brne	.+8      	; 0x11ee <__divsf3+0x16>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <__divsf3+0x18>
    11ea:	8a c0       	rjmp	.+276    	; 0x1300 <__fp_inf>
    11ec:	51 11       	cpse	r21, r1
    11ee:	d3 c0       	rjmp	.+422    	; 0x1396 <__fp_szero>
    11f0:	8d c0       	rjmp	.+282    	; 0x130c <__fp_nan>

000011f2 <__divsf3x>:
    11f2:	ae d0       	rcall	.+348    	; 0x1350 <__fp_split3>
    11f4:	98 f3       	brcs	.-26     	; 0x11dc <__divsf3+0x4>

000011f6 <__divsf3_pse>:
    11f6:	99 23       	and	r25, r25
    11f8:	c9 f3       	breq	.-14     	; 0x11ec <__divsf3+0x14>
    11fa:	55 23       	and	r21, r21
    11fc:	b1 f3       	breq	.-20     	; 0x11ea <__divsf3+0x12>
    11fe:	95 1b       	sub	r25, r21
    1200:	55 0b       	sbc	r21, r21
    1202:	bb 27       	eor	r27, r27
    1204:	aa 27       	eor	r26, r26
    1206:	62 17       	cp	r22, r18
    1208:	73 07       	cpc	r23, r19
    120a:	84 07       	cpc	r24, r20
    120c:	38 f0       	brcs	.+14     	; 0x121c <__divsf3_pse+0x26>
    120e:	9f 5f       	subi	r25, 0xFF	; 255
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	44 1f       	adc	r20, r20
    1218:	aa 1f       	adc	r26, r26
    121a:	a9 f3       	breq	.-22     	; 0x1206 <__divsf3_pse+0x10>
    121c:	33 d0       	rcall	.+102    	; 0x1284 <__divsf3_pse+0x8e>
    121e:	0e 2e       	mov	r0, r30
    1220:	3a f0       	brmi	.+14     	; 0x1230 <__divsf3_pse+0x3a>
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	30 d0       	rcall	.+96     	; 0x1286 <__divsf3_pse+0x90>
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	50 40       	sbci	r21, 0x00	; 0
    122a:	e6 95       	lsr	r30
    122c:	00 1c       	adc	r0, r0
    122e:	ca f7       	brpl	.-14     	; 0x1222 <__divsf3_pse+0x2c>
    1230:	29 d0       	rcall	.+82     	; 0x1284 <__divsf3_pse+0x8e>
    1232:	fe 2f       	mov	r31, r30
    1234:	27 d0       	rcall	.+78     	; 0x1284 <__divsf3_pse+0x8e>
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	88 1f       	adc	r24, r24
    123c:	bb 1f       	adc	r27, r27
    123e:	26 17       	cp	r18, r22
    1240:	37 07       	cpc	r19, r23
    1242:	48 07       	cpc	r20, r24
    1244:	ab 07       	cpc	r26, r27
    1246:	b0 e8       	ldi	r27, 0x80	; 128
    1248:	09 f0       	breq	.+2      	; 0x124c <__divsf3_pse+0x56>
    124a:	bb 0b       	sbc	r27, r27
    124c:	80 2d       	mov	r24, r0
    124e:	bf 01       	movw	r22, r30
    1250:	ff 27       	eor	r31, r31
    1252:	93 58       	subi	r25, 0x83	; 131
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	2a f0       	brmi	.+10     	; 0x1262 <__divsf3_pse+0x6c>
    1258:	9e 3f       	cpi	r25, 0xFE	; 254
    125a:	51 05       	cpc	r21, r1
    125c:	68 f0       	brcs	.+26     	; 0x1278 <__divsf3_pse+0x82>
    125e:	50 c0       	rjmp	.+160    	; 0x1300 <__fp_inf>
    1260:	9a c0       	rjmp	.+308    	; 0x1396 <__fp_szero>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	ec f3       	brlt	.-6      	; 0x1260 <__divsf3_pse+0x6a>
    1266:	98 3e       	cpi	r25, 0xE8	; 232
    1268:	dc f3       	brlt	.-10     	; 0x1260 <__divsf3_pse+0x6a>
    126a:	86 95       	lsr	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b7 95       	ror	r27
    1272:	f7 95       	ror	r31
    1274:	9f 5f       	subi	r25, 0xFF	; 255
    1276:	c9 f7       	brne	.-14     	; 0x126a <__divsf3_pse+0x74>
    1278:	88 0f       	add	r24, r24
    127a:	91 1d       	adc	r25, r1
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret
    1284:	e1 e0       	ldi	r30, 0x01	; 1
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	bb 1f       	adc	r27, r27
    128e:	62 17       	cp	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	ba 07       	cpc	r27, r26
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__divsf3_pse+0xaa>
    1298:	62 1b       	sub	r22, r18
    129a:	73 0b       	sbc	r23, r19
    129c:	84 0b       	sbc	r24, r20
    129e:	ba 0b       	sbc	r27, r26
    12a0:	ee 1f       	adc	r30, r30
    12a2:	88 f7       	brcc	.-30     	; 0x1286 <__divsf3_pse+0x90>
    12a4:	e0 95       	com	r30
    12a6:	08 95       	ret

000012a8 <__fixunssfsi>:
    12a8:	5b d0       	rcall	.+182    	; 0x1360 <__fp_splitA>
    12aa:	88 f0       	brcs	.+34     	; 0x12ce <__fixunssfsi+0x26>
    12ac:	9f 57       	subi	r25, 0x7F	; 127
    12ae:	90 f0       	brcs	.+36     	; 0x12d4 <__fixunssfsi+0x2c>
    12b0:	b9 2f       	mov	r27, r25
    12b2:	99 27       	eor	r25, r25
    12b4:	b7 51       	subi	r27, 0x17	; 23
    12b6:	a0 f0       	brcs	.+40     	; 0x12e0 <__fixunssfsi+0x38>
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <__fixunssfsi+0x46>
    12ba:	66 0f       	add	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	88 1f       	adc	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	1a f0       	brmi	.+6      	; 0x12ca <__fixunssfsi+0x22>
    12c4:	ba 95       	dec	r27
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__fixunssfsi+0x12>
    12c8:	12 c0       	rjmp	.+36     	; 0x12ee <__fixunssfsi+0x46>
    12ca:	b1 30       	cpi	r27, 0x01	; 1
    12cc:	81 f0       	breq	.+32     	; 0x12ee <__fixunssfsi+0x46>
    12ce:	62 d0       	rcall	.+196    	; 0x1394 <__fp_zero>
    12d0:	b1 e0       	ldi	r27, 0x01	; 1
    12d2:	08 95       	ret
    12d4:	5f c0       	rjmp	.+190    	; 0x1394 <__fp_zero>
    12d6:	67 2f       	mov	r22, r23
    12d8:	78 2f       	mov	r23, r24
    12da:	88 27       	eor	r24, r24
    12dc:	b8 5f       	subi	r27, 0xF8	; 248
    12de:	39 f0       	breq	.+14     	; 0x12ee <__fixunssfsi+0x46>
    12e0:	b9 3f       	cpi	r27, 0xF9	; 249
    12e2:	cc f3       	brlt	.-14     	; 0x12d6 <__fixunssfsi+0x2e>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b3 95       	inc	r27
    12ec:	d9 f7       	brne	.-10     	; 0x12e4 <__fixunssfsi+0x3c>
    12ee:	3e f4       	brtc	.+14     	; 0x12fe <__fixunssfsi+0x56>
    12f0:	90 95       	com	r25
    12f2:	80 95       	com	r24
    12f4:	70 95       	com	r23
    12f6:	61 95       	neg	r22
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	08 95       	ret

00001300 <__fp_inf>:
    1300:	97 f9       	bld	r25, 7
    1302:	9f 67       	ori	r25, 0x7F	; 127
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	08 95       	ret

0000130c <__fp_nan>:
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	08 95       	ret

00001312 <__fp_pscA>:
    1312:	00 24       	eor	r0, r0
    1314:	0a 94       	dec	r0
    1316:	16 16       	cp	r1, r22
    1318:	17 06       	cpc	r1, r23
    131a:	18 06       	cpc	r1, r24
    131c:	09 06       	cpc	r0, r25
    131e:	08 95       	ret

00001320 <__fp_pscB>:
    1320:	00 24       	eor	r0, r0
    1322:	0a 94       	dec	r0
    1324:	12 16       	cp	r1, r18
    1326:	13 06       	cpc	r1, r19
    1328:	14 06       	cpc	r1, r20
    132a:	05 06       	cpc	r0, r21
    132c:	08 95       	ret

0000132e <__fp_round>:
    132e:	09 2e       	mov	r0, r25
    1330:	03 94       	inc	r0
    1332:	00 0c       	add	r0, r0
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_round+0xc>
    1336:	88 23       	and	r24, r24
    1338:	52 f0       	brmi	.+20     	; 0x134e <__fp_round+0x20>
    133a:	bb 0f       	add	r27, r27
    133c:	40 f4       	brcc	.+16     	; 0x134e <__fp_round+0x20>
    133e:	bf 2b       	or	r27, r31
    1340:	11 f4       	brne	.+4      	; 0x1346 <__fp_round+0x18>
    1342:	60 ff       	sbrs	r22, 0
    1344:	04 c0       	rjmp	.+8      	; 0x134e <__fp_round+0x20>
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	8f 4f       	sbci	r24, 0xFF	; 255
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	08 95       	ret

00001350 <__fp_split3>:
    1350:	57 fd       	sbrc	r21, 7
    1352:	90 58       	subi	r25, 0x80	; 128
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	59 f0       	breq	.+22     	; 0x1370 <__fp_splitA+0x10>
    135a:	5f 3f       	cpi	r21, 0xFF	; 255
    135c:	71 f0       	breq	.+28     	; 0x137a <__fp_splitA+0x1a>
    135e:	47 95       	ror	r20

00001360 <__fp_splitA>:
    1360:	88 0f       	add	r24, r24
    1362:	97 fb       	bst	r25, 7
    1364:	99 1f       	adc	r25, r25
    1366:	61 f0       	breq	.+24     	; 0x1380 <__fp_splitA+0x20>
    1368:	9f 3f       	cpi	r25, 0xFF	; 255
    136a:	79 f0       	breq	.+30     	; 0x138a <__fp_splitA+0x2a>
    136c:	87 95       	ror	r24
    136e:	08 95       	ret
    1370:	12 16       	cp	r1, r18
    1372:	13 06       	cpc	r1, r19
    1374:	14 06       	cpc	r1, r20
    1376:	55 1f       	adc	r21, r21
    1378:	f2 cf       	rjmp	.-28     	; 0x135e <__fp_split3+0xe>
    137a:	46 95       	lsr	r20
    137c:	f1 df       	rcall	.-30     	; 0x1360 <__fp_splitA>
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <__fp_splitA+0x30>
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	18 06       	cpc	r1, r24
    1386:	99 1f       	adc	r25, r25
    1388:	f1 cf       	rjmp	.-30     	; 0x136c <__fp_splitA+0xc>
    138a:	86 95       	lsr	r24
    138c:	71 05       	cpc	r23, r1
    138e:	61 05       	cpc	r22, r1
    1390:	08 94       	sec
    1392:	08 95       	ret

00001394 <__fp_zero>:
    1394:	e8 94       	clt

00001396 <__fp_szero>:
    1396:	bb 27       	eor	r27, r27
    1398:	66 27       	eor	r22, r22
    139a:	77 27       	eor	r23, r23
    139c:	cb 01       	movw	r24, r22
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <__mulsf3>:
    13a2:	0b d0       	rcall	.+22     	; 0x13ba <__mulsf3x>
    13a4:	c4 cf       	rjmp	.-120    	; 0x132e <__fp_round>
    13a6:	b5 df       	rcall	.-150    	; 0x1312 <__fp_pscA>
    13a8:	28 f0       	brcs	.+10     	; 0x13b4 <__mulsf3+0x12>
    13aa:	ba df       	rcall	.-140    	; 0x1320 <__fp_pscB>
    13ac:	18 f0       	brcs	.+6      	; 0x13b4 <__mulsf3+0x12>
    13ae:	95 23       	and	r25, r21
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__mulsf3+0x12>
    13b2:	a6 cf       	rjmp	.-180    	; 0x1300 <__fp_inf>
    13b4:	ab cf       	rjmp	.-170    	; 0x130c <__fp_nan>
    13b6:	11 24       	eor	r1, r1
    13b8:	ee cf       	rjmp	.-36     	; 0x1396 <__fp_szero>

000013ba <__mulsf3x>:
    13ba:	ca df       	rcall	.-108    	; 0x1350 <__fp_split3>
    13bc:	a0 f3       	brcs	.-24     	; 0x13a6 <__mulsf3+0x4>

000013be <__mulsf3_pse>:
    13be:	95 9f       	mul	r25, r21
    13c0:	d1 f3       	breq	.-12     	; 0x13b6 <__mulsf3+0x14>
    13c2:	95 0f       	add	r25, r21
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	55 1f       	adc	r21, r21
    13c8:	62 9f       	mul	r22, r18
    13ca:	f0 01       	movw	r30, r0
    13cc:	72 9f       	mul	r23, r18
    13ce:	bb 27       	eor	r27, r27
    13d0:	f0 0d       	add	r31, r0
    13d2:	b1 1d       	adc	r27, r1
    13d4:	63 9f       	mul	r22, r19
    13d6:	aa 27       	eor	r26, r26
    13d8:	f0 0d       	add	r31, r0
    13da:	b1 1d       	adc	r27, r1
    13dc:	aa 1f       	adc	r26, r26
    13de:	64 9f       	mul	r22, r20
    13e0:	66 27       	eor	r22, r22
    13e2:	b0 0d       	add	r27, r0
    13e4:	a1 1d       	adc	r26, r1
    13e6:	66 1f       	adc	r22, r22
    13e8:	82 9f       	mul	r24, r18
    13ea:	22 27       	eor	r18, r18
    13ec:	b0 0d       	add	r27, r0
    13ee:	a1 1d       	adc	r26, r1
    13f0:	62 1f       	adc	r22, r18
    13f2:	73 9f       	mul	r23, r19
    13f4:	b0 0d       	add	r27, r0
    13f6:	a1 1d       	adc	r26, r1
    13f8:	62 1f       	adc	r22, r18
    13fa:	83 9f       	mul	r24, r19
    13fc:	a0 0d       	add	r26, r0
    13fe:	61 1d       	adc	r22, r1
    1400:	22 1f       	adc	r18, r18
    1402:	74 9f       	mul	r23, r20
    1404:	33 27       	eor	r19, r19
    1406:	a0 0d       	add	r26, r0
    1408:	61 1d       	adc	r22, r1
    140a:	23 1f       	adc	r18, r19
    140c:	84 9f       	mul	r24, r20
    140e:	60 0d       	add	r22, r0
    1410:	21 1d       	adc	r18, r1
    1412:	82 2f       	mov	r24, r18
    1414:	76 2f       	mov	r23, r22
    1416:	6a 2f       	mov	r22, r26
    1418:	11 24       	eor	r1, r1
    141a:	9f 57       	subi	r25, 0x7F	; 127
    141c:	50 40       	sbci	r21, 0x00	; 0
    141e:	8a f0       	brmi	.+34     	; 0x1442 <__mulsf3_pse+0x84>
    1420:	e1 f0       	breq	.+56     	; 0x145a <__mulsf3_pse+0x9c>
    1422:	88 23       	and	r24, r24
    1424:	4a f0       	brmi	.+18     	; 0x1438 <__mulsf3_pse+0x7a>
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	bb 1f       	adc	r27, r27
    142c:	66 1f       	adc	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	50 40       	sbci	r21, 0x00	; 0
    1436:	a9 f7       	brne	.-22     	; 0x1422 <__mulsf3_pse+0x64>
    1438:	9e 3f       	cpi	r25, 0xFE	; 254
    143a:	51 05       	cpc	r21, r1
    143c:	70 f0       	brcs	.+28     	; 0x145a <__mulsf3_pse+0x9c>
    143e:	60 cf       	rjmp	.-320    	; 0x1300 <__fp_inf>
    1440:	aa cf       	rjmp	.-172    	; 0x1396 <__fp_szero>
    1442:	5f 3f       	cpi	r21, 0xFF	; 255
    1444:	ec f3       	brlt	.-6      	; 0x1440 <__mulsf3_pse+0x82>
    1446:	98 3e       	cpi	r25, 0xE8	; 232
    1448:	dc f3       	brlt	.-10     	; 0x1440 <__mulsf3_pse+0x82>
    144a:	86 95       	lsr	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b7 95       	ror	r27
    1452:	f7 95       	ror	r31
    1454:	e7 95       	ror	r30
    1456:	9f 5f       	subi	r25, 0xFF	; 255
    1458:	c1 f7       	brne	.-16     	; 0x144a <__mulsf3_pse+0x8c>
    145a:	fe 2b       	or	r31, r30
    145c:	88 0f       	add	r24, r24
    145e:	91 1d       	adc	r25, r1
    1460:	96 95       	lsr	r25
    1462:	87 95       	ror	r24
    1464:	97 f9       	bld	r25, 7
    1466:	08 95       	ret

00001468 <__divmodhi4>:
    1468:	97 fb       	bst	r25, 7
    146a:	07 2e       	mov	r0, r23
    146c:	16 f4       	brtc	.+4      	; 0x1472 <__divmodhi4+0xa>
    146e:	00 94       	com	r0
    1470:	07 d0       	rcall	.+14     	; 0x1480 <__divmodhi4_neg1>
    1472:	77 fd       	sbrc	r23, 7
    1474:	09 d0       	rcall	.+18     	; 0x1488 <__divmodhi4_neg2>
    1476:	0e 94 84 0a 	call	0x1508	; 0x1508 <__udivmodhi4>
    147a:	07 fc       	sbrc	r0, 7
    147c:	05 d0       	rcall	.+10     	; 0x1488 <__divmodhi4_neg2>
    147e:	3e f4       	brtc	.+14     	; 0x148e <__divmodhi4_exit>

00001480 <__divmodhi4_neg1>:
    1480:	90 95       	com	r25
    1482:	81 95       	neg	r24
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	08 95       	ret

00001488 <__divmodhi4_neg2>:
    1488:	70 95       	com	r23
    148a:	61 95       	neg	r22
    148c:	7f 4f       	sbci	r23, 0xFF	; 255

0000148e <__divmodhi4_exit>:
    148e:	08 95       	ret

00001490 <__udivmodsi4>:
    1490:	a1 e2       	ldi	r26, 0x21	; 33
    1492:	1a 2e       	mov	r1, r26
    1494:	aa 1b       	sub	r26, r26
    1496:	bb 1b       	sub	r27, r27
    1498:	fd 01       	movw	r30, r26
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <__udivmodsi4_ep>

0000149c <__udivmodsi4_loop>:
    149c:	aa 1f       	adc	r26, r26
    149e:	bb 1f       	adc	r27, r27
    14a0:	ee 1f       	adc	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	a2 17       	cp	r26, r18
    14a6:	b3 07       	cpc	r27, r19
    14a8:	e4 07       	cpc	r30, r20
    14aa:	f5 07       	cpc	r31, r21
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__udivmodsi4_ep>
    14ae:	a2 1b       	sub	r26, r18
    14b0:	b3 0b       	sbc	r27, r19
    14b2:	e4 0b       	sbc	r30, r20
    14b4:	f5 0b       	sbc	r31, r21

000014b6 <__udivmodsi4_ep>:
    14b6:	66 1f       	adc	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	1a 94       	dec	r1
    14c0:	69 f7       	brne	.-38     	; 0x149c <__udivmodsi4_loop>
    14c2:	60 95       	com	r22
    14c4:	70 95       	com	r23
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	bd 01       	movw	r22, r26
    14d0:	cf 01       	movw	r24, r30
    14d2:	08 95       	ret

000014d4 <__umulhisi3>:
    14d4:	a2 9f       	mul	r26, r18
    14d6:	b0 01       	movw	r22, r0
    14d8:	b3 9f       	mul	r27, r19
    14da:	c0 01       	movw	r24, r0
    14dc:	a3 9f       	mul	r26, r19
    14de:	70 0d       	add	r23, r0
    14e0:	81 1d       	adc	r24, r1
    14e2:	11 24       	eor	r1, r1
    14e4:	91 1d       	adc	r25, r1
    14e6:	b2 9f       	mul	r27, r18
    14e8:	70 0d       	add	r23, r0
    14ea:	81 1d       	adc	r24, r1
    14ec:	11 24       	eor	r1, r1
    14ee:	91 1d       	adc	r25, r1
    14f0:	08 95       	ret

000014f2 <__muluhisi3>:
    14f2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__umulhisi3>
    14f6:	a5 9f       	mul	r26, r21
    14f8:	90 0d       	add	r25, r0
    14fa:	b4 9f       	mul	r27, r20
    14fc:	90 0d       	add	r25, r0
    14fe:	a4 9f       	mul	r26, r20
    1500:	80 0d       	add	r24, r0
    1502:	91 1d       	adc	r25, r1
    1504:	11 24       	eor	r1, r1
    1506:	08 95       	ret

00001508 <__udivmodhi4>:
    1508:	aa 1b       	sub	r26, r26
    150a:	bb 1b       	sub	r27, r27
    150c:	51 e1       	ldi	r21, 0x11	; 17
    150e:	07 c0       	rjmp	.+14     	; 0x151e <__udivmodhi4_ep>

00001510 <__udivmodhi4_loop>:
    1510:	aa 1f       	adc	r26, r26
    1512:	bb 1f       	adc	r27, r27
    1514:	a6 17       	cp	r26, r22
    1516:	b7 07       	cpc	r27, r23
    1518:	10 f0       	brcs	.+4      	; 0x151e <__udivmodhi4_ep>
    151a:	a6 1b       	sub	r26, r22
    151c:	b7 0b       	sbc	r27, r23

0000151e <__udivmodhi4_ep>:
    151e:	88 1f       	adc	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	5a 95       	dec	r21
    1524:	a9 f7       	brne	.-22     	; 0x1510 <__udivmodhi4_loop>
    1526:	80 95       	com	r24
    1528:	90 95       	com	r25
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	08 95       	ret

00001530 <strcpy>:
    1530:	fb 01       	movw	r30, r22
    1532:	dc 01       	movw	r26, r24
    1534:	01 90       	ld	r0, Z+
    1536:	0d 92       	st	X+, r0
    1538:	00 20       	and	r0, r0
    153a:	e1 f7       	brne	.-8      	; 0x1534 <strcpy+0x4>
    153c:	08 95       	ret

0000153e <_exit>:
    153e:	f8 94       	cli

00001540 <__stop_program>:
    1540:	ff cf       	rjmp	.-2      	; 0x1540 <__stop_program>
