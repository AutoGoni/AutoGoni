
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001c12  00001ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000057b  0080025e  0080025e  00001e04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000211a  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a3  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a58  00000000  00000000  000048f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00005350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ba  00000000  00000000  0000579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ab6  00000000  00000000  00006056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00007b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e2 e1       	ldi	r30, 0x12	; 18
     17c:	fc e1       	ldi	r31, 0x1C	; 28
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	ae 35       	cpi	r26, 0x5E	; 94
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	ae e5       	ldi	r26, 0x5E	; 94
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a9 3d       	cpi	r26, 0xD9	; 217
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 f1 06 	call	0xde2	; 0xde2 <main>
     19e:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:
     1a6:	00 91 9f 06 	lds	r16, 0x069F
     1aa:	03 95       	inc	r16
     1ac:	00 93 9f 06 	sts	0x069F, r16
     1b0:	e0 91 b4 06 	lds	r30, 0x06B4
     1b4:	f0 91 b5 06 	lds	r31, 0x06B5
     1b8:	c1 91       	ld	r28, Z+
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	d1 91       	ld	r29, Z+
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
     204:	08 95       	ret

00000206 <OSCtxSw>:
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16
     24a:	e0 91 c2 06 	lds	r30, 0x06C2
     24e:	f0 91 c3 06 	lds	r31, 0x06C3
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	c1 93       	st	Z+, r28
     256:	de b7       	in	r29, 0x3e	; 62
     258:	d1 93       	st	Z+, r29
     25a:	00 91 a4 06 	lds	r16, 0x06A4
     25e:	00 93 a5 06 	sts	0x06A5, r16
     262:	e0 91 b4 06 	lds	r30, 0x06B4
     266:	f0 91 b5 06 	lds	r31, 0x06B5
     26a:	e0 93 c2 06 	sts	0x06C2, r30
     26e:	f0 93 c3 06 	sts	0x06C3, r31
     272:	c1 91       	ld	r28, Z+
     274:	cd bf       	out	0x3d, r28	; 61
     276:	d1 91       	ld	r29, Z+
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
     2c0:	00 91 a4 06 	lds	r16, 0x06A4
     2c4:	00 93 a5 06 	sts	0x06A5, r16
     2c8:	e0 91 b4 06 	lds	r30, 0x06B4
     2cc:	f0 91 b5 06 	lds	r31, 0x06B5
     2d0:	e0 93 c2 06 	sts	0x06C2, r30
     2d4:	f0 93 c3 06 	sts	0x06C3, r31
     2d8:	c1 91       	ld	r28, Z+
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	d1 91       	ld	r29, Z+
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	08 95       	ret

00000326 <OSTickISR>:
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16
     36c:	00 91 c1 06 	lds	r16, 0x06C1
     370:	03 95       	inc	r16
     372:	00 93 c1 06 	sts	0x06C1, r16
     376:	01 30       	cpi	r16, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e0 91 c2 06 	lds	r30, 0x06C2
     382:	f0 91 c3 06 	lds	r31, 0x06C3
     386:	c1 93       	st	Z+, r28
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
     38a:	0d ee       	ldi	r16, 0xED	; 237
     38c:	06 bd       	out	0x26, r16	; 38
     38e:	78 94       	sei
     390:	0e 94 67 09 	call	0x12ce	; 0x12ce <OSTimeTick>
     394:	00 00       	nop
     396:	0e 94 51 08 	call	0x10a2	; 0x10a2 <OSIntExit>
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
     3de:	08 95       	ret

000003e0 <WatchDogReset>:
     3e0:	a8 95       	wdr
     3e2:	08 95       	ret

000003e4 <SerTxISR>:
     3e4:	08 95       	ret

000003e6 <TaskStart>:
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <OSStatInit>
     3ea:	ec ed       	ldi	r30, 0xDC	; 220
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	ac e1       	ldi	r26, 0x1C	; 28
     3f0:	b4 e0       	ldi	r27, 0x04	; 4
     3f2:	8c e1       	ldi	r24, 0x1C	; 28
     3f4:	95 e0       	ldi	r25, 0x05	; 5

	for(i=0;i<NUM_MEAS;i++){
		measArray[i] = 0;
     3f6:	11 92       	st	Z+, r1
     3f8:	11 92       	st	Z+, r1
		passiveArray[i] = 0;
     3fa:	1d 92       	st	X+, r1
     3fc:	1d 92       	st	X+, r1
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */

	for(i=0;i<NUM_MEAS;i++){
     3fe:	e8 17       	cp	r30, r24
     400:	f9 07       	cpc	r31, r25
     402:	c9 f7       	brne	.-14     	; 0x3f6 <TaskStart+0x10>
		measArray[i] = 0;
		passiveArray[i] = 0;
	}
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	4d e1       	ldi	r20, 0x1D	; 29
     408:	56 e0       	ldi	r21, 0x06	; 6
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 eb       	ldi	r24, 0xB0	; 176
     410:	95 e0       	ldi	r25, 0x05	; 5
     412:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     416:	24 e1       	ldi	r18, 0x14	; 20
     418:	4d e9       	ldi	r20, 0x9D	; 157
     41a:	55 e0       	ldi	r21, 0x05	; 5
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	8f e4       	ldi	r24, 0x4F	; 79
     422:	96 e0       	ldi	r25, 0x06	; 6
     424:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     428:	80 e9       	ldi	r24, 0x90	; 144
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     430:	61 e0       	ldi	r22, 0x01	; 1
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	80 91 1a 04 	lds	r24, 0x041A
     438:	90 91 1b 04 	lds	r25, 0x041B
     43c:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     440:	80 e9       	ldi	r24, 0x90	; 144
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     448:	66 e2       	ldi	r22, 0x26	; 38
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	80 91 1a 04 	lds	r24, 0x041A
     450:	90 91 1b 04 	lds	r25, 0x041B
     454:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     458:	2f e0       	ldi	r18, 0x0F	; 15
     45a:	49 e1       	ldi	r20, 0x19	; 25
     45c:	54 e0       	ldi	r21, 0x04	; 4
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	8b e4       	ldi	r24, 0x4B	; 75
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     46a:	2b e0       	ldi	r18, 0x0B	; 11
     46c:	4b ed       	ldi	r20, 0xDB	; 219
     46e:	54 e0       	ldi	r21, 0x04	; 4
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 e3       	ldi	r24, 0x30	; 48
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     47c:	10 92 a8 06 	sts	0x06A8, r1
     480:	10 92 a9 06 	sts	0x06A9, r1
     484:	10 92 aa 06 	sts	0x06AA, r1
     488:	10 92 ab 06 	sts	0x06AB, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     494:	f3 cf       	rjmp	.-26     	; 0x47c <TaskStart+0x96>

00000496 <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	a3 97       	sbiw	r28, 0x23	; 35
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	INT8U positionOutput;
	INT8U notFound = 255;
	INT16U unitsPer100Degrees = 281;
	INT16U outputAngle = 0;

	TextMessage[0]  = '\r';
     4aa:	8d e0       	ldi	r24, 0x0D	; 13
     4ac:	89 83       	std	Y+1, r24	; 0x01
	TextMessage[1]  = '\r';
     4ae:	8a 83       	std	Y+2, r24	; 0x02
	TextMessage[2]  = 'M';
     4b0:	8d e4       	ldi	r24, 0x4D	; 77
     4b2:	8b 83       	std	Y+3, r24	; 0x03
	TextMessage[3]  = 'E';
     4b4:	85 e4       	ldi	r24, 0x45	; 69
     4b6:	8c 83       	std	Y+4, r24	; 0x04
	TextMessage[4]  = 'A';
     4b8:	81 e4       	ldi	r24, 0x41	; 65
     4ba:	8d 83       	std	Y+5, r24	; 0x05
	TextMessage[5]  = 'S';
     4bc:	83 e5       	ldi	r24, 0x53	; 83
     4be:	8e 83       	std	Y+6, r24	; 0x06
	TextMessage[6]  = '#';
     4c0:	83 e2       	ldi	r24, 0x23	; 35
     4c2:	8f 83       	std	Y+7, r24	; 0x07
	TextMessage[9] = ':';
     4c4:	8a e3       	ldi	r24, 0x3A	; 58
     4c6:	8a 87       	std	Y+10, r24	; 0x0a
	TextMessage[10] = ' ';
     4c8:	80 e2       	ldi	r24, 0x20	; 32
     4ca:	8b 87       	std	Y+11, r24	; 0x0b
	TextMessage[11] = ' ';
     4cc:	8c 87       	std	Y+12, r24	; 0x0c
	TextMessage[12] = ' ';
     4ce:	8d 87       	std	Y+13, r24	; 0x0d
	TextMessage[13] = ' ';
     4d0:	8e 87       	std	Y+14, r24	; 0x0e
    for (;;) {
	if(!TransmitTopLine){
	OSTimeDly(0.5*OS_TICKS_PER_SEC);
	}
	else{
		TextMessage[7] = ' ';
     4d2:	68 94       	set
     4d4:	aa 24       	eor	r10, r10
     4d6:	a5 f8       	bld	r10, 5
		TextMessage[8] = ' ';

		TextMessage[14] = ' ';
		TextMessage[15] = ' ';
		TextMessage[16] = ' ';
		TextMessage[17] = (char)223;
     4d8:	0f 2e       	mov	r0, r31
     4da:	ff ed       	ldi	r31, 0xDF	; 223
     4dc:	9f 2e       	mov	r9, r31
     4de:	f0 2d       	mov	r31, r0
				char* p = &TextMessage[14];
				int shifter = outputAngle;
				char const digit[] = "0123456789";
				do{ //Move to where representation ends
					++p;
					shifter = shifter/10;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	fa e0       	ldi	r31, 0x0A	; 10
     4e4:	ef 2e       	mov	r14, r31
     4e6:	f1 2c       	mov	r15, r1
     4e8:	f0 2d       	mov	r31, r0
					++p;
					shifter = shifter/10;
				}while(shifter);

			do{ //Move back, inserting digits as you go
				*--p = digit[tmp%10];
     4ea:	0f 2e       	mov	r0, r31
     4ec:	fd ec       	ldi	r31, 0xCD	; 205
     4ee:	bf 2e       	mov	r11, r31
     4f0:	f0 2d       	mov	r31, r0
     4f2:	71 2c       	mov	r7, r1
     4f4:	81 2c       	mov	r8, r1
			rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
			//rotaryInput = RotaryUnMapTbl[rotaryInput];
			rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
		
			if (rotaryInput != notFound){
				outputAngle = (rotaryInput * unitsPer100Degrees);
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f9 e1       	ldi	r31, 0x19	; 25
     4fa:	cf 2e       	mov	r12, r31
     4fc:	dd 24       	eor	r13, r13
     4fe:	d3 94       	inc	r13
     500:	f0 2d       	mov	r31, r0
	TextMessage[11] = ' ';
	TextMessage[12] = ' ';
	TextMessage[13] = ' ';

    for (;;) {
	if(!TransmitTopLine){
     502:	80 91 00 01 	lds	r24, 0x0100
     506:	81 11       	cpse	r24, r1
     508:	05 c0       	rjmp	.+10     	; 0x514 <AngleOutputTask+0x7e>
	OSTimeDly(0.5*OS_TICKS_PER_SEC);
     50a:	84 e6       	ldi	r24, 0x64	; 100
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     512:	f7 cf       	rjmp	.-18     	; 0x502 <AngleOutputTask+0x6c>
	}
	else{
		TextMessage[7] = ' ';
     514:	a8 86       	std	Y+8, r10	; 0x08
		TextMessage[8] = ' ';
     516:	a9 86       	std	Y+9, r10	; 0x09

		TextMessage[14] = ' ';
     518:	af 86       	std	Y+15, r10	; 0x0f
		TextMessage[15] = ' ';
     51a:	a8 8a       	std	Y+16, r10	; 0x10
		TextMessage[16] = ' ';
     51c:	a9 8a       	std	Y+17, r10	; 0x11
		TextMessage[17] = (char)223;
     51e:	9a 8a       	std	Y+18, r9	; 0x12
		TextMessage[18] = '\0';
     520:	1b 8a       	std	Y+19, r1	; 0x13
			// LSB PC0 (pin A0) -> PC3 (pin A3)
			//	   PD4 (pin 4)  -> PD7 (pin 7)
			rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     522:	86 b1       	in	r24, 0x06	; 6
     524:	e9 b1       	in	r30, 0x09	; 9
     526:	e0 7f       	andi	r30, 0xF0	; 240
     528:	8f 70       	andi	r24, 0x0F	; 15
     52a:	e8 2b       	or	r30, r24
			//rotaryInput = RotaryUnMapTbl[rotaryInput];
			rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	e8 59       	subi	r30, 0x98	; 152
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	e4 91       	lpm	r30, Z
		
			if (rotaryInput != notFound){
     534:	ef 3f       	cpi	r30, 0xFF	; 255
     536:	a9 f0       	breq	.+42     	; 0x562 <AngleOutputTask+0xcc>
				outputAngle = (rotaryInput * unitsPer100Degrees);
     538:	ec 9d       	mul	r30, r12
     53a:	90 01       	movw	r18, r0
     53c:	ed 9d       	mul	r30, r13
     53e:	30 0d       	add	r19, r0
     540:	11 24       	eor	r1, r1
				outputAngle = outputAngle / 100;
     542:	36 95       	lsr	r19
     544:	27 95       	ror	r18
     546:	36 95       	lsr	r19
     548:	27 95       	ror	r18
     54a:	ab e7       	ldi	r26, 0x7B	; 123
     54c:	b4 e1       	ldi	r27, 0x14	; 20
     54e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     552:	8c 01       	movw	r16, r24
     554:	16 95       	lsr	r17
     556:	07 95       	ror	r16
				OnscreenAngle = outputAngle;
     558:	10 93 5f 02 	sts	0x025F, r17
     55c:	00 93 5e 02 	sts	0x025E, r16
     560:	02 c0       	rjmp	.+4      	; 0x566 <AngleOutputTask+0xd0>
     562:	07 2d       	mov	r16, r7
     564:	18 2d       	mov	r17, r8
			}

	/*PRINT ANGLE*/
				char* p = &TextMessage[14];
				int shifter = outputAngle;
     566:	c8 01       	movw	r24, r16
				char const digit[] = "0123456789";
     568:	2b e0       	ldi	r18, 0x0B	; 11
     56a:	eb e4       	ldi	r30, 0x4B	; 75
     56c:	f1 e0       	ldi	r31, 0x01	; 1
     56e:	de 01       	movw	r26, r28
     570:	59 96       	adiw	r26, 0x19	; 25
     572:	01 90       	ld	r0, Z+
     574:	0d 92       	st	X+, r0
     576:	2a 95       	dec	r18
     578:	e1 f7       	brne	.-8      	; 0x572 <AngleOutputTask+0xdc>
				outputAngle = outputAngle / 100;
				OnscreenAngle = outputAngle;
			}

	/*PRINT ANGLE*/
				char* p = &TextMessage[14];
     57a:	9e 01       	movw	r18, r28
     57c:	21 5f       	subi	r18, 0xF1	; 241
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
				int shifter = outputAngle;
				char const digit[] = "0123456789";
				do{ //Move to where representation ends
					++p;
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
					shifter = shifter/10;
     584:	b7 01       	movw	r22, r14
     586:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     58a:	cb 01       	movw	r24, r22
				}while(shifter);
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	c1 f7       	brne	.-16     	; 0x580 <AngleOutputTask+0xea>
     590:	f9 01       	movw	r30, r18

			do{ //Move back, inserting digits as you go
				*--p = digit[outputAngle%10];
     592:	98 01       	movw	r18, r16
     594:	ad ec       	ldi	r26, 0xCD	; 205
     596:	bc ec       	ldi	r27, 0xCC	; 204
     598:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     59c:	96 95       	lsr	r25
     59e:	87 95       	ror	r24
     5a0:	96 95       	lsr	r25
     5a2:	87 95       	ror	r24
     5a4:	96 95       	lsr	r25
     5a6:	87 95       	ror	r24
     5a8:	9c 01       	movw	r18, r24
     5aa:	22 0f       	add	r18, r18
     5ac:	33 1f       	adc	r19, r19
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	d8 01       	movw	r26, r16
     5c0:	a8 1b       	sub	r26, r24
     5c2:	b9 0b       	sbc	r27, r25
     5c4:	89 e1       	ldi	r24, 0x19	; 25
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	8c 0f       	add	r24, r28
     5ca:	9d 1f       	adc	r25, r29
     5cc:	a8 0f       	add	r26, r24
     5ce:	b9 1f       	adc	r27, r25
     5d0:	8c 91       	ld	r24, X
     5d2:	82 93       	st	-Z, r24
				outputAngle = outputAngle/10;
     5d4:	98 01       	movw	r18, r16
     5d6:	ad ec       	ldi	r26, 0xCD	; 205
     5d8:	bc ec       	ldi	r27, 0xCC	; 204
     5da:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     5de:	8c 01       	movw	r16, r24
     5e0:	16 95       	lsr	r17
     5e2:	07 95       	ror	r16
     5e4:	16 95       	lsr	r17
     5e6:	07 95       	ror	r16
     5e8:	16 95       	lsr	r17
     5ea:	07 95       	ror	r16
			}while(outputAngle);
     5ec:	01 15       	cp	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	81 f6       	brne	.-96     	; 0x592 <AngleOutputTask+0xfc>

	/*PRINT MEAS #*/
				p = &TextMessage[7];
				tmp = measIndex + 1;
     5f2:	40 91 60 02 	lds	r20, 0x0260
     5f6:	4f 5f       	subi	r20, 0xFF	; 255
				shifter = tmp;
     5f8:	84 2f       	mov	r24, r20
     5fa:	90 e0       	ldi	r25, 0x00	; 0
				*--p = digit[outputAngle%10];
				outputAngle = outputAngle/10;
			}while(outputAngle);

	/*PRINT MEAS #*/
				p = &TextMessage[7];
     5fc:	9e 01       	movw	r18, r28
     5fe:	28 5f       	subi	r18, 0xF8	; 248
     600:	3f 4f       	sbci	r19, 0xFF	; 255
				tmp = measIndex + 1;
				shifter = tmp;
				do{ //Move to where representation ends
					++p;
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	3f 4f       	sbci	r19, 0xFF	; 255
					shifter = shifter/10;
     606:	b7 01       	movw	r22, r14
     608:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     60c:	cb 01       	movw	r24, r22
				}while(shifter);
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	c1 f7       	brne	.-16     	; 0x602 <AngleOutputTask+0x16c>
     612:	f9 01       	movw	r30, r18

			do{ //Move back, inserting digits as you go
				*--p = digit[tmp%10];
     614:	4b 9d       	mul	r20, r11
     616:	81 2d       	mov	r24, r1
     618:	11 24       	eor	r1, r1
     61a:	86 95       	lsr	r24
     61c:	86 95       	lsr	r24
     61e:	86 95       	lsr	r24
     620:	98 2f       	mov	r25, r24
     622:	99 0f       	add	r25, r25
     624:	29 2f       	mov	r18, r25
     626:	22 0f       	add	r18, r18
     628:	22 0f       	add	r18, r18
     62a:	92 0f       	add	r25, r18
     62c:	49 1b       	sub	r20, r25
     62e:	a9 e1       	ldi	r26, 0x19	; 25
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ac 0f       	add	r26, r28
     634:	bd 1f       	adc	r27, r29
     636:	a4 0f       	add	r26, r20
     638:	b1 1d       	adc	r27, r1
     63a:	9c 91       	ld	r25, X
     63c:	92 93       	st	-Z, r25
				tmp = tmp/10;
     63e:	48 2f       	mov	r20, r24
			}while(tmp);
     640:	81 11       	cpse	r24, r1
     642:	e8 cf       	rjmp	.-48     	; 0x614 <AngleOutputTask+0x17e>
		
			OSMboxPost(SerialTxMBox, (void *)&TextMessage);
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 91 1a 04 	lds	r24, 0x041A
     64e:	90 91 1b 04 	lds	r25, 0x041B
     652:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>

					
			OSTimeDly(0.5*OS_TICKS_PER_SEC);	// relinquish CPU
     656:	84 e6       	ldi	r24, 0x64	; 100
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     65e:	51 cf       	rjmp	.-350    	; 0x502 <AngleOutputTask+0x6c>

00000660 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	eb 97       	sbiw	r28, 0x3b	; 59
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp8;
	INT8U i;
	
				char* p;
				int shifter;
				char const digit[] = "0123456789";
     674:	8b e0       	ldi	r24, 0x0B	; 11
     676:	eb e4       	ldi	r30, 0x4B	; 75
     678:	f1 e0       	ldi	r31, 0x01	; 1
     67a:	de 01       	movw	r26, r28
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	01 90       	ld	r0, Z+
     680:	0d 92       	st	X+, r0
     682:	8a 95       	dec	r24
     684:	e1 f7       	brne	.-8      	; 0x67e <TimerTask+0x1e>
	
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	char  OUTPUTBUFFER[TRANSMIT_BUFFER_SIZE];

		TextMessage[0]  = '\r';
     686:	8d e0       	ldi	r24, 0x0D	; 13
     688:	8c 87       	std	Y+12, r24	; 0x0c
		TextMessage[1]  = '\n';
     68a:	8a e0       	ldi	r24, 0x0A	; 10
     68c:	8d 87       	std	Y+13, r24	; 0x0d
		TextMessage[2]  = 'A';
     68e:	21 e4       	ldi	r18, 0x41	; 65
     690:	2e 87       	std	Y+14, r18	; 0x0e
		TextMessage[3]  = 'C';
     692:	83 e4       	ldi	r24, 0x43	; 67
     694:	8f 87       	std	Y+15, r24	; 0x0f
		TextMessage[4]  = 'T';
     696:	84 e5       	ldi	r24, 0x54	; 84
     698:	88 8b       	std	Y+16, r24	; 0x10
		TextMessage[5]  = ':';
     69a:	9a e3       	ldi	r25, 0x3A	; 58
     69c:	99 8b       	std	Y+17, r25	; 0x11

		TextMessage[9]  = ' ';
     69e:	80 e2       	ldi	r24, 0x20	; 32
     6a0:	8d 8b       	std	Y+21, r24	; 0x15
		TextMessage[10]  = 'P';
     6a2:	30 e5       	ldi	r19, 0x50	; 80
     6a4:	3e 8b       	std	Y+22, r19	; 0x16
		TextMessage[11]  = 'A';
     6a6:	2f 8b       	std	Y+23, r18	; 0x17
		TextMessage[12]  = 'S';
     6a8:	23 e5       	ldi	r18, 0x53	; 83
     6aa:	28 8f       	std	Y+24, r18	; 0x18
		TextMessage[13]  = ':';
     6ac:	99 8f       	std	Y+25, r25	; 0x19
		TextMessage[17]  = ' ';
     6ae:	8d 8f       	std	Y+29, r24	; 0x1d
		TextMessage[18] = '\0';
     6b0:	1e 8e       	std	Y+30, r1	; 0x1e
	OSTimeDly (0.1*OS_TICKS_PER_SEC);
     6b2:	84 e1       	ldi	r24, 0x14	; 20
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
			p = &OUTPUTBUFFER[0];
			shifter = i;
			tmp16 = shifter;
			do{ //Move to where representation ends
				++p;
				shifter = shifter/10;
     6ba:	0f 2e       	mov	r0, r31
     6bc:	fa e0       	ldi	r31, 0x0A	; 10
     6be:	af 2e       	mov	r10, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	b1 2c       	mov	r11, r1
     6c4:	6a 2c       	mov	r6, r10
     6c6:	5b 2c       	mov	r5, r11
		TextMessage[13]  = ':';
		TextMessage[17]  = ' ';
		TextMessage[18] = '\0';
	OSTimeDly (0.1*OS_TICKS_PER_SEC);
    for (;;) {
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
     6c8:	88 e2       	ldi	r24, 0x28	; 40
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
		TextMessage[6]  = ' ';
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	8a 8b       	std	Y+18, r24	; 0x12
		TextMessage[7]  = ' ';
     6d4:	8b 8b       	std	Y+19, r24	; 0x13
		TextMessage[8]  = ' ';
     6d6:	8c 8b       	std	Y+20, r24	; 0x14
		TextMessage[14]  = ' ';
     6d8:	8a 8f       	std	Y+26, r24	; 0x1a
		TextMessage[15]  = ' ';
     6da:	8b 8f       	std	Y+27, r24	; 0x1b
		TextMessage[16]  = ' ';
     6dc:	8c 8f       	std	Y+28, r24	; 0x1c
		
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
     6de:	13 b1       	in	r17, 0x03	; 3
     6e0:	17 70       	andi	r17, 0x07	; 7
		if(ButtonsInput == TOP_BUTTON_ONLY){
     6e2:	12 30       	cpi	r17, 0x02	; 2
     6e4:	61 f4       	brne	.+24     	; 0x6fe <TimerTask+0x9e>
			if (measIndex < NUM_MEAS-1){
     6e6:	80 91 60 02 	lds	r24, 0x0260
     6ea:	8f 31       	cpi	r24, 0x1F	; 31
     6ec:	80 f5       	brcc	.+96     	; 0x74e <TimerTask+0xee>
				measIndex++;
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 93 60 02 	sts	0x0260, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     6f4:	88 e2       	ldi	r24, 0x28	; 40
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     6fc:	28 c0       	rjmp	.+80     	; 0x74e <TimerTask+0xee>
			}
		}
		if(ButtonsInput == BOTTOM_BUTTON_ONLY){
     6fe:	11 30       	cpi	r17, 0x01	; 1
     700:	61 f4       	brne	.+24     	; 0x71a <TimerTask+0xba>
			if(measIndex > 0){
     702:	80 91 60 02 	lds	r24, 0x0260
     706:	88 23       	and	r24, r24
     708:	b1 f1       	breq	.+108    	; 0x776 <TimerTask+0x116>
				measIndex--;
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	80 93 60 02 	sts	0x0260, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     710:	88 e2       	ldi	r24, 0x28	; 40
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     718:	2e c0       	rjmp	.+92     	; 0x776 <TimerTask+0x116>
			}
		}
		if(ButtonsInput == MIDDLE_BUTTON_ONLY){
     71a:	14 30       	cpi	r17, 0x04	; 4
     71c:	c1 f4       	brne	.+48     	; 0x74e <TimerTask+0xee>
			measArray[measIndex] = OnscreenAngle;
     71e:	20 91 60 02 	lds	r18, 0x0260
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	80 91 5e 02 	lds	r24, 0x025E
     728:	90 91 5f 02 	lds	r25, 0x025F
     72c:	22 0f       	add	r18, r18
     72e:	33 1f       	adc	r19, r19
     730:	f9 01       	movw	r30, r18
     732:	e4 52       	subi	r30, 0x24	; 36
     734:	fb 4f       	sbci	r31, 0xFB	; 251
     736:	91 83       	std	Z+1, r25	; 0x01
     738:	80 83       	st	Z, r24
			passiveArray[measIndex] = OnscreenAngle;
     73a:	f9 01       	movw	r30, r18
     73c:	e4 5e       	subi	r30, 0xE4	; 228
     73e:	fb 4f       	sbci	r31, 0xFB	; 251
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     744:	88 e2       	ldi	r24, 0x28	; 40
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     74c:	28 c0       	rjmp	.+80     	; 0x79e <TimerTask+0x13e>
		}
		if(ButtonsInput == TOP_TWO_BUTTONS){
     74e:	16 30       	cpi	r17, 0x06	; 6
     750:	91 f4       	brne	.+36     	; 0x776 <TimerTask+0x116>
			measArray[measIndex] = OnscreenAngle;
     752:	e0 91 60 02 	lds	r30, 0x0260
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	e4 52       	subi	r30, 0x24	; 36
     75e:	fb 4f       	sbci	r31, 0xFB	; 251
     760:	80 91 5e 02 	lds	r24, 0x025E
     764:	90 91 5f 02 	lds	r25, 0x025F
     768:	91 83       	std	Z+1, r25	; 0x01
     76a:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     76c:	88 e2       	ldi	r24, 0x28	; 40
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     774:	24 c0       	rjmp	.+72     	; 0x7be <TimerTask+0x15e>
		}
		if(ButtonsInput == BUTTOM_TWO_BUTTONS){
     776:	15 30       	cpi	r17, 0x05	; 5
     778:	91 f4       	brne	.+36     	; 0x79e <TimerTask+0x13e>
			passiveArray[measIndex] = OnscreenAngle;
     77a:	e0 91 60 02 	lds	r30, 0x0260
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e4 5e       	subi	r30, 0xE4	; 228
     786:	fb 4f       	sbci	r31, 0xFB	; 251
     788:	80 91 5e 02 	lds	r24, 0x025E
     78c:	90 91 5f 02 	lds	r25, 0x025F
     790:	91 83       	std	Z+1, r25	; 0x01
     792:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     794:	88 e2       	ldi	r24, 0x28	; 40
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     79c:	46 c1       	rjmp	.+652    	; 0xa2a <__stack+0x12b>
		}
		if(ButtonsInput == TOP_AND_BOTTOM_BUTTONS){
     79e:	13 30       	cpi	r17, 0x03	; 3
     7a0:	71 f4       	brne	.+28     	; 0x7be <TimerTask+0x15e>
     7a2:	ec ed       	ldi	r30, 0xDC	; 220
     7a4:	f4 e0       	ldi	r31, 0x04	; 4
     7a6:	ac e1       	ldi	r26, 0x1C	; 28
     7a8:	b4 e0       	ldi	r27, 0x04	; 4
     7aa:	8c e1       	ldi	r24, 0x1C	; 28
     7ac:	95 e0       	ldi	r25, 0x05	; 5
				for(i=0;i<NUM_MEAS;i++){
				measArray[i] = 0;
     7ae:	11 92       	st	Z+, r1
     7b0:	11 92       	st	Z+, r1
				passiveArray[i] = 0;
     7b2:	1d 92       	st	X+, r1
     7b4:	1d 92       	st	X+, r1
		if(ButtonsInput == BUTTOM_TWO_BUTTONS){
			passiveArray[measIndex] = OnscreenAngle;
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
		}
		if(ButtonsInput == TOP_AND_BOTTOM_BUTTONS){
				for(i=0;i<NUM_MEAS;i++){
     7b6:	e8 17       	cp	r30, r24
     7b8:	f9 07       	cpc	r31, r25
     7ba:	c9 f7       	brne	.-14     	; 0x7ae <TimerTask+0x14e>
     7bc:	36 c1       	rjmp	.+620    	; 0xa2a <__stack+0x12b>
				measArray[i] = 0;
				passiveArray[i] = 0;
			}
		}
		
		if(ButtonsInput == ALL_3_BUTTONS){
     7be:	17 30       	cpi	r17, 0x07	; 7
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <TimerTask+0x164>
     7c2:	33 c1       	rjmp	.+614    	; 0xa2a <__stack+0x12b>
			TransmitTopLine = 0;	//stop the top line from transmitting!
     7c4:	10 92 00 01 	sts	0x0100, r1

/*Send STart String SSS*/
			OSTimeDly(1*OS_TICKS_PER_SEC);
     7c8:	88 ec       	ldi	r24, 0xC8	; 200
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
			OUTPUTBUFFER[0] ='S';
     7d0:	83 e5       	ldi	r24, 0x53	; 83
     7d2:	8c a3       	std	Y+36, r24	; 0x24
			OUTPUTBUFFER[1]= 'S';
     7d4:	8d a3       	std	Y+37, r24	; 0x25
			OUTPUTBUFFER[2]='S';
     7d6:	8e a3       	std	Y+38, r24	; 0x26
			OUTPUTBUFFER[3]='\n';
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	8f a3       	std	Y+39, r24	; 0x27
			OUTPUTBUFFER[4]='\0';
     7dc:	18 a6       	std	Y+40, r1	; 0x28
			OSMboxPost(SerialTxMBox, (void*)OUTPUTBUFFER);
     7de:	be 01       	movw	r22, r28
     7e0:	6c 5d       	subi	r22, 0xDC	; 220
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	80 91 1a 04 	lds	r24, 0x041A
     7e8:	90 91 1b 04 	lds	r25, 0x041B
     7ec:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>
			OSTimeDly(1*OS_TICKS_PER_SEC);
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     7f8:	0f 2e       	mov	r0, r31
     7fa:	fc e1       	ldi	r31, 0x1C	; 28
     7fc:	cf 2e       	mov	r12, r31
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	df 2e       	mov	r13, r31
     802:	f0 2d       	mov	r31, r0
     804:	0f 2e       	mov	r0, r31
     806:	fc ed       	ldi	r31, 0xDC	; 220
     808:	ef 2e       	mov	r14, r31
     80a:	f4 e0       	ldi	r31, 0x04	; 4
     80c:	ff 2e       	mov	r15, r31
     80e:	f0 2d       	mov	r31, r0
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0

/*Send Measurements*/
			for(i=0;i<NUM_MEAS;i++){
				OUTPUTBUFFER[0]=' ';
     814:	68 94       	set
     816:	99 24       	eor	r9, r9
     818:	95 f8       	bld	r9, 5
				OUTPUTBUFFER[1]=' ';
				OUTPUTBUFFER[2]='_';
     81a:	0f 2e       	mov	r0, r31
     81c:	ff e5       	ldi	r31, 0x5F	; 95
     81e:	8f 2e       	mov	r8, r31
     820:	f0 2d       	mov	r31, r0
				OUTPUTBUFFER[5]=' ';
				OUTPUTBUFFER[6]='_';
				OUTPUTBUFFER[7]=' ';
				OUTPUTBUFFER[8]=' ';
				OUTPUTBUFFER[9]=' ';
				OUTPUTBUFFER[10]='\n';
     822:	0f 2e       	mov	r0, r31
     824:	fa e0       	ldi	r31, 0x0A	; 10
     826:	7f 2e       	mov	r7, r31
     828:	f0 2d       	mov	r31, r0
			OSMboxPost(SerialTxMBox, (void*)OUTPUTBUFFER);
			OSTimeDly(1*OS_TICKS_PER_SEC);

/*Send Measurements*/
			for(i=0;i<NUM_MEAS;i++){
				OUTPUTBUFFER[0]=' ';
     82a:	9c a2       	std	Y+36, r9	; 0x24
				OUTPUTBUFFER[1]=' ';
     82c:	9d a2       	std	Y+37, r9	; 0x25
				OUTPUTBUFFER[2]='_';
     82e:	8e a2       	std	Y+38, r8	; 0x26
				OUTPUTBUFFER[3]=' ';
     830:	9f a2       	std	Y+39, r9	; 0x27
				OUTPUTBUFFER[4]=' ';
     832:	98 a6       	std	Y+40, r9	; 0x28
				OUTPUTBUFFER[5]=' ';
     834:	99 a6       	std	Y+41, r9	; 0x29
				OUTPUTBUFFER[6]='_';
     836:	8a a6       	std	Y+42, r8	; 0x2a
				OUTPUTBUFFER[7]=' ';
     838:	9b a6       	std	Y+43, r9	; 0x2b
				OUTPUTBUFFER[8]=' ';
     83a:	9c a6       	std	Y+44, r9	; 0x2c
				OUTPUTBUFFER[9]=' ';
     83c:	9d a6       	std	Y+45, r9	; 0x2d
				OUTPUTBUFFER[10]='\n';
     83e:	7e a6       	std	Y+46, r7	; 0x2e
				OUTPUTBUFFER[11]='\0';
     840:	1f a6       	std	Y+47, r1	; 0x2f

				/*PRINT ID*/
			p = &OUTPUTBUFFER[0];
			shifter = i;
     842:	c8 01       	movw	r24, r16
			tmp16 = shifter;
     844:	f8 01       	movw	r30, r16
				OUTPUTBUFFER[9]=' ';
				OUTPUTBUFFER[10]='\n';
				OUTPUTBUFFER[11]='\0';

				/*PRINT ID*/
			p = &OUTPUTBUFFER[0];
     846:	9e 01       	movw	r18, r28
     848:	2c 5d       	subi	r18, 0xDC	; 220
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = i;
			tmp16 = shifter;
			do{ //Move to where representation ends
				++p;
     84c:	2f 5f       	subi	r18, 0xFF	; 255
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
				shifter = shifter/10;
     850:	6a 2d       	mov	r22, r10
     852:	7b 2d       	mov	r23, r11
     854:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     858:	cb 01       	movw	r24, r22
			}while(shifter);
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	b9 f7       	brne	.-18     	; 0x84c <TimerTask+0x1ec>
     85e:	a9 01       	movw	r20, r18
		

			do{ //Move back, inserting digits as you go
				*--p = digit[tmp16%10];
     860:	9f 01       	movw	r18, r30
     862:	ad ec       	ldi	r26, 0xCD	; 205
     864:	bc ec       	ldi	r27, 0xCC	; 204
     866:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     86a:	96 95       	lsr	r25
     86c:	87 95       	ror	r24
     86e:	96 95       	lsr	r25
     870:	87 95       	ror	r24
     872:	96 95       	lsr	r25
     874:	87 95       	ror	r24
     876:	9c 01       	movw	r18, r24
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	88 0f       	add	r24, r24
     886:	99 1f       	adc	r25, r25
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	df 01       	movw	r26, r30
     88e:	a8 1b       	sub	r26, r24
     890:	b9 0b       	sbc	r27, r25
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	8c 0f       	add	r24, r28
     898:	9d 1f       	adc	r25, r29
     89a:	a8 0f       	add	r26, r24
     89c:	b9 1f       	adc	r27, r25
     89e:	8c 91       	ld	r24, X
     8a0:	da 01       	movw	r26, r20
     8a2:	8e 93       	st	-X, r24
     8a4:	ad 01       	movw	r20, r26
				tmp16 = tmp16/10;
     8a6:	9f 01       	movw	r18, r30
     8a8:	ad ec       	ldi	r26, 0xCD	; 205
     8aa:	bc ec       	ldi	r27, 0xCC	; 204
     8ac:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     8b0:	fc 01       	movw	r30, r24
     8b2:	f6 95       	lsr	r31
     8b4:	e7 95       	ror	r30
     8b6:	f6 95       	lsr	r31
     8b8:	e7 95       	ror	r30
     8ba:	f6 95       	lsr	r31
     8bc:	e7 95       	ror	r30
			}while(tmp16);
     8be:	30 97       	sbiw	r30, 0x00	; 0
     8c0:	79 f6       	brne	.-98     	; 0x860 <TimerTask+0x200>



				/* PRINT ACT*/
			p = &OUTPUTBUFFER[3];
			shifter = measArray[i];
     8c2:	d7 01       	movw	r26, r14
     8c4:	ed 91       	ld	r30, X+
     8c6:	fd 91       	ld	r31, X+
     8c8:	7d 01       	movw	r14, r26
     8ca:	cf 01       	movw	r24, r30
			}while(tmp16);



				/* PRINT ACT*/
			p = &OUTPUTBUFFER[3];
     8cc:	9e 01       	movw	r18, r28
     8ce:	29 5d       	subi	r18, 0xD9	; 217
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = measArray[i];
			tmp16 = shifter;
			do{ //Move to where representation ends
				++p;
     8d2:	2f 5f       	subi	r18, 0xFF	; 255
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
				shifter = shifter/10;
     8d6:	6a 2d       	mov	r22, r10
     8d8:	7b 2d       	mov	r23, r11
     8da:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     8de:	cb 01       	movw	r24, r22
			}while(shifter);
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	b9 f7       	brne	.-18     	; 0x8d2 <TimerTask+0x272>
     8e4:	a9 01       	movw	r20, r18
		

			do{ //Move back, inserting digits as you go
				*--p = digit[tmp16%10];
     8e6:	9f 01       	movw	r18, r30
     8e8:	ad ec       	ldi	r26, 0xCD	; 205
     8ea:	bc ec       	ldi	r27, 0xCC	; 204
     8ec:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     8f0:	96 95       	lsr	r25
     8f2:	87 95       	ror	r24
     8f4:	96 95       	lsr	r25
     8f6:	87 95       	ror	r24
     8f8:	96 95       	lsr	r25
     8fa:	87 95       	ror	r24
     8fc:	9c 01       	movw	r18, r24
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
     912:	df 01       	movw	r26, r30
     914:	a8 1b       	sub	r26, r24
     916:	b9 0b       	sbc	r27, r25
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	8c 0f       	add	r24, r28
     91e:	9d 1f       	adc	r25, r29
     920:	a8 0f       	add	r26, r24
     922:	b9 1f       	adc	r27, r25
     924:	8c 91       	ld	r24, X
     926:	da 01       	movw	r26, r20
     928:	8e 93       	st	-X, r24
     92a:	ad 01       	movw	r20, r26
				tmp16 = tmp16/10;
     92c:	9f 01       	movw	r18, r30
     92e:	ad ec       	ldi	r26, 0xCD	; 205
     930:	bc ec       	ldi	r27, 0xCC	; 204
     932:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     936:	fc 01       	movw	r30, r24
     938:	f6 95       	lsr	r31
     93a:	e7 95       	ror	r30
     93c:	f6 95       	lsr	r31
     93e:	e7 95       	ror	r30
     940:	f6 95       	lsr	r31
     942:	e7 95       	ror	r30
			}while(tmp16);
     944:	30 97       	sbiw	r30, 0x00	; 0
     946:	79 f6       	brne	.-98     	; 0x8e6 <TimerTask+0x286>

				/* PRINT PAS*/
			p = &OUTPUTBUFFER[7];
			shifter = passiveArray[i];
     948:	d6 01       	movw	r26, r12
     94a:	ed 91       	ld	r30, X+
     94c:	fd 91       	ld	r31, X+
     94e:	6d 01       	movw	r12, r26
     950:	cf 01       	movw	r24, r30
				*--p = digit[tmp16%10];
				tmp16 = tmp16/10;
			}while(tmp16);

				/* PRINT PAS*/
			p = &OUTPUTBUFFER[7];
     952:	9e 01       	movw	r18, r28
     954:	25 5d       	subi	r18, 0xD5	; 213
     956:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = passiveArray[i];
			tmp16 = shifter;
			do{ //Move to where representation ends
				++p;
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
				shifter = shifter/10;
     95c:	6a 2d       	mov	r22, r10
     95e:	7b 2d       	mov	r23, r11
     960:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     964:	cb 01       	movw	r24, r22
			}while(shifter);
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	b9 f7       	brne	.-18     	; 0x958 <__stack+0x59>
     96a:	a9 01       	movw	r20, r18
		

			do{ //Move back, inserting digits as you go
				*--p = digit[tmp16%10];
     96c:	9f 01       	movw	r18, r30
     96e:	ad ec       	ldi	r26, 0xCD	; 205
     970:	bc ec       	ldi	r27, 0xCC	; 204
     972:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     976:	96 95       	lsr	r25
     978:	87 95       	ror	r24
     97a:	96 95       	lsr	r25
     97c:	87 95       	ror	r24
     97e:	96 95       	lsr	r25
     980:	87 95       	ror	r24
     982:	9c 01       	movw	r18, r24
     984:	22 0f       	add	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	82 0f       	add	r24, r18
     996:	93 1f       	adc	r25, r19
     998:	df 01       	movw	r26, r30
     99a:	a8 1b       	sub	r26, r24
     99c:	b9 0b       	sbc	r27, r25
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	8c 0f       	add	r24, r28
     9a4:	9d 1f       	adc	r25, r29
     9a6:	a8 0f       	add	r26, r24
     9a8:	b9 1f       	adc	r27, r25
     9aa:	8c 91       	ld	r24, X
     9ac:	da 01       	movw	r26, r20
     9ae:	8e 93       	st	-X, r24
     9b0:	ad 01       	movw	r20, r26
				tmp16 = tmp16/10;
     9b2:	9f 01       	movw	r18, r30
     9b4:	ad ec       	ldi	r26, 0xCD	; 205
     9b6:	bc ec       	ldi	r27, 0xCC	; 204
     9b8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     9bc:	fc 01       	movw	r30, r24
     9be:	f6 95       	lsr	r31
     9c0:	e7 95       	ror	r30
     9c2:	f6 95       	lsr	r31
     9c4:	e7 95       	ror	r30
     9c6:	f6 95       	lsr	r31
     9c8:	e7 95       	ror	r30
			}while(tmp16);
     9ca:	30 97       	sbiw	r30, 0x00	; 0
     9cc:	79 f6       	brne	.-98     	; 0x96c <__stack+0x6d>


				/*OUTPUT THE STRING!!!*/
				OSMboxPost(SerialTxMBox, (void*)&OUTPUTBUFFER);
     9ce:	be 01       	movw	r22, r28
     9d0:	6c 5d       	subi	r22, 0xDC	; 220
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	80 91 1a 04 	lds	r24, 0x041A
     9d8:	90 91 1b 04 	lds	r25, 0x041B
     9dc:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>
				OSTimeDly(0.05*OS_TICKS_PER_SEC);
     9e0:	86 2d       	mov	r24, r6
     9e2:	95 2d       	mov	r25, r5
     9e4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
			OUTPUTBUFFER[4]='\0';
			OSMboxPost(SerialTxMBox, (void*)OUTPUTBUFFER);
			OSTimeDly(1*OS_TICKS_PER_SEC);

/*Send Measurements*/
			for(i=0;i<NUM_MEAS;i++){
     9ec:	00 32       	cpi	r16, 0x20	; 32
     9ee:	11 05       	cpc	r17, r1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0xf5>
     9f2:	1b cf       	rjmp	.-458    	; 0x82a <TimerTask+0x1ca>
				OSMboxPost(SerialTxMBox, (void*)&OUTPUTBUFFER);
				OSTimeDly(0.05*OS_TICKS_PER_SEC);
			}
			
		/*Send End String SSS*/
			OSTimeDly(1*OS_TICKS_PER_SEC);
     9f4:	88 ec       	ldi	r24, 0xC8	; 200
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
			OUTPUTBUFFER[0] ='E';
     9fc:	85 e4       	ldi	r24, 0x45	; 69
     9fe:	8c a3       	std	Y+36, r24	; 0x24
			OUTPUTBUFFER[1]= 'E';
     a00:	8d a3       	std	Y+37, r24	; 0x25
			OUTPUTBUFFER[2]='E';
     a02:	8e a3       	std	Y+38, r24	; 0x26
			OUTPUTBUFFER[3]='\n';
     a04:	8a e0       	ldi	r24, 0x0A	; 10
     a06:	8f a3       	std	Y+39, r24	; 0x27
			OUTPUTBUFFER[4]='\0';
     a08:	18 a6       	std	Y+40, r1	; 0x28
			OSMboxPost(SerialTxMBox, (void*)OUTPUTBUFFER);
     a0a:	be 01       	movw	r22, r28
     a0c:	6c 5d       	subi	r22, 0xDC	; 220
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	80 91 1a 04 	lds	r24, 0x041A
     a14:	90 91 1b 04 	lds	r25, 0x041B
     a18:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>
			OSTimeDly(1*OS_TICKS_PER_SEC);
     a1c:	88 ec       	ldi	r24, 0xC8	; 200
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
			TransmitTopLine = 1;	//allow the top line to transmit again
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 00 01 	sts	0x0100, r24


/*Print ACTIVE*/

		p = &TextMessage[6];
		shifter = measArray[measIndex];
     a2a:	00 91 60 02 	lds	r16, 0x0260
     a2e:	10 e0       	ldi	r17, 0x00	; 0
     a30:	f8 01       	movw	r30, r16
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e4 52       	subi	r30, 0x24	; 36
     a38:	fb 4f       	sbci	r31, 0xFB	; 251
     a3a:	01 90       	ld	r0, Z+
     a3c:	f0 81       	ld	r31, Z
     a3e:	e0 2d       	mov	r30, r0
     a40:	cf 01       	movw	r24, r30
		}


/*Print ACTIVE*/

		p = &TextMessage[6];
     a42:	9e 01       	movw	r18, r28
     a44:	2e 5e       	subi	r18, 0xEE	; 238
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
		shifter = measArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = shifter/10;
     a4c:	6a 2d       	mov	r22, r10
     a4e:	7b 2d       	mov	r23, r11
     a50:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     a54:	cb 01       	movw	r24, r22
		}while(shifter);
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	b9 f7       	brne	.-18     	; 0xa48 <__stack+0x149>
     a5a:	a9 01       	movw	r20, r18
		

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp16%10];
     a5c:	9f 01       	movw	r18, r30
     a5e:	ad ec       	ldi	r26, 0xCD	; 205
     a60:	bc ec       	ldi	r27, 0xCC	; 204
     a62:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     a66:	96 95       	lsr	r25
     a68:	87 95       	ror	r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	96 95       	lsr	r25
     a70:	87 95       	ror	r24
     a72:	9c 01       	movw	r18, r24
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	82 0f       	add	r24, r18
     a86:	93 1f       	adc	r25, r19
     a88:	df 01       	movw	r26, r30
     a8a:	a8 1b       	sub	r26, r24
     a8c:	b9 0b       	sbc	r27, r25
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	8c 0f       	add	r24, r28
     a94:	9d 1f       	adc	r25, r29
     a96:	a8 0f       	add	r26, r24
     a98:	b9 1f       	adc	r27, r25
     a9a:	8c 91       	ld	r24, X
     a9c:	da 01       	movw	r26, r20
     a9e:	8e 93       	st	-X, r24
     aa0:	ad 01       	movw	r20, r26
			tmp16 = tmp16/10;
     aa2:	9f 01       	movw	r18, r30
     aa4:	ad ec       	ldi	r26, 0xCD	; 205
     aa6:	bc ec       	ldi	r27, 0xCC	; 204
     aa8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     aac:	fc 01       	movw	r30, r24
     aae:	f6 95       	lsr	r31
     ab0:	e7 95       	ror	r30
     ab2:	f6 95       	lsr	r31
     ab4:	e7 95       	ror	r30
     ab6:	f6 95       	lsr	r31
     ab8:	e7 95       	ror	r30
		}while(tmp16);
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	79 f6       	brne	.-98     	; 0xa5c <__stack+0x15d>

/* PRINT PASSIVE*/
		p = &TextMessage[14];
		shifter = passiveArray[measIndex];
     abe:	f8 01       	movw	r30, r16
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	e4 5e       	subi	r30, 0xE4	; 228
     ac6:	fb 4f       	sbci	r31, 0xFB	; 251
     ac8:	01 90       	ld	r0, Z+
     aca:	f0 81       	ld	r31, Z
     acc:	e0 2d       	mov	r30, r0
     ace:	cf 01       	movw	r24, r30
			*--p = digit[tmp16%10];
			tmp16 = tmp16/10;
		}while(tmp16);

/* PRINT PASSIVE*/
		p = &TextMessage[14];
     ad0:	9e 01       	movw	r18, r28
     ad2:	26 5e       	subi	r18, 0xE6	; 230
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
		shifter = passiveArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = shifter/10;
     ada:	6a 2d       	mov	r22, r10
     adc:	7b 2d       	mov	r23, r11
     ade:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divmodhi4>
     ae2:	cb 01       	movw	r24, r22
		}while(shifter);
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	b9 f7       	brne	.-18     	; 0xad6 <__stack+0x1d7>
     ae8:	a9 01       	movw	r20, r18
		

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp16%10];
     aea:	9f 01       	movw	r18, r30
     aec:	ad ec       	ldi	r26, 0xCD	; 205
     aee:	bc ec       	ldi	r27, 0xCC	; 204
     af0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     af4:	96 95       	lsr	r25
     af6:	87 95       	ror	r24
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	96 95       	lsr	r25
     afe:	87 95       	ror	r24
     b00:	9c 01       	movw	r18, r24
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	df 01       	movw	r26, r30
     b18:	a8 1b       	sub	r26, r24
     b1a:	b9 0b       	sbc	r27, r25
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8c 0f       	add	r24, r28
     b22:	9d 1f       	adc	r25, r29
     b24:	a8 0f       	add	r26, r24
     b26:	b9 1f       	adc	r27, r25
     b28:	8c 91       	ld	r24, X
     b2a:	da 01       	movw	r26, r20
     b2c:	8e 93       	st	-X, r24
     b2e:	ad 01       	movw	r20, r26
			tmp16 = tmp16/10;
     b30:	9f 01       	movw	r18, r30
     b32:	ad ec       	ldi	r26, 0xCD	; 205
     b34:	bc ec       	ldi	r27, 0xCC	; 204
     b36:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
     b3a:	fc 01       	movw	r30, r24
     b3c:	f6 95       	lsr	r31
     b3e:	e7 95       	ror	r30
     b40:	f6 95       	lsr	r31
     b42:	e7 95       	ror	r30
     b44:	f6 95       	lsr	r31
     b46:	e7 95       	ror	r30
		}while(tmp16);
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	79 f6       	brne	.-98     	; 0xaea <__stack+0x1eb>
		
		
		OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     b4c:	be 01       	movw	r22, r28
     b4e:	64 5f       	subi	r22, 0xF4	; 244
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	80 91 1a 04 	lds	r24, 0x041A
     b56:	90 91 1b 04 	lds	r25, 0x041B
     b5a:	0e 94 de 09 	call	0x13bc	; 0x13bc <OSMboxPost>

    }	
     b5e:	b4 cd       	rjmp	.-1176   	; 0x6c8 <TimerTask+0x68>

00000b60 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage
     b60:	00 e0       	ldi	r16, 0x00	; 0
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	cf e3       	ldi	r28, 0x3F	; 63
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
     b68:	0f 2e       	mov	r0, r31
     b6a:	fa e9       	ldi	r31, 0x9A	; 154
     b6c:	8f 2e       	mov	r8, r31
     b6e:	f0 2d       	mov	r31, r0
     b70:	0f 2e       	mov	r0, r31
     b72:	f9 e9       	ldi	r31, 0x99	; 153
     b74:	9f 2e       	mov	r9, r31
     b76:	f0 2d       	mov	r31, r0
     b78:	0f 2e       	mov	r0, r31
     b7a:	f9 e1       	ldi	r31, 0x19	; 25
     b7c:	af 2e       	mov	r10, r31
     b7e:	f0 2d       	mov	r31, r0
     b80:	68 94       	set
     b82:	bb 24       	eor	r11, r11
     b84:	b6 f8       	bld	r11, 6
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     b86:	41 2c       	mov	r4, r1
     b88:	51 2c       	mov	r5, r1
     b8a:	61 2c       	mov	r6, r1
     b8c:	0f 2e       	mov	r0, r31
     b8e:	ff e3       	ldi	r31, 0x3F	; 63
     b90:	7f 2e       	mov	r7, r31
     b92:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     b94:	0f 2e       	mov	r0, r31
     b96:	fd ec       	ldi	r31, 0xCD	; 205
     b98:	2f 2e       	mov	r2, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fc ec       	ldi	r31, 0xCC	; 204
     ba0:	3f 2e       	mov	r3, r31
     ba2:	f0 2d       	mov	r31, r0
     ba4:	0d c0       	rjmp	.+26     	; 0xbc0 <LedTask+0x60>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     ba6:	0d ec       	ldi	r16, 0xCD	; 205
     ba8:	1c ec       	ldi	r17, 0xCC	; 204
     baa:	dc ec       	ldi	r29, 0xCC	; 204
     bac:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     bae:	81 2c       	mov	r8, r1
     bb0:	91 2c       	mov	r9, r1
     bb2:	68 94       	set
     bb4:	aa 24       	eor	r10, r10
     bb6:	a7 f8       	bld	r10, 7
     bb8:	0f 2e       	mov	r0, r31
     bba:	ff e3       	ldi	r31, 0x3F	; 63
     bbc:	bf 2e       	mov	r11, r31
     bbe:	f0 2d       	mov	r31, r0
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     bc0:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     bc2:	28 2d       	mov	r18, r8
     bc4:	39 2d       	mov	r19, r9
     bc6:	4a 2d       	mov	r20, r10
     bc8:	5b 2d       	mov	r21, r11
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e8       	ldi	r24, 0x80	; 128
     bd0:	9f e3       	ldi	r25, 0x3F	; 63
     bd2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__divsf3>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
     bda:	20 2f       	mov	r18, r16
     bdc:	31 2f       	mov	r19, r17
     bde:	4d 2f       	mov	r20, r29
     be0:	5c 2f       	mov	r21, r28
     be2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	48 e4       	ldi	r20, 0x48	; 72
     bec:	53 e4       	ldi	r21, 0x43	; 67
     bee:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3>
     bf2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixunssfsi>
     bf6:	cb 01       	movw	r24, r22
     bf8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     bfc:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     bfe:	20 2f       	mov	r18, r16
     c00:	31 2f       	mov	r19, r17
     c02:	4d 2f       	mov	r20, r29
     c04:	5c 2f       	mov	r21, r28
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	80 e8       	ldi	r24, 0x80	; 128
     c0c:	9f e3       	ldi	r25, 0x3F	; 63
     c0e:	0e 94 ef 0b 	call	0x17de	; 0x17de <__subsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c7 01       	movw	r24, r14
     c18:	b6 01       	movw	r22, r12
     c1a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	48 e4       	ldi	r20, 0x48	; 72
     c24:	53 e4       	ldi	r21, 0x43	; 67
     c26:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__mulsf3>
     c2a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixunssfsi>
     c2e:	cb 01       	movw	r24, r22
     c30:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     c34:	80 91 96 03 	lds	r24, 0x0396
     c38:	90 91 97 03 	lds	r25, 0x0397
     c3c:	0e 94 ad 09 	call	0x135a	; 0x135a <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	09 f4       	brne	.+2      	; 0xc46 <LedTask+0xe6>
     c44:	bd cf       	rjmp	.-134    	; 0xbc0 <LedTask+0x60>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	c9 f0       	breq	.+50     	; 0xc80 <LedTask+0x120>
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <LedTask+0xf2>
     c50:	aa cf       	rjmp	.-172    	; 0xba6 <LedTask+0x46>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	09 f0       	breq	.+2      	; 0xc58 <LedTask+0xf8>
     c56:	b4 cf       	rjmp	.-152    	; 0xbc0 <LedTask+0x60>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     c58:	04 2d       	mov	r16, r4
     c5a:	15 2d       	mov	r17, r5
     c5c:	d6 2d       	mov	r29, r6
     c5e:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     c60:	0f 2e       	mov	r0, r31
     c62:	fa e9       	ldi	r31, 0x9A	; 154
     c64:	8f 2e       	mov	r8, r31
     c66:	f0 2d       	mov	r31, r0
     c68:	0f 2e       	mov	r0, r31
     c6a:	f9 e9       	ldi	r31, 0x99	; 153
     c6c:	9f 2e       	mov	r9, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	0f 2e       	mov	r0, r31
     c72:	f9 e1       	ldi	r31, 0x19	; 25
     c74:	af 2e       	mov	r10, r31
     c76:	f0 2d       	mov	r31, r0
     c78:	68 94       	set
     c7a:	bb 24       	eor	r11, r11
     c7c:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     c7e:	a0 cf       	rjmp	.-192    	; 0xbc0 <LedTask+0x60>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     c80:	04 2d       	mov	r16, r4
     c82:	15 2d       	mov	r17, r5
     c84:	d6 2d       	mov	r29, r6
     c86:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     c88:	82 2c       	mov	r8, r2
     c8a:	93 2c       	mov	r9, r3
     c8c:	0f 2e       	mov	r0, r31
     c8e:	fc ec       	ldi	r31, 0xCC	; 204
     c90:	af 2e       	mov	r10, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	0f 2e       	mov	r0, r31
     c96:	fe e3       	ldi	r31, 0x3E	; 62
     c98:	bf 2e       	mov	r11, r31
     c9a:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     c9c:	91 cf       	rjmp	.-222    	; 0xbc0 <LedTask+0x60>

00000c9e <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	69 97       	sbiw	r28, 0x19	; 25
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     cb2:	0f 2e       	mov	r0, r31
     cb4:	f1 ec       	ldi	r31, 0xC1	; 193
     cb6:	cf 2e       	mov	r12, r31
     cb8:	d1 2c       	mov	r13, r1
     cba:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     cbc:	61 2c       	mov	r6, r1
     cbe:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     cc0:	0f 2e       	mov	r0, r31
     cc2:	fe ef       	ldi	r31, 0xFE	; 254
     cc4:	af 2e       	mov	r10, r31
     cc6:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     cc8:	68 94       	set
     cca:	88 24       	eor	r8, r8
     ccc:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     cce:	0f 2e       	mov	r0, r31
     cd0:	f0 ec       	ldi	r31, 0xC0	; 192
     cd2:	9f 2e       	mov	r9, r31
     cd4:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f6 ec       	ldi	r31, 0xC6	; 198
     cda:	ef 2e       	mov	r14, r31
     cdc:	f1 2c       	mov	r15, r1
     cde:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (5);
     ce0:	85 e0       	ldi	r24, 0x05	; 5
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     ce8:	80 91 1a 04 	lds	r24, 0x041A
     cec:	90 91 1b 04 	lds	r25, 0x041B
     cf0:	0e 94 ad 09 	call	0x135a	; 0x135a <OSMboxAccept>
		
		if(msg != NULL){
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	09 f4       	brne	.+2      	; 0xcfa <SerialTransmitTask+0x5c>
     cf8:	6f c0       	rjmp	.+222    	; 0xdd8 <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     cfa:	bc 01       	movw	r22, r24
     cfc:	ce 01       	movw	r24, r28
     cfe:	02 96       	adiw	r24, 0x02	; 2
     d00:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     d04:	f6 01       	movw	r30, r12
     d06:	80 81       	ld	r24, Z
     d08:	86 60       	ori	r24, 0x06	; 6
     d0a:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <SerialTransmitTask+0x76>
     d12:	62 c0       	rjmp	.+196    	; 0xdd8 <SerialTransmitTask+0x13a>
     d14:	06 2d       	mov	r16, r6
     d16:	17 2d       	mov	r17, r7
     d18:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     d1a:	8d 30       	cpi	r24, 0x0D	; 13
     d1c:	c9 f4       	brne	.+50     	; 0xd50 <SerialTransmitTask+0xb2>
     d1e:	c8 01       	movw	r24, r16
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	e2 e0       	ldi	r30, 0x02	; 2
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	e8 0f       	add	r30, r24
     d2c:	f9 1f       	adc	r31, r25
     d2e:	20 81       	ld	r18, Z
     d30:	2d 30       	cpi	r18, 0x0D	; 13
     d32:	71 f4       	brne	.+28     	; 0xd50 <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     d34:	e2 e0       	ldi	r30, 0x02	; 2
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ec 0f       	add	r30, r28
     d3a:	fd 1f       	adc	r31, r29
     d3c:	e0 0f       	add	r30, r16
     d3e:	f1 1f       	adc	r31, r17
     d40:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     d42:	e2 e0       	ldi	r30, 0x02	; 2
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	ec 0f       	add	r30, r28
     d48:	fd 1f       	adc	r31, r29
     d4a:	e8 0f       	add	r30, r24
     d4c:	f9 1f       	adc	r31, r25
     d4e:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     d50:	e2 e0       	ldi	r30, 0x02	; 2
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 0f       	add	r30, r28
     d56:	fd 1f       	adc	r31, r29
     d58:	e0 0f       	add	r30, r16
     d5a:	f1 1f       	adc	r31, r17
     d5c:	80 81       	ld	r24, Z
     d5e:	8d 30       	cpi	r24, 0x0D	; 13
     d60:	c9 f4       	brne	.+50     	; 0xd94 <SerialTransmitTask+0xf6>
     d62:	c8 01       	movw	r24, r16
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	e2 e0       	ldi	r30, 0x02	; 2
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	ec 0f       	add	r30, r28
     d6c:	fd 1f       	adc	r31, r29
     d6e:	e8 0f       	add	r30, r24
     d70:	f9 1f       	adc	r31, r25
     d72:	20 81       	ld	r18, Z
     d74:	2a 30       	cpi	r18, 0x0A	; 10
     d76:	71 f4       	brne	.+28     	; 0xd94 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     d78:	e2 e0       	ldi	r30, 0x02	; 2
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ec 0f       	add	r30, r28
     d7e:	fd 1f       	adc	r31, r29
     d80:	e0 0f       	add	r30, r16
     d82:	f1 1f       	adc	r31, r17
     d84:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     d86:	e2 e0       	ldi	r30, 0x02	; 2
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ec 0f       	add	r30, r28
     d8c:	fd 1f       	adc	r31, r29
     d8e:	e8 0f       	add	r30, r24
     d90:	f9 1f       	adc	r31, r25
     d92:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     d94:	ae 01       	movw	r20, r28
     d96:	4f 5f       	subi	r20, 0xFF	; 255
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	80 91 1c 05 	lds	r24, 0x051C
     da2:	90 91 1d 05 	lds	r25, 0x051D
     da6:	0e 94 1d 0a 	call	0x143a	; 0x143a <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     daa:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     dac:	e2 e0       	ldi	r30, 0x02	; 2
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ec 0f       	add	r30, r28
     db2:	fd 1f       	adc	r31, r29
     db4:	e0 0f       	add	r30, r16
     db6:	f1 1f       	adc	r31, r17
     db8:	80 81       	ld	r24, Z
     dba:	f7 01       	movw	r30, r14
     dbc:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     dbe:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     dc0:	b3 94       	inc	r11
     dc2:	0b 2d       	mov	r16, r11
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	e2 e0       	ldi	r30, 0x02	; 2
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	ec 0f       	add	r30, r28
     dcc:	fd 1f       	adc	r31, r29
     dce:	e0 0f       	add	r30, r16
     dd0:	f1 1f       	adc	r31, r17
     dd2:	80 81       	ld	r24, Z
     dd4:	81 11       	cpse	r24, r1
     dd6:	a1 cf       	rjmp	.-190    	; 0xd1a <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     dd8:	f6 01       	movw	r30, r12
     dda:	80 81       	ld	r24, Z
     ddc:	89 7f       	andi	r24, 0xF9	; 249
     dde:	80 83       	st	Z, r24
	}
     de0:	7f cf       	rjmp	.-258    	; 0xce0 <SerialTransmitTask+0x42>

00000de2 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     de2:	0e 94 1b 07 	call	0xe36	; 0xe36 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     de6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <OSInit>
	
	USART_Init();
     dea:	0e 94 4b 07 	call	0xe96	; 0xe96 <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 c1 09 	call	0x1382	; 0x1382 <OSMboxCreate>
     df6:	90 93 97 03 	sts	0x0397, r25
     dfa:	80 93 96 03 	sts	0x0396, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 c1 09 	call	0x1382	; 0x1382 <OSMboxCreate>
     e06:	90 93 1b 04 	sts	0x041B, r25
     e0a:	80 93 1a 04 	sts	0x041A, r24
	SerialTxSem = OSSemCreate(1);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 00 0a 	call	0x1400	; 0x1400 <OSSemCreate>
     e16:	90 93 1d 05 	sts	0x051D, r25
     e1a:	80 93 1c 05 	sts	0x051C, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	4d e9       	ldi	r20, 0x9D	; 157
     e22:	56 e0       	ldi	r21, 0x06	; 6
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	83 ef       	ldi	r24, 0xF3	; 243
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     e30:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <OSStart>
     e34:	ff cf       	rjmp	.-2      	; 0xe34 <main+0x52>

00000e36 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     e36:	f8 94       	cli
	WatchDogReset();
     e38:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     e3c:	84 b7       	in	r24, 0x34	; 52
     e3e:	87 7f       	andi	r24, 0xF7	; 247
     e40:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     e42:	e0 e6       	ldi	r30, 0x60	; 96
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 61       	ori	r24, 0x18	; 24
     e4a:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     e4c:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     e4e:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     e50:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     e52:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     e54:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     e56:	87 b1       	in	r24, 0x07	; 7
     e58:	80 7f       	andi	r24, 0xF0	; 240
     e5a:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     e5c:	8a b1       	in	r24, 0x0a	; 10
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	8a b9       	out	0x0a, r24	; 10
	
	// END TEAM ROTARY
	
	//BUTTON
	
	DDRB |= _BV(DDB0); //B0 as input
     e62:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(DDB1); //B1 as input
     e64:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(DDB2); //B2 as input
     e66:	22 9a       	sbi	0x04, 2	; 4
	// END BUTTON
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     e6c:	8d e0       	ldi	r24, 0x0D	; 13
     e6e:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     e70:	82 e1       	ldi	r24, 0x12	; 18
     e72:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     e74:	ee e6       	ldi	r30, 0x6E	; 110
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	81 60       	ori	r24, 0x01	; 1
     e7c:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     e7e:	e4 e6       	ldi	r30, 0x64	; 100
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	80 83       	st	Z, r24


/* setup USART here  */	

	UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     e88:	e1 ec       	ldi	r30, 0xC1	; 193
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	89 7f       	andi	r24, 0xF9	; 249
     e90:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     e92:	78 94       	sei
     e94:	08 95       	ret

00000e96 <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     e96:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     e9a:	87 e6       	ldi	r24, 0x67	; 103
     e9c:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     ea0:	88 e1       	ldi	r24, 0x18	; 24
     ea2:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     ea6:	8e e0       	ldi	r24, 0x0E	; 14
     ea8:	80 93 c2 00 	sts	0x00C2, r24
     eac:	08 95       	ret

00000eae <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     eae:	fa 01       	movw	r30, r20
     eb0:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     eb6:	31 97       	sbiw	r30, 0x01	; 1
     eb8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     eba:	31 97       	sbiw	r30, 0x01	; 1
     ebc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     ec2:	31 97       	sbiw	r30, 0x01	; 1
     ec4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     ece:	31 97       	sbiw	r30, 0x01	; 1
     ed0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     ed2:	31 97       	sbiw	r30, 0x01	; 1
     ed4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     ede:	31 97       	sbiw	r30, 0x01	; 1
     ee0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     eea:	31 97       	sbiw	r30, 0x01	; 1
     eec:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     ef2:	31 97       	sbiw	r30, 0x01	; 1
     ef4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     ef6:	31 97       	sbiw	r30, 0x01	; 1
     ef8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     f06:	31 97       	sbiw	r30, 0x01	; 1
     f08:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     f0e:	31 97       	sbiw	r30, 0x01	; 1
     f10:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     f16:	31 97       	sbiw	r30, 0x01	; 1
     f18:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     f1e:	31 97       	sbiw	r30, 0x01	; 1
     f20:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     f2a:	31 97       	sbiw	r30, 0x01	; 1
     f2c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     f36:	31 97       	sbiw	r30, 0x01	; 1
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     f3c:	ca 01       	movw	r24, r20
     f3e:	83 97       	sbiw	r24, 0x23	; 35
     f40:	08 95       	ret

00000f42 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     f42:	08 95       	ret

00000f44 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     f44:	08 95       	ret

00000f46 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     f46:	08 95       	ret

00000f48 <OSTaskIdle>:
     f48:	f8 94       	cli
     f4a:	78 94       	sei
     f4c:	fd cf       	rjmp	.-6      	; 0xf48 <OSTaskIdle>

00000f4e <OSEventTaskRdy>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	fc 01       	movw	r30, r24
     f58:	05 85       	ldd	r16, Z+13	; 0x0d
     f5a:	e0 2f       	mov	r30, r16
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	ea 5a       	subi	r30, 0xAA	; 170
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	10 81       	ld	r17, Z
     f64:	21 2f       	mov	r18, r17
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	d9 01       	movw	r26, r18
     f6a:	aa 5a       	subi	r26, 0xAA	; 170
     f6c:	bd 4f       	sbci	r27, 0xFD	; 253
     f6e:	dc 91       	ld	r29, X
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	52 81       	ldd	r21, Z+2	; 0x02
     f78:	a5 2f       	mov	r26, r21
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	aa 5a       	subi	r26, 0xAA	; 170
     f7e:	be 4f       	sbci	r27, 0xFE	; 254
     f80:	cc 91       	ld	r28, X
     f82:	ac 2f       	mov	r26, r28
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	aa 5a       	subi	r26, 0xAA	; 170
     f88:	bd 4f       	sbci	r27, 0xFD	; 253
     f8a:	ac 91       	ld	r26, X
     f8c:	11 0f       	add	r17, r17
     f8e:	11 0f       	add	r17, r17
     f90:	11 0f       	add	r17, r17
     f92:	c1 0f       	add	r28, r17
     f94:	ba 2f       	mov	r27, r26
     f96:	b0 95       	com	r27
     f98:	5b 23       	and	r21, r27
     f9a:	52 83       	std	Z+2, r21	; 0x02
     f9c:	51 11       	cpse	r21, r1
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <OSEventTaskRdy+0x5c>
     fa0:	5d 2f       	mov	r21, r29
     fa2:	50 95       	com	r21
     fa4:	05 23       	and	r16, r21
     fa6:	fc 01       	movw	r30, r24
     fa8:	05 87       	std	Z+13, r16	; 0x0d
     faa:	ec 2f       	mov	r30, r28
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	eb 5a       	subi	r30, 0xAB	; 171
     fb4:	f8 4f       	sbci	r31, 0xF8	; 248
     fb6:	01 90       	ld	r0, Z+
     fb8:	f0 81       	ld	r31, Z
     fba:	e0 2d       	mov	r30, r0
     fbc:	13 86       	std	Z+11, r1	; 0x0b
     fbe:	12 86       	std	Z+10, r1	; 0x0a
     fc0:	17 82       	std	Z+7, r1	; 0x07
     fc2:	16 82       	std	Z+6, r1	; 0x06
     fc4:	71 87       	std	Z+9, r23	; 0x09
     fc6:	60 87       	std	Z+8, r22	; 0x08
     fc8:	40 95       	com	r20
     fca:	84 85       	ldd	r24, Z+12	; 0x0c
     fcc:	48 23       	and	r20, r24
     fce:	44 87       	std	Z+12, r20	; 0x0c
     fd0:	41 11       	cpse	r20, r1
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <OSEventTaskRdy+0x9c>
     fd4:	80 91 b6 06 	lds	r24, 0x06B6
     fd8:	d8 2b       	or	r29, r24
     fda:	d0 93 b6 06 	sts	0x06B6, r29
     fde:	f9 01       	movw	r30, r18
     fe0:	e9 54       	subi	r30, 0x49	; 73
     fe2:	f9 4f       	sbci	r31, 0xF9	; 249
     fe4:	80 81       	ld	r24, Z
     fe6:	a8 2b       	or	r26, r24
     fe8:	a0 83       	st	Z, r26
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <OSEventTaskWait>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	e0 91 c2 06 	lds	r30, 0x06C2
     ffc:	f0 91 c3 06 	lds	r31, 0x06C3
    1000:	97 83       	std	Z+7, r25	; 0x07
    1002:	86 83       	std	Z+6, r24	; 0x06
    1004:	a7 85       	ldd	r26, Z+15	; 0x0f
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	20 89       	ldd	r18, Z+16	; 0x10
    100a:	ed 01       	movw	r28, r26
    100c:	c9 54       	subi	r28, 0x49	; 73
    100e:	d9 4f       	sbci	r29, 0xF9	; 249
    1010:	42 2f       	mov	r20, r18
    1012:	40 95       	com	r20
    1014:	38 81       	ld	r19, Y
    1016:	34 23       	and	r19, r20
    1018:	38 83       	st	Y, r19
    101a:	31 11       	cpse	r19, r1
    101c:	07 c0       	rjmp	.+14     	; 0x102c <OSEventTaskWait+0x38>
    101e:	31 89       	ldd	r19, Z+17	; 0x11
    1020:	30 95       	com	r19
    1022:	40 91 b6 06 	lds	r20, 0x06B6
    1026:	34 23       	and	r19, r20
    1028:	30 93 b6 06 	sts	0x06B6, r19
    102c:	a8 0f       	add	r26, r24
    102e:	b9 1f       	adc	r27, r25
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	3c 91       	ld	r19, X
    1034:	12 97       	sbiw	r26, 0x02	; 2
    1036:	23 2b       	or	r18, r19
    1038:	12 96       	adiw	r26, 0x02	; 2
    103a:	2c 93       	st	X, r18
    103c:	dc 01       	movw	r26, r24
    103e:	1d 96       	adiw	r26, 0x0d	; 13
    1040:	3c 91       	ld	r19, X
    1042:	1d 97       	sbiw	r26, 0x0d	; 13
    1044:	21 89       	ldd	r18, Z+17	; 0x11
    1046:	23 2b       	or	r18, r19
    1048:	1d 96       	adiw	r26, 0x0d	; 13
    104a:	2c 93       	st	X, r18
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <OSEventTO>:
    1052:	e0 91 c2 06 	lds	r30, 0x06C2
    1056:	f0 91 c3 06 	lds	r31, 0x06C3
    105a:	27 85       	ldd	r18, Z+15	; 0x0f
    105c:	dc 01       	movw	r26, r24
    105e:	a2 0f       	add	r26, r18
    1060:	b1 1d       	adc	r27, r1
    1062:	20 89       	ldd	r18, Z+16	; 0x10
    1064:	20 95       	com	r18
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	3c 91       	ld	r19, X
    106a:	12 97       	sbiw	r26, 0x02	; 2
    106c:	23 23       	and	r18, r19
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	2c 93       	st	X, r18
    1072:	21 11       	cpse	r18, r1
    1074:	09 c0       	rjmp	.+18     	; 0x1088 <OSEventTO+0x36>
    1076:	21 89       	ldd	r18, Z+17	; 0x11
    1078:	20 95       	com	r18
    107a:	dc 01       	movw	r26, r24
    107c:	1d 96       	adiw	r26, 0x0d	; 13
    107e:	3c 91       	ld	r19, X
    1080:	1d 97       	sbiw	r26, 0x0d	; 13
    1082:	23 23       	and	r18, r19
    1084:	1d 96       	adiw	r26, 0x0d	; 13
    1086:	2c 93       	st	X, r18
    1088:	14 86       	std	Z+12, r1	; 0x0c
    108a:	17 82       	std	Z+7, r1	; 0x07
    108c:	16 82       	std	Z+6, r1	; 0x06
    108e:	08 95       	ret

00001090 <OSEventWaitListInit>:
    1090:	fc 01       	movw	r30, r24
    1092:	15 86       	std	Z+13, r1	; 0x0d
    1094:	32 96       	adiw	r30, 0x02	; 2
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	11 92       	st	Z+, r1
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	e1 f7       	brne	.-8      	; 0x1098 <OSEventWaitListInit+0x8>
    10a0:	08 95       	ret

000010a2 <OSIntExit>:
    10a2:	f8 94       	cli
    10a4:	80 91 c1 06 	lds	r24, 0x06C1
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	80 93 c1 06 	sts	0x06C1, r24
    10ae:	90 91 9e 06 	lds	r25, 0x069E
    10b2:	89 2b       	or	r24, r25
    10b4:	e1 f5       	brne	.+120    	; 0x112e <OSIntExit+0x8c>
    10b6:	e0 91 b6 06 	lds	r30, 0x06B6
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ea 5a       	subi	r30, 0xAA	; 170
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	80 81       	ld	r24, Z
    10c2:	80 93 95 03 	sts	0x0395, r24
    10c6:	e8 2f       	mov	r30, r24
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	e9 54       	subi	r30, 0x49	; 73
    10cc:	f9 4f       	sbci	r31, 0xF9	; 249
    10ce:	e0 81       	ld	r30, Z
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	ea 5a       	subi	r30, 0xAA	; 170
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	88 0f       	add	r24, r24
    10d8:	88 0f       	add	r24, r24
    10da:	88 0f       	add	r24, r24
    10dc:	90 81       	ld	r25, Z
    10de:	89 0f       	add	r24, r25
    10e0:	80 93 a4 06 	sts	0x06A4, r24
    10e4:	90 91 a5 06 	lds	r25, 0x06A5
    10e8:	89 17       	cp	r24, r25
    10ea:	09 f1       	breq	.+66     	; 0x112e <OSIntExit+0x8c>
    10ec:	e8 2f       	mov	r30, r24
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	eb 5a       	subi	r30, 0xAB	; 171
    10f6:	f8 4f       	sbci	r31, 0xF8	; 248
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	90 93 b5 06 	sts	0x06B5, r25
    1100:	80 93 b4 06 	sts	0x06B4, r24
    1104:	80 91 a8 06 	lds	r24, 0x06A8
    1108:	90 91 a9 06 	lds	r25, 0x06A9
    110c:	a0 91 aa 06 	lds	r26, 0x06AA
    1110:	b0 91 ab 06 	lds	r27, 0x06AB
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	a1 1d       	adc	r26, r1
    1118:	b1 1d       	adc	r27, r1
    111a:	80 93 a8 06 	sts	0x06A8, r24
    111e:	90 93 a9 06 	sts	0x06A9, r25
    1122:	a0 93 aa 06 	sts	0x06AA, r26
    1126:	b0 93 ab 06 	sts	0x06AB, r27
    112a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
    112e:	78 94       	sei
    1130:	08 95       	ret

00001132 <OSSched>:
    1132:	f8 94       	cli
    1134:	90 91 c1 06 	lds	r25, 0x06C1
    1138:	80 91 9e 06 	lds	r24, 0x069E
    113c:	89 2b       	or	r24, r25
    113e:	d1 f5       	brne	.+116    	; 0x11b4 <OSSched+0x82>
    1140:	e0 91 b6 06 	lds	r30, 0x06B6
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	ea 5a       	subi	r30, 0xAA	; 170
    1148:	fe 4f       	sbci	r31, 0xFE	; 254
    114a:	80 81       	ld	r24, Z
    114c:	e8 2f       	mov	r30, r24
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	e9 54       	subi	r30, 0x49	; 73
    1152:	f9 4f       	sbci	r31, 0xF9	; 249
    1154:	e0 81       	ld	r30, Z
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	ea 5a       	subi	r30, 0xAA	; 170
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	88 0f       	add	r24, r24
    115e:	88 0f       	add	r24, r24
    1160:	88 0f       	add	r24, r24
    1162:	90 81       	ld	r25, Z
    1164:	e8 2f       	mov	r30, r24
    1166:	e9 0f       	add	r30, r25
    1168:	e0 93 a4 06 	sts	0x06A4, r30
    116c:	80 91 a5 06 	lds	r24, 0x06A5
    1170:	e8 17       	cp	r30, r24
    1172:	01 f1       	breq	.+64     	; 0x11b4 <OSSched+0x82>
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	eb 5a       	subi	r30, 0xAB	; 171
    117c:	f8 4f       	sbci	r31, 0xF8	; 248
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	90 93 b5 06 	sts	0x06B5, r25
    1186:	80 93 b4 06 	sts	0x06B4, r24
    118a:	80 91 a8 06 	lds	r24, 0x06A8
    118e:	90 91 a9 06 	lds	r25, 0x06A9
    1192:	a0 91 aa 06 	lds	r26, 0x06AA
    1196:	b0 91 ab 06 	lds	r27, 0x06AB
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	a1 1d       	adc	r26, r1
    119e:	b1 1d       	adc	r27, r1
    11a0:	80 93 a8 06 	sts	0x06A8, r24
    11a4:	90 93 a9 06 	sts	0x06A9, r25
    11a8:	a0 93 aa 06 	sts	0x06AA, r26
    11ac:	b0 93 ab 06 	sts	0x06AB, r27
    11b0:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
    11b4:	78 94       	sei
    11b6:	08 95       	ret

000011b8 <OSStart>:
    11b8:	80 91 9f 06 	lds	r24, 0x069F
    11bc:	81 11       	cpse	r24, r1
    11be:	26 c0       	rjmp	.+76     	; 0x120c <OSStart+0x54>
    11c0:	e0 91 b6 06 	lds	r30, 0x06B6
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ea 5a       	subi	r30, 0xAA	; 170
    11c8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ca:	e0 81       	ld	r30, Z
    11cc:	ae 2f       	mov	r26, r30
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	a9 54       	subi	r26, 0x49	; 73
    11d2:	b9 4f       	sbci	r27, 0xF9	; 249
    11d4:	ac 91       	ld	r26, X
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	aa 5a       	subi	r26, 0xAA	; 170
    11da:	be 4f       	sbci	r27, 0xFE	; 254
    11dc:	ee 0f       	add	r30, r30
    11de:	ee 0f       	add	r30, r30
    11e0:	ee 0f       	add	r30, r30
    11e2:	8c 91       	ld	r24, X
    11e4:	e8 0f       	add	r30, r24
    11e6:	e0 93 a4 06 	sts	0x06A4, r30
    11ea:	e0 93 a5 06 	sts	0x06A5, r30
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	eb 5a       	subi	r30, 0xAB	; 171
    11f6:	f8 4f       	sbci	r31, 0xF8	; 248
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	90 93 b5 06 	sts	0x06B5, r25
    1200:	80 93 b4 06 	sts	0x06B4, r24
    1204:	90 93 c3 06 	sts	0x06C3, r25
    1208:	80 93 c2 06 	sts	0x06C2, r24
    120c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
    1210:	08 95       	ret

00001212 <OSTCBInit>:
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	f8 94       	cli
    1218:	e0 91 b0 06 	lds	r30, 0x06B0
    121c:	f0 91 b1 06 	lds	r31, 0x06B1
    1220:	30 97       	sbiw	r30, 0x00	; 0
    1222:	09 f4       	brne	.+2      	; 0x1226 <OSTCBInit+0x14>
    1224:	4f c0       	rjmp	.+158    	; 0x12c4 <OSTCBInit+0xb2>
    1226:	22 81       	ldd	r18, Z+2	; 0x02
    1228:	33 81       	ldd	r19, Z+3	; 0x03
    122a:	30 93 b1 06 	sts	0x06B1, r19
    122e:	20 93 b0 06 	sts	0x06B0, r18
    1232:	78 94       	sei
    1234:	71 83       	std	Z+1, r23	; 0x01
    1236:	60 83       	st	Z, r22
    1238:	85 87       	std	Z+13, r24	; 0x0d
    123a:	14 86       	std	Z+12, r1	; 0x0c
    123c:	13 86       	std	Z+11, r1	; 0x0b
    123e:	12 86       	std	Z+10, r1	; 0x0a
    1240:	c8 2f       	mov	r28, r24
    1242:	c6 95       	lsr	r28
    1244:	c6 95       	lsr	r28
    1246:	c6 95       	lsr	r28
    1248:	c7 87       	std	Z+15, r28	; 0x0f
    124a:	d0 e0       	ldi	r29, 0x00	; 0
    124c:	ca 5a       	subi	r28, 0xAA	; 170
    124e:	dd 4f       	sbci	r29, 0xFD	; 253
    1250:	98 81       	ld	r25, Y
    1252:	91 8b       	std	Z+17, r25	; 0x11
    1254:	c8 2f       	mov	r28, r24
    1256:	c7 70       	andi	r28, 0x07	; 7
    1258:	c6 87       	std	Z+14, r28	; 0x0e
    125a:	d0 e0       	ldi	r29, 0x00	; 0
    125c:	ca 5a       	subi	r28, 0xAA	; 170
    125e:	dd 4f       	sbci	r29, 0xFD	; 253
    1260:	98 81       	ld	r25, Y
    1262:	90 8b       	std	Z+16, r25	; 0x10
    1264:	17 82       	std	Z+7, r1	; 0x07
    1266:	16 82       	std	Z+6, r1	; 0x06
    1268:	11 86       	std	Z+9, r1	; 0x09
    126a:	10 86       	std	Z+8, r1	; 0x08
    126c:	f8 94       	cli
    126e:	a8 2f       	mov	r26, r24
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	aa 0f       	add	r26, r26
    1274:	bb 1f       	adc	r27, r27
    1276:	ab 5a       	subi	r26, 0xAB	; 171
    1278:	b8 4f       	sbci	r27, 0xF8	; 248
    127a:	ed 93       	st	X+, r30
    127c:	fc 93       	st	X, r31
    127e:	a0 91 a6 06 	lds	r26, 0x06A6
    1282:	b0 91 a7 06 	lds	r27, 0x06A7
    1286:	b3 83       	std	Z+3, r27	; 0x03
    1288:	a2 83       	std	Z+2, r26	; 0x02
    128a:	15 82       	std	Z+5, r1	; 0x05
    128c:	14 82       	std	Z+4, r1	; 0x04
    128e:	10 97       	sbiw	r26, 0x00	; 0
    1290:	21 f0       	breq	.+8      	; 0x129a <OSTCBInit+0x88>
    1292:	15 96       	adiw	r26, 0x05	; 5
    1294:	fc 93       	st	X, r31
    1296:	ee 93       	st	-X, r30
    1298:	14 97       	sbiw	r26, 0x04	; 4
    129a:	f0 93 a7 06 	sts	0x06A7, r31
    129e:	e0 93 a6 06 	sts	0x06A6, r30
    12a2:	90 91 b6 06 	lds	r25, 0x06B6
    12a6:	81 89       	ldd	r24, Z+17	; 0x11
    12a8:	89 2b       	or	r24, r25
    12aa:	80 93 b6 06 	sts	0x06B6, r24
    12ae:	a7 85       	ldd	r26, Z+15	; 0x0f
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	a9 54       	subi	r26, 0x49	; 73
    12b4:	b9 4f       	sbci	r27, 0xF9	; 249
    12b6:	9c 91       	ld	r25, X
    12b8:	80 89       	ldd	r24, Z+16	; 0x10
    12ba:	89 2b       	or	r24, r25
    12bc:	8c 93       	st	X, r24
    12be:	78 94       	sei
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <OSTCBInit+0xb6>
    12c4:	78 94       	sei
    12c6:	86 e4       	ldi	r24, 0x46	; 70
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	08 95       	ret

000012ce <OSTimeTick>:
    12ce:	0e 94 a3 07 	call	0xf46	; 0xf46 <OSTimeTickHook>
    12d2:	e0 91 a6 06 	lds	r30, 0x06A6
    12d6:	f0 91 a7 06 	lds	r31, 0x06A7
    12da:	85 85       	ldd	r24, Z+13	; 0x0d
    12dc:	8f 33       	cpi	r24, 0x3F	; 63
    12de:	39 f1       	breq	.+78     	; 0x132e <OSTimeTick+0x60>
    12e0:	40 91 b6 06 	lds	r20, 0x06B6
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f8 94       	cli
    12ea:	82 85       	ldd	r24, Z+10	; 0x0a
    12ec:	93 85       	ldd	r25, Z+11	; 0x0b
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	a9 f0       	breq	.+42     	; 0x131c <OSTimeTick+0x4e>
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	93 87       	std	Z+11, r25	; 0x0b
    12f6:	82 87       	std	Z+10, r24	; 0x0a
    12f8:	89 2b       	or	r24, r25
    12fa:	81 f4       	brne	.+32     	; 0x131c <OSTimeTick+0x4e>
    12fc:	84 85       	ldd	r24, Z+12	; 0x0c
    12fe:	83 fd       	sbrc	r24, 3
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <OSTimeTick+0x4a>
    1302:	81 89       	ldd	r24, Z+17	; 0x11
    1304:	a7 85       	ldd	r26, Z+15	; 0x0f
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	a9 54       	subi	r26, 0x49	; 73
    130a:	b9 4f       	sbci	r27, 0xF9	; 249
    130c:	5c 91       	ld	r21, X
    130e:	90 89       	ldd	r25, Z+16	; 0x10
    1310:	95 2b       	or	r25, r21
    1312:	9c 93       	st	X, r25
    1314:	48 2b       	or	r20, r24
    1316:	02 c0       	rjmp	.+4      	; 0x131c <OSTimeTick+0x4e>
    1318:	33 87       	std	Z+11, r19	; 0x0b
    131a:	22 87       	std	Z+10, r18	; 0x0a
    131c:	02 80       	ldd	r0, Z+2	; 0x02
    131e:	f3 81       	ldd	r31, Z+3	; 0x03
    1320:	e0 2d       	mov	r30, r0
    1322:	78 94       	sei
    1324:	85 85       	ldd	r24, Z+13	; 0x0d
    1326:	8f 33       	cpi	r24, 0x3F	; 63
    1328:	f9 f6       	brne	.-66     	; 0x12e8 <OSTimeTick+0x1a>
    132a:	40 93 b6 06 	sts	0x06B6, r20
    132e:	f8 94       	cli
    1330:	80 91 c4 06 	lds	r24, 0x06C4
    1334:	90 91 c5 06 	lds	r25, 0x06C5
    1338:	a0 91 c6 06 	lds	r26, 0x06C6
    133c:	b0 91 c7 06 	lds	r27, 0x06C7
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	a1 1d       	adc	r26, r1
    1344:	b1 1d       	adc	r27, r1
    1346:	80 93 c4 06 	sts	0x06C4, r24
    134a:	90 93 c5 06 	sts	0x06C5, r25
    134e:	a0 93 c6 06 	sts	0x06C6, r26
    1352:	b0 93 c7 06 	sts	0x06C7, r27
    1356:	78 94       	sei
    1358:	08 95       	ret

0000135a <OSMboxAccept>:
    135a:	fc 01       	movw	r30, r24
    135c:	f8 94       	cli
    135e:	84 85       	ldd	r24, Z+12	; 0x0c
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	21 f0       	breq	.+8      	; 0x136c <OSMboxAccept+0x12>
    1364:	78 94       	sei
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	08 95       	ret
    136c:	20 81       	ld	r18, Z
    136e:	31 81       	ldd	r19, Z+1	; 0x01
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	11 f0       	breq	.+4      	; 0x137a <OSMboxAccept+0x20>
    1376:	11 82       	std	Z+1, r1	; 0x01
    1378:	10 82       	st	Z, r1
    137a:	78 94       	sei
    137c:	82 2f       	mov	r24, r18
    137e:	93 2f       	mov	r25, r19
    1380:	08 95       	ret

00001382 <OSMboxCreate>:
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	f8 94       	cli
    1388:	c0 91 bf 06 	lds	r28, 0x06BF
    138c:	d0 91 c0 06 	lds	r29, 0x06C0
    1390:	20 97       	sbiw	r28, 0x00	; 0
    1392:	31 f0       	breq	.+12     	; 0x13a0 <OSMboxCreate+0x1e>
    1394:	28 81       	ld	r18, Y
    1396:	39 81       	ldd	r19, Y+1	; 0x01
    1398:	30 93 c0 06 	sts	0x06C0, r19
    139c:	20 93 bf 06 	sts	0x06BF, r18
    13a0:	78 94       	sei
    13a2:	20 97       	sbiw	r28, 0x00	; 0
    13a4:	39 f0       	breq	.+14     	; 0x13b4 <OSMboxCreate+0x32>
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	2c 87       	std	Y+12, r18	; 0x0c
    13aa:	99 83       	std	Y+1, r25	; 0x01
    13ac:	88 83       	st	Y, r24
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 48 08 	call	0x1090	; 0x1090 <OSEventWaitListInit>
    13b4:	ce 01       	movw	r24, r28
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	08 95       	ret

000013bc <OSMboxPost>:
    13bc:	f8 94       	cli
    13be:	fc 01       	movw	r30, r24
    13c0:	24 85       	ldd	r18, Z+12	; 0x0c
    13c2:	21 30       	cpi	r18, 0x01	; 1
    13c4:	19 f0       	breq	.+6      	; 0x13cc <OSMboxPost+0x10>
    13c6:	78 94       	sei
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	08 95       	ret
    13cc:	fc 01       	movw	r30, r24
    13ce:	25 85       	ldd	r18, Z+13	; 0x0d
    13d0:	22 23       	and	r18, r18
    13d2:	41 f0       	breq	.+16     	; 0x13e4 <OSMboxPost+0x28>
    13d4:	42 e0       	ldi	r20, 0x02	; 2
    13d6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <OSEventTaskRdy>
    13da:	78 94       	sei
    13dc:	0e 94 99 08 	call	0x1132	; 0x1132 <OSSched>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	23 2b       	or	r18, r19
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <OSMboxPost+0x38>
    13ee:	78 94       	sei
    13f0:	84 e1       	ldi	r24, 0x14	; 20
    13f2:	08 95       	ret
    13f4:	fc 01       	movw	r30, r24
    13f6:	71 83       	std	Z+1, r23	; 0x01
    13f8:	60 83       	st	Z, r22
    13fa:	78 94       	sei
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	08 95       	ret

00001400 <OSSemCreate>:
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	f8 94       	cli
    1406:	c0 91 bf 06 	lds	r28, 0x06BF
    140a:	d0 91 c0 06 	lds	r29, 0x06C0
    140e:	20 97       	sbiw	r28, 0x00	; 0
    1410:	31 f0       	breq	.+12     	; 0x141e <OSSemCreate+0x1e>
    1412:	28 81       	ld	r18, Y
    1414:	39 81       	ldd	r19, Y+1	; 0x01
    1416:	30 93 c0 06 	sts	0x06C0, r19
    141a:	20 93 bf 06 	sts	0x06BF, r18
    141e:	78 94       	sei
    1420:	20 97       	sbiw	r28, 0x00	; 0
    1422:	39 f0       	breq	.+14     	; 0x1432 <OSSemCreate+0x32>
    1424:	23 e0       	ldi	r18, 0x03	; 3
    1426:	2c 87       	std	Y+12, r18	; 0x0c
    1428:	9b 87       	std	Y+11, r25	; 0x0b
    142a:	8a 87       	std	Y+10, r24	; 0x0a
    142c:	ce 01       	movw	r24, r28
    142e:	0e 94 48 08 	call	0x1090	; 0x1090 <OSEventWaitListInit>
    1432:	ce 01       	movw	r24, r28
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <OSSemPend>:
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	8a 01       	movw	r16, r20
    1446:	f8 94       	cli
    1448:	8c 85       	ldd	r24, Y+12	; 0x0c
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	21 f0       	breq	.+8      	; 0x1456 <OSSemPend+0x1c>
    144e:	78 94       	sei
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	fa 01       	movw	r30, r20
    1454:	80 83       	st	Z, r24
    1456:	8a 85       	ldd	r24, Y+10	; 0x0a
    1458:	9b 85       	ldd	r25, Y+11	; 0x0b
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	39 f0       	breq	.+14     	; 0x146c <OSSemPend+0x32>
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9b 87       	std	Y+11, r25	; 0x0b
    1462:	8a 87       	std	Y+10, r24	; 0x0a
    1464:	78 94       	sei
    1466:	f8 01       	movw	r30, r16
    1468:	10 82       	st	Z, r1
    146a:	2d c0       	rjmp	.+90     	; 0x14c6 <OSSemPend+0x8c>
    146c:	80 91 c1 06 	lds	r24, 0x06C1
    1470:	88 23       	and	r24, r24
    1472:	29 f0       	breq	.+10     	; 0x147e <OSSemPend+0x44>
    1474:	78 94       	sei
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	f8 01       	movw	r30, r16
    147a:	80 83       	st	Z, r24
    147c:	24 c0       	rjmp	.+72     	; 0x14c6 <OSSemPend+0x8c>
    147e:	e0 91 c2 06 	lds	r30, 0x06C2
    1482:	f0 91 c3 06 	lds	r31, 0x06C3
    1486:	84 85       	ldd	r24, Z+12	; 0x0c
    1488:	81 60       	ori	r24, 0x01	; 1
    148a:	84 87       	std	Z+12, r24	; 0x0c
    148c:	73 87       	std	Z+11, r23	; 0x0b
    148e:	62 87       	std	Z+10, r22	; 0x0a
    1490:	ce 01       	movw	r24, r28
    1492:	0e 94 fa 07 	call	0xff4	; 0xff4 <OSEventTaskWait>
    1496:	78 94       	sei
    1498:	0e 94 99 08 	call	0x1132	; 0x1132 <OSSched>
    149c:	f8 94       	cli
    149e:	e0 91 c2 06 	lds	r30, 0x06C2
    14a2:	f0 91 c3 06 	lds	r31, 0x06C3
    14a6:	84 85       	ldd	r24, Z+12	; 0x0c
    14a8:	80 ff       	sbrs	r24, 0
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <OSSemPend+0x82>
    14ac:	ce 01       	movw	r24, r28
    14ae:	0e 94 29 08 	call	0x1052	; 0x1052 <OSEventTO>
    14b2:	78 94       	sei
    14b4:	8a e0       	ldi	r24, 0x0A	; 10
    14b6:	f8 01       	movw	r30, r16
    14b8:	80 83       	st	Z, r24
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <OSSemPend+0x8c>
    14bc:	17 82       	std	Z+7, r1	; 0x07
    14be:	16 82       	std	Z+6, r1	; 0x06
    14c0:	78 94       	sei
    14c2:	f8 01       	movw	r30, r16
    14c4:	10 82       	st	Z, r1
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <OSTaskCreate>:
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	b2 2e       	mov	r11, r18
    14e4:	2f e3       	ldi	r18, 0x3F	; 63
    14e6:	2b 15       	cp	r18, r11
    14e8:	08 f4       	brcc	.+2      	; 0x14ec <OSTaskCreate+0x1c>
    14ea:	4f c0       	rjmp	.+158    	; 0x158a <OSTaskCreate+0xba>
    14ec:	f8 94       	cli
    14ee:	cb 2d       	mov	r28, r11
    14f0:	d0 e0       	ldi	r29, 0x00	; 0
    14f2:	fe 01       	movw	r30, r28
    14f4:	ee 0f       	add	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	eb 5a       	subi	r30, 0xAB	; 171
    14fa:	f8 4f       	sbci	r31, 0xF8	; 248
    14fc:	01 90       	ld	r0, Z+
    14fe:	f0 81       	ld	r31, Z
    1500:	e0 2d       	mov	r30, r0
    1502:	ef 2b       	or	r30, r31
    1504:	09 f0       	breq	.+2      	; 0x1508 <OSTaskCreate+0x38>
    1506:	3e c0       	rjmp	.+124    	; 0x1584 <OSTaskCreate+0xb4>
    1508:	fe 01       	movw	r30, r28
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	eb 5a       	subi	r30, 0xAB	; 171
    1510:	f8 4f       	sbci	r31, 0xF8	; 248
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	31 83       	std	Z+1, r19	; 0x01
    1518:	20 83       	st	Z, r18
    151a:	78 94       	sei
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	0e 94 57 07 	call	0xeae	; 0xeae <OSTaskStkInit>
    1524:	c1 2c       	mov	r12, r1
    1526:	d1 2c       	mov	r13, r1
    1528:	e1 2c       	mov	r14, r1
    152a:	f1 2c       	mov	r15, r1
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	bc 01       	movw	r22, r24
    153a:	8b 2d       	mov	r24, r11
    153c:	0e 94 09 09 	call	0x1212	; 0x1212 <OSTCBInit>
    1540:	81 11       	cpse	r24, r1
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <OSTaskCreate+0xa2>
    1544:	f8 94       	cli
    1546:	80 91 b3 06 	lds	r24, 0x06B3
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	80 93 b3 06 	sts	0x06B3, r24
    1550:	cc 0f       	add	r28, r28
    1552:	dd 1f       	adc	r29, r29
    1554:	cb 5a       	subi	r28, 0xAB	; 171
    1556:	d8 4f       	sbci	r29, 0xF8	; 248
    1558:	88 81       	ld	r24, Y
    155a:	99 81       	ldd	r25, Y+1	; 0x01
    155c:	0e 94 a1 07 	call	0xf42	; 0xf42 <OSTaskCreateHook>
    1560:	78 94       	sei
    1562:	80 91 9f 06 	lds	r24, 0x069F
    1566:	88 23       	and	r24, r24
    1568:	91 f0       	breq	.+36     	; 0x158e <OSTaskCreate+0xbe>
    156a:	0e 94 99 08 	call	0x1132	; 0x1132 <OSSched>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0f c0       	rjmp	.+30     	; 0x1590 <OSTaskCreate+0xc0>
    1572:	f8 94       	cli
    1574:	cc 0f       	add	r28, r28
    1576:	dd 1f       	adc	r29, r29
    1578:	cb 5a       	subi	r28, 0xAB	; 171
    157a:	d8 4f       	sbci	r29, 0xF8	; 248
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	18 82       	st	Y, r1
    1580:	78 94       	sei
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <OSTaskCreate+0xc0>
    1584:	78 94       	sei
    1586:	88 e2       	ldi	r24, 0x28	; 40
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <OSTaskCreate+0xc0>
    158a:	8a e2       	ldi	r24, 0x2A	; 42
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <OSTaskCreate+0xc0>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	08 95       	ret

000015a4 <OSInit>:
    15a4:	10 92 c4 06 	sts	0x06C4, r1
    15a8:	10 92 c5 06 	sts	0x06C5, r1
    15ac:	10 92 c6 06 	sts	0x06C6, r1
    15b0:	10 92 c7 06 	sts	0x06C7, r1
    15b4:	10 92 c1 06 	sts	0x06C1, r1
    15b8:	10 92 9e 06 	sts	0x069E, r1
    15bc:	10 92 b3 06 	sts	0x06B3, r1
    15c0:	10 92 9f 06 	sts	0x069F, r1
    15c4:	10 92 a0 06 	sts	0x06A0, r1
    15c8:	10 92 a1 06 	sts	0x06A1, r1
    15cc:	10 92 a2 06 	sts	0x06A2, r1
    15d0:	10 92 a3 06 	sts	0x06A3, r1
    15d4:	10 92 a8 06 	sts	0x06A8, r1
    15d8:	10 92 a9 06 	sts	0x06A9, r1
    15dc:	10 92 aa 06 	sts	0x06AA, r1
    15e0:	10 92 ab 06 	sts	0x06AB, r1
    15e4:	10 92 b6 06 	sts	0x06B6, r1
    15e8:	e7 eb       	ldi	r30, 0xB7	; 183
    15ea:	f6 e0       	ldi	r31, 0x06	; 6
    15ec:	8f eb       	ldi	r24, 0xBF	; 191
    15ee:	96 e0       	ldi	r25, 0x06	; 6
    15f0:	11 92       	st	Z+, r1
    15f2:	e8 17       	cp	r30, r24
    15f4:	f9 07       	cpc	r31, r25
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <OSInit+0x4c>
    15f8:	10 92 a5 06 	sts	0x06A5, r1
    15fc:	10 92 a4 06 	sts	0x06A4, r1
    1600:	10 92 b5 06 	sts	0x06B5, r1
    1604:	10 92 b4 06 	sts	0x06B4, r1
    1608:	10 92 c3 06 	sts	0x06C3, r1
    160c:	10 92 c2 06 	sts	0x06C2, r1
    1610:	10 92 a7 06 	sts	0x06A7, r1
    1614:	10 92 a6 06 	sts	0x06A6, r1
    1618:	e5 e5       	ldi	r30, 0x55	; 85
    161a:	f7 e0       	ldi	r31, 0x07	; 7
    161c:	85 ed       	ldi	r24, 0xD5	; 213
    161e:	97 e0       	ldi	r25, 0x07	; 7
    1620:	11 92       	st	Z+, r1
    1622:	11 92       	st	Z+, r1
    1624:	e8 17       	cp	r30, r24
    1626:	f9 07       	cpc	r31, r25
    1628:	d9 f7       	brne	.-10     	; 0x1620 <OSInit+0x7c>
    162a:	83 e7       	ldi	r24, 0x73	; 115
    162c:	92 e0       	ldi	r25, 0x02	; 2
    162e:	25 e1       	ldi	r18, 0x15	; 21
    1630:	33 e0       	ldi	r19, 0x03	; 3
    1632:	fc 01       	movw	r30, r24
    1634:	70 97       	sbiw	r30, 0x10	; 16
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	80 83       	st	Z, r24
    163a:	42 96       	adiw	r24, 0x12	; 18
    163c:	82 17       	cp	r24, r18
    163e:	93 07       	cpc	r25, r19
    1640:	c1 f7       	brne	.-16     	; 0x1632 <OSInit+0x8e>
    1642:	10 92 06 03 	sts	0x0306, r1
    1646:	10 92 05 03 	sts	0x0305, r1
    164a:	81 e6       	ldi	r24, 0x61	; 97
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	90 93 b1 06 	sts	0x06B1, r25
    1652:	80 93 b0 06 	sts	0x06B0, r24
    1656:	86 ed       	ldi	r24, 0xD6	; 214
    1658:	96 e0       	ldi	r25, 0x06	; 6
    165a:	24 e5       	ldi	r18, 0x54	; 84
    165c:	37 e0       	ldi	r19, 0x07	; 7
    165e:	fc 01       	movw	r30, r24
    1660:	3e 97       	sbiw	r30, 0x0e	; 14
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	0e 96       	adiw	r24, 0x0e	; 14
    1668:	82 17       	cp	r24, r18
    166a:	93 07       	cpc	r25, r19
    166c:	c1 f7       	brne	.-16     	; 0x165e <OSInit+0xba>
    166e:	10 92 47 07 	sts	0x0747, r1
    1672:	10 92 46 07 	sts	0x0746, r1
    1676:	88 ec       	ldi	r24, 0xC8	; 200
    1678:	96 e0       	ldi	r25, 0x06	; 6
    167a:	90 93 c0 06 	sts	0x06C0, r25
    167e:	80 93 bf 06 	sts	0x06BF, r24
    1682:	2f e3       	ldi	r18, 0x3F	; 63
    1684:	44 e9       	ldi	r20, 0x94	; 148
    1686:	53 e0       	ldi	r21, 0x03	; 3
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	84 ea       	ldi	r24, 0xA4	; 164
    168e:	97 e0       	ldi	r25, 0x07	; 7
    1690:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
    1694:	2e e3       	ldi	r18, 0x3E	; 62
    1696:	44 e5       	ldi	r20, 0x54	; 84
    1698:	53 e0       	ldi	r21, 0x03	; 3
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8b e9       	ldi	r24, 0x9B	; 155
    16a0:	9b e0       	ldi	r25, 0x0B	; 11
    16a2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <OSTaskCreate>
    16a6:	08 95       	ret

000016a8 <OSTimeDly>:
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	e1 f0       	breq	.+56     	; 0x16e4 <OSTimeDly+0x3c>
    16ac:	f8 94       	cli
    16ae:	e0 91 c2 06 	lds	r30, 0x06C2
    16b2:	f0 91 c3 06 	lds	r31, 0x06C3
    16b6:	a7 85       	ldd	r26, Z+15	; 0x0f
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	a9 54       	subi	r26, 0x49	; 73
    16bc:	b9 4f       	sbci	r27, 0xF9	; 249
    16be:	20 89       	ldd	r18, Z+16	; 0x10
    16c0:	20 95       	com	r18
    16c2:	3c 91       	ld	r19, X
    16c4:	23 23       	and	r18, r19
    16c6:	2c 93       	st	X, r18
    16c8:	21 11       	cpse	r18, r1
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <OSTimeDly+0x32>
    16cc:	21 89       	ldd	r18, Z+17	; 0x11
    16ce:	20 95       	com	r18
    16d0:	30 91 b6 06 	lds	r19, 0x06B6
    16d4:	23 23       	and	r18, r19
    16d6:	20 93 b6 06 	sts	0x06B6, r18
    16da:	93 87       	std	Z+11, r25	; 0x0b
    16dc:	82 87       	std	Z+10, r24	; 0x0a
    16de:	78 94       	sei
    16e0:	0e 94 99 08 	call	0x1132	; 0x1132 <OSSched>
    16e4:	08 95       	ret

000016e6 <OSStatInit>:
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
    16ee:	f8 94       	cli
    16f0:	10 92 a0 06 	sts	0x06A0, r1
    16f4:	10 92 a1 06 	sts	0x06A1, r1
    16f8:	10 92 a2 06 	sts	0x06A2, r1
    16fc:	10 92 a3 06 	sts	0x06A3, r1
    1700:	78 94       	sei
    1702:	88 ec       	ldi	r24, 0xC8	; 200
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
    170a:	f8 94       	cli
    170c:	80 91 a0 06 	lds	r24, 0x06A0
    1710:	90 91 a1 06 	lds	r25, 0x06A1
    1714:	a0 91 a2 06 	lds	r26, 0x06A2
    1718:	b0 91 a3 06 	lds	r27, 0x06A3
    171c:	80 93 ac 06 	sts	0x06AC, r24
    1720:	90 93 ad 06 	sts	0x06AD, r25
    1724:	a0 93 ae 06 	sts	0x06AE, r26
    1728:	b0 93 af 06 	sts	0x06AF, r27
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 54 07 	sts	0x0754, r24
    1732:	78 94       	sei
    1734:	08 95       	ret

00001736 <OSTaskStat>:
    1736:	80 91 54 07 	lds	r24, 0x0754
    173a:	81 11       	cpse	r24, r1
    173c:	08 c0       	rjmp	.+16     	; 0x174e <OSTaskStat+0x18>
    173e:	80 e9       	ldi	r24, 0x90	; 144
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
    1746:	80 91 54 07 	lds	r24, 0x0754
    174a:	88 23       	and	r24, r24
    174c:	c1 f3       	breq	.-16     	; 0x173e <OSTaskStat+0x8>
    174e:	c4 e6       	ldi	r28, 0x64	; 100
    1750:	f8 94       	cli
    1752:	20 91 a0 06 	lds	r18, 0x06A0
    1756:	30 91 a1 06 	lds	r19, 0x06A1
    175a:	40 91 a2 06 	lds	r20, 0x06A2
    175e:	50 91 a3 06 	lds	r21, 0x06A3
    1762:	20 93 d5 07 	sts	0x07D5, r18
    1766:	30 93 d6 07 	sts	0x07D6, r19
    176a:	40 93 d7 07 	sts	0x07D7, r20
    176e:	50 93 d8 07 	sts	0x07D8, r21
    1772:	10 92 a0 06 	sts	0x06A0, r1
    1776:	10 92 a1 06 	sts	0x06A1, r1
    177a:	10 92 a2 06 	sts	0x06A2, r1
    177e:	10 92 a3 06 	sts	0x06A3, r1
    1782:	78 94       	sei
    1784:	c0 90 ac 06 	lds	r12, 0x06AC
    1788:	d0 90 ad 06 	lds	r13, 0x06AD
    178c:	e0 90 ae 06 	lds	r14, 0x06AE
    1790:	f0 90 af 06 	lds	r15, 0x06AF
    1794:	c1 14       	cp	r12, r1
    1796:	d1 04       	cpc	r13, r1
    1798:	e1 04       	cpc	r14, r1
    179a:	f1 04       	cpc	r15, r1
    179c:	b9 f0       	breq	.+46     	; 0x17cc <OSTaskStat+0x96>
    179e:	a4 e6       	ldi	r26, 0x64	; 100
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__muluhisi3>
    17a6:	a7 01       	movw	r20, r14
    17a8:	96 01       	movw	r18, r12
    17aa:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__udivmodsi4>
    17ae:	8c 2f       	mov	r24, r28
    17b0:	82 1b       	sub	r24, r18
    17b2:	85 36       	cpi	r24, 0x65	; 101
    17b4:	1c f0       	brlt	.+6      	; 0x17bc <OSTaskStat+0x86>
    17b6:	c0 93 b2 06 	sts	0x06B2, r28
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <OSTaskStat+0x9a>
    17bc:	88 23       	and	r24, r24
    17be:	1c f4       	brge	.+6      	; 0x17c6 <OSTaskStat+0x90>
    17c0:	10 92 b2 06 	sts	0x06B2, r1
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <OSTaskStat+0x9a>
    17c6:	80 93 b2 06 	sts	0x06B2, r24
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <OSTaskStat+0x9a>
    17cc:	10 92 b2 06 	sts	0x06B2, r1
    17d0:	0e 94 a2 07 	call	0xf44	; 0xf44 <OSTaskStatHook>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <OSTimeDly>
    17dc:	b9 cf       	rjmp	.-142    	; 0x1750 <OSTaskStat+0x1a>

000017de <__subsf3>:
    17de:	50 58       	subi	r21, 0x80	; 128

000017e0 <__addsf3>:
    17e0:	bb 27       	eor	r27, r27
    17e2:	aa 27       	eor	r26, r26
    17e4:	0e d0       	rcall	.+28     	; 0x1802 <__addsf3x>
    17e6:	0b c1       	rjmp	.+534    	; 0x19fe <__fp_round>
    17e8:	fc d0       	rcall	.+504    	; 0x19e2 <__fp_pscA>
    17ea:	30 f0       	brcs	.+12     	; 0x17f8 <__addsf3+0x18>
    17ec:	01 d1       	rcall	.+514    	; 0x19f0 <__fp_pscB>
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <__addsf3+0x18>
    17f0:	31 f4       	brne	.+12     	; 0x17fe <__addsf3+0x1e>
    17f2:	9f 3f       	cpi	r25, 0xFF	; 255
    17f4:	11 f4       	brne	.+4      	; 0x17fa <__addsf3+0x1a>
    17f6:	1e f4       	brtc	.+6      	; 0x17fe <__addsf3+0x1e>
    17f8:	f1 c0       	rjmp	.+482    	; 0x19dc <__fp_nan>
    17fa:	0e f4       	brtc	.+2      	; 0x17fe <__addsf3+0x1e>
    17fc:	e0 95       	com	r30
    17fe:	e7 fb       	bst	r30, 7
    1800:	e7 c0       	rjmp	.+462    	; 0x19d0 <__fp_inf>

00001802 <__addsf3x>:
    1802:	e9 2f       	mov	r30, r25
    1804:	0d d1       	rcall	.+538    	; 0x1a20 <__fp_split3>
    1806:	80 f3       	brcs	.-32     	; 0x17e8 <__addsf3+0x8>
    1808:	ba 17       	cp	r27, r26
    180a:	62 07       	cpc	r22, r18
    180c:	73 07       	cpc	r23, r19
    180e:	84 07       	cpc	r24, r20
    1810:	95 07       	cpc	r25, r21
    1812:	18 f0       	brcs	.+6      	; 0x181a <__addsf3x+0x18>
    1814:	71 f4       	brne	.+28     	; 0x1832 <__addsf3x+0x30>
    1816:	9e f5       	brtc	.+102    	; 0x187e <__addsf3x+0x7c>
    1818:	25 c1       	rjmp	.+586    	; 0x1a64 <__fp_zero>
    181a:	0e f4       	brtc	.+2      	; 0x181e <__addsf3x+0x1c>
    181c:	e0 95       	com	r30
    181e:	0b 2e       	mov	r0, r27
    1820:	ba 2f       	mov	r27, r26
    1822:	a0 2d       	mov	r26, r0
    1824:	0b 01       	movw	r0, r22
    1826:	b9 01       	movw	r22, r18
    1828:	90 01       	movw	r18, r0
    182a:	0c 01       	movw	r0, r24
    182c:	ca 01       	movw	r24, r20
    182e:	a0 01       	movw	r20, r0
    1830:	11 24       	eor	r1, r1
    1832:	ff 27       	eor	r31, r31
    1834:	59 1b       	sub	r21, r25
    1836:	99 f0       	breq	.+38     	; 0x185e <__addsf3x+0x5c>
    1838:	59 3f       	cpi	r21, 0xF9	; 249
    183a:	50 f4       	brcc	.+20     	; 0x1850 <__addsf3x+0x4e>
    183c:	50 3e       	cpi	r21, 0xE0	; 224
    183e:	68 f1       	brcs	.+90     	; 0x189a <__addsf3x+0x98>
    1840:	1a 16       	cp	r1, r26
    1842:	f0 40       	sbci	r31, 0x00	; 0
    1844:	a2 2f       	mov	r26, r18
    1846:	23 2f       	mov	r18, r19
    1848:	34 2f       	mov	r19, r20
    184a:	44 27       	eor	r20, r20
    184c:	58 5f       	subi	r21, 0xF8	; 248
    184e:	f3 cf       	rjmp	.-26     	; 0x1836 <__addsf3x+0x34>
    1850:	46 95       	lsr	r20
    1852:	37 95       	ror	r19
    1854:	27 95       	ror	r18
    1856:	a7 95       	ror	r26
    1858:	f0 40       	sbci	r31, 0x00	; 0
    185a:	53 95       	inc	r21
    185c:	c9 f7       	brne	.-14     	; 0x1850 <__addsf3x+0x4e>
    185e:	7e f4       	brtc	.+30     	; 0x187e <__addsf3x+0x7c>
    1860:	1f 16       	cp	r1, r31
    1862:	ba 0b       	sbc	r27, r26
    1864:	62 0b       	sbc	r22, r18
    1866:	73 0b       	sbc	r23, r19
    1868:	84 0b       	sbc	r24, r20
    186a:	ba f0       	brmi	.+46     	; 0x189a <__addsf3x+0x98>
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	a1 f0       	breq	.+40     	; 0x1898 <__addsf3x+0x96>
    1870:	ff 0f       	add	r31, r31
    1872:	bb 1f       	adc	r27, r27
    1874:	66 1f       	adc	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	c2 f7       	brpl	.-16     	; 0x186c <__addsf3x+0x6a>
    187c:	0e c0       	rjmp	.+28     	; 0x189a <__addsf3x+0x98>
    187e:	ba 0f       	add	r27, r26
    1880:	62 1f       	adc	r22, r18
    1882:	73 1f       	adc	r23, r19
    1884:	84 1f       	adc	r24, r20
    1886:	48 f4       	brcc	.+18     	; 0x189a <__addsf3x+0x98>
    1888:	87 95       	ror	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	b7 95       	ror	r27
    1890:	f7 95       	ror	r31
    1892:	9e 3f       	cpi	r25, 0xFE	; 254
    1894:	08 f0       	brcs	.+2      	; 0x1898 <__addsf3x+0x96>
    1896:	b3 cf       	rjmp	.-154    	; 0x17fe <__addsf3+0x1e>
    1898:	93 95       	inc	r25
    189a:	88 0f       	add	r24, r24
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <__addsf3x+0x9e>
    189e:	99 27       	eor	r25, r25
    18a0:	ee 0f       	add	r30, r30
    18a2:	97 95       	ror	r25
    18a4:	87 95       	ror	r24
    18a6:	08 95       	ret

000018a8 <__divsf3>:
    18a8:	0c d0       	rcall	.+24     	; 0x18c2 <__divsf3x>
    18aa:	a9 c0       	rjmp	.+338    	; 0x19fe <__fp_round>
    18ac:	a1 d0       	rcall	.+322    	; 0x19f0 <__fp_pscB>
    18ae:	40 f0       	brcs	.+16     	; 0x18c0 <__divsf3+0x18>
    18b0:	98 d0       	rcall	.+304    	; 0x19e2 <__fp_pscA>
    18b2:	30 f0       	brcs	.+12     	; 0x18c0 <__divsf3+0x18>
    18b4:	21 f4       	brne	.+8      	; 0x18be <__divsf3+0x16>
    18b6:	5f 3f       	cpi	r21, 0xFF	; 255
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <__divsf3+0x18>
    18ba:	8a c0       	rjmp	.+276    	; 0x19d0 <__fp_inf>
    18bc:	51 11       	cpse	r21, r1
    18be:	d3 c0       	rjmp	.+422    	; 0x1a66 <__fp_szero>
    18c0:	8d c0       	rjmp	.+282    	; 0x19dc <__fp_nan>

000018c2 <__divsf3x>:
    18c2:	ae d0       	rcall	.+348    	; 0x1a20 <__fp_split3>
    18c4:	98 f3       	brcs	.-26     	; 0x18ac <__divsf3+0x4>

000018c6 <__divsf3_pse>:
    18c6:	99 23       	and	r25, r25
    18c8:	c9 f3       	breq	.-14     	; 0x18bc <__divsf3+0x14>
    18ca:	55 23       	and	r21, r21
    18cc:	b1 f3       	breq	.-20     	; 0x18ba <__divsf3+0x12>
    18ce:	95 1b       	sub	r25, r21
    18d0:	55 0b       	sbc	r21, r21
    18d2:	bb 27       	eor	r27, r27
    18d4:	aa 27       	eor	r26, r26
    18d6:	62 17       	cp	r22, r18
    18d8:	73 07       	cpc	r23, r19
    18da:	84 07       	cpc	r24, r20
    18dc:	38 f0       	brcs	.+14     	; 0x18ec <__divsf3_pse+0x26>
    18de:	9f 5f       	subi	r25, 0xFF	; 255
    18e0:	5f 4f       	sbci	r21, 0xFF	; 255
    18e2:	22 0f       	add	r18, r18
    18e4:	33 1f       	adc	r19, r19
    18e6:	44 1f       	adc	r20, r20
    18e8:	aa 1f       	adc	r26, r26
    18ea:	a9 f3       	breq	.-22     	; 0x18d6 <__divsf3_pse+0x10>
    18ec:	33 d0       	rcall	.+102    	; 0x1954 <__divsf3_pse+0x8e>
    18ee:	0e 2e       	mov	r0, r30
    18f0:	3a f0       	brmi	.+14     	; 0x1900 <__divsf3_pse+0x3a>
    18f2:	e0 e8       	ldi	r30, 0x80	; 128
    18f4:	30 d0       	rcall	.+96     	; 0x1956 <__divsf3_pse+0x90>
    18f6:	91 50       	subi	r25, 0x01	; 1
    18f8:	50 40       	sbci	r21, 0x00	; 0
    18fa:	e6 95       	lsr	r30
    18fc:	00 1c       	adc	r0, r0
    18fe:	ca f7       	brpl	.-14     	; 0x18f2 <__divsf3_pse+0x2c>
    1900:	29 d0       	rcall	.+82     	; 0x1954 <__divsf3_pse+0x8e>
    1902:	fe 2f       	mov	r31, r30
    1904:	27 d0       	rcall	.+78     	; 0x1954 <__divsf3_pse+0x8e>
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	bb 1f       	adc	r27, r27
    190e:	26 17       	cp	r18, r22
    1910:	37 07       	cpc	r19, r23
    1912:	48 07       	cpc	r20, r24
    1914:	ab 07       	cpc	r26, r27
    1916:	b0 e8       	ldi	r27, 0x80	; 128
    1918:	09 f0       	breq	.+2      	; 0x191c <__divsf3_pse+0x56>
    191a:	bb 0b       	sbc	r27, r27
    191c:	80 2d       	mov	r24, r0
    191e:	bf 01       	movw	r22, r30
    1920:	ff 27       	eor	r31, r31
    1922:	93 58       	subi	r25, 0x83	; 131
    1924:	5f 4f       	sbci	r21, 0xFF	; 255
    1926:	2a f0       	brmi	.+10     	; 0x1932 <__divsf3_pse+0x6c>
    1928:	9e 3f       	cpi	r25, 0xFE	; 254
    192a:	51 05       	cpc	r21, r1
    192c:	68 f0       	brcs	.+26     	; 0x1948 <__divsf3_pse+0x82>
    192e:	50 c0       	rjmp	.+160    	; 0x19d0 <__fp_inf>
    1930:	9a c0       	rjmp	.+308    	; 0x1a66 <__fp_szero>
    1932:	5f 3f       	cpi	r21, 0xFF	; 255
    1934:	ec f3       	brlt	.-6      	; 0x1930 <__divsf3_pse+0x6a>
    1936:	98 3e       	cpi	r25, 0xE8	; 232
    1938:	dc f3       	brlt	.-10     	; 0x1930 <__divsf3_pse+0x6a>
    193a:	86 95       	lsr	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	b7 95       	ror	r27
    1942:	f7 95       	ror	r31
    1944:	9f 5f       	subi	r25, 0xFF	; 255
    1946:	c9 f7       	brne	.-14     	; 0x193a <__divsf3_pse+0x74>
    1948:	88 0f       	add	r24, r24
    194a:	91 1d       	adc	r25, r1
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	97 f9       	bld	r25, 7
    1952:	08 95       	ret
    1954:	e1 e0       	ldi	r30, 0x01	; 1
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	bb 1f       	adc	r27, r27
    195e:	62 17       	cp	r22, r18
    1960:	73 07       	cpc	r23, r19
    1962:	84 07       	cpc	r24, r20
    1964:	ba 07       	cpc	r27, r26
    1966:	20 f0       	brcs	.+8      	; 0x1970 <__divsf3_pse+0xaa>
    1968:	62 1b       	sub	r22, r18
    196a:	73 0b       	sbc	r23, r19
    196c:	84 0b       	sbc	r24, r20
    196e:	ba 0b       	sbc	r27, r26
    1970:	ee 1f       	adc	r30, r30
    1972:	88 f7       	brcc	.-30     	; 0x1956 <__divsf3_pse+0x90>
    1974:	e0 95       	com	r30
    1976:	08 95       	ret

00001978 <__fixunssfsi>:
    1978:	5b d0       	rcall	.+182    	; 0x1a30 <__fp_splitA>
    197a:	88 f0       	brcs	.+34     	; 0x199e <__fixunssfsi+0x26>
    197c:	9f 57       	subi	r25, 0x7F	; 127
    197e:	90 f0       	brcs	.+36     	; 0x19a4 <__fixunssfsi+0x2c>
    1980:	b9 2f       	mov	r27, r25
    1982:	99 27       	eor	r25, r25
    1984:	b7 51       	subi	r27, 0x17	; 23
    1986:	a0 f0       	brcs	.+40     	; 0x19b0 <__fixunssfsi+0x38>
    1988:	d1 f0       	breq	.+52     	; 0x19be <__fixunssfsi+0x46>
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	1a f0       	brmi	.+6      	; 0x199a <__fixunssfsi+0x22>
    1994:	ba 95       	dec	r27
    1996:	c9 f7       	brne	.-14     	; 0x198a <__fixunssfsi+0x12>
    1998:	12 c0       	rjmp	.+36     	; 0x19be <__fixunssfsi+0x46>
    199a:	b1 30       	cpi	r27, 0x01	; 1
    199c:	81 f0       	breq	.+32     	; 0x19be <__fixunssfsi+0x46>
    199e:	62 d0       	rcall	.+196    	; 0x1a64 <__fp_zero>
    19a0:	b1 e0       	ldi	r27, 0x01	; 1
    19a2:	08 95       	ret
    19a4:	5f c0       	rjmp	.+190    	; 0x1a64 <__fp_zero>
    19a6:	67 2f       	mov	r22, r23
    19a8:	78 2f       	mov	r23, r24
    19aa:	88 27       	eor	r24, r24
    19ac:	b8 5f       	subi	r27, 0xF8	; 248
    19ae:	39 f0       	breq	.+14     	; 0x19be <__fixunssfsi+0x46>
    19b0:	b9 3f       	cpi	r27, 0xF9	; 249
    19b2:	cc f3       	brlt	.-14     	; 0x19a6 <__fixunssfsi+0x2e>
    19b4:	86 95       	lsr	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b3 95       	inc	r27
    19bc:	d9 f7       	brne	.-10     	; 0x19b4 <__fixunssfsi+0x3c>
    19be:	3e f4       	brtc	.+14     	; 0x19ce <__fixunssfsi+0x56>
    19c0:	90 95       	com	r25
    19c2:	80 95       	com	r24
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	08 95       	ret

000019d0 <__fp_inf>:
    19d0:	97 f9       	bld	r25, 7
    19d2:	9f 67       	ori	r25, 0x7F	; 127
    19d4:	80 e8       	ldi	r24, 0x80	; 128
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	08 95       	ret

000019dc <__fp_nan>:
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	80 ec       	ldi	r24, 0xC0	; 192
    19e0:	08 95       	ret

000019e2 <__fp_pscA>:
    19e2:	00 24       	eor	r0, r0
    19e4:	0a 94       	dec	r0
    19e6:	16 16       	cp	r1, r22
    19e8:	17 06       	cpc	r1, r23
    19ea:	18 06       	cpc	r1, r24
    19ec:	09 06       	cpc	r0, r25
    19ee:	08 95       	ret

000019f0 <__fp_pscB>:
    19f0:	00 24       	eor	r0, r0
    19f2:	0a 94       	dec	r0
    19f4:	12 16       	cp	r1, r18
    19f6:	13 06       	cpc	r1, r19
    19f8:	14 06       	cpc	r1, r20
    19fa:	05 06       	cpc	r0, r21
    19fc:	08 95       	ret

000019fe <__fp_round>:
    19fe:	09 2e       	mov	r0, r25
    1a00:	03 94       	inc	r0
    1a02:	00 0c       	add	r0, r0
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <__fp_round+0xc>
    1a06:	88 23       	and	r24, r24
    1a08:	52 f0       	brmi	.+20     	; 0x1a1e <__fp_round+0x20>
    1a0a:	bb 0f       	add	r27, r27
    1a0c:	40 f4       	brcc	.+16     	; 0x1a1e <__fp_round+0x20>
    1a0e:	bf 2b       	or	r27, r31
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <__fp_round+0x18>
    1a12:	60 ff       	sbrs	r22, 0
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__fp_round+0x20>
    1a16:	6f 5f       	subi	r22, 0xFF	; 255
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1e:	08 95       	ret

00001a20 <__fp_split3>:
    1a20:	57 fd       	sbrc	r21, 7
    1a22:	90 58       	subi	r25, 0x80	; 128
    1a24:	44 0f       	add	r20, r20
    1a26:	55 1f       	adc	r21, r21
    1a28:	59 f0       	breq	.+22     	; 0x1a40 <__fp_splitA+0x10>
    1a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2c:	71 f0       	breq	.+28     	; 0x1a4a <__fp_splitA+0x1a>
    1a2e:	47 95       	ror	r20

00001a30 <__fp_splitA>:
    1a30:	88 0f       	add	r24, r24
    1a32:	97 fb       	bst	r25, 7
    1a34:	99 1f       	adc	r25, r25
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <__fp_splitA+0x20>
    1a38:	9f 3f       	cpi	r25, 0xFF	; 255
    1a3a:	79 f0       	breq	.+30     	; 0x1a5a <__fp_splitA+0x2a>
    1a3c:	87 95       	ror	r24
    1a3e:	08 95       	ret
    1a40:	12 16       	cp	r1, r18
    1a42:	13 06       	cpc	r1, r19
    1a44:	14 06       	cpc	r1, r20
    1a46:	55 1f       	adc	r21, r21
    1a48:	f2 cf       	rjmp	.-28     	; 0x1a2e <__fp_split3+0xe>
    1a4a:	46 95       	lsr	r20
    1a4c:	f1 df       	rcall	.-30     	; 0x1a30 <__fp_splitA>
    1a4e:	08 c0       	rjmp	.+16     	; 0x1a60 <__fp_splitA+0x30>
    1a50:	16 16       	cp	r1, r22
    1a52:	17 06       	cpc	r1, r23
    1a54:	18 06       	cpc	r1, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	f1 cf       	rjmp	.-30     	; 0x1a3c <__fp_splitA+0xc>
    1a5a:	86 95       	lsr	r24
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	61 05       	cpc	r22, r1
    1a60:	08 94       	sec
    1a62:	08 95       	ret

00001a64 <__fp_zero>:
    1a64:	e8 94       	clt

00001a66 <__fp_szero>:
    1a66:	bb 27       	eor	r27, r27
    1a68:	66 27       	eor	r22, r22
    1a6a:	77 27       	eor	r23, r23
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	97 f9       	bld	r25, 7
    1a70:	08 95       	ret

00001a72 <__mulsf3>:
    1a72:	0b d0       	rcall	.+22     	; 0x1a8a <__mulsf3x>
    1a74:	c4 cf       	rjmp	.-120    	; 0x19fe <__fp_round>
    1a76:	b5 df       	rcall	.-150    	; 0x19e2 <__fp_pscA>
    1a78:	28 f0       	brcs	.+10     	; 0x1a84 <__mulsf3+0x12>
    1a7a:	ba df       	rcall	.-140    	; 0x19f0 <__fp_pscB>
    1a7c:	18 f0       	brcs	.+6      	; 0x1a84 <__mulsf3+0x12>
    1a7e:	95 23       	and	r25, r21
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <__mulsf3+0x12>
    1a82:	a6 cf       	rjmp	.-180    	; 0x19d0 <__fp_inf>
    1a84:	ab cf       	rjmp	.-170    	; 0x19dc <__fp_nan>
    1a86:	11 24       	eor	r1, r1
    1a88:	ee cf       	rjmp	.-36     	; 0x1a66 <__fp_szero>

00001a8a <__mulsf3x>:
    1a8a:	ca df       	rcall	.-108    	; 0x1a20 <__fp_split3>
    1a8c:	a0 f3       	brcs	.-24     	; 0x1a76 <__mulsf3+0x4>

00001a8e <__mulsf3_pse>:
    1a8e:	95 9f       	mul	r25, r21
    1a90:	d1 f3       	breq	.-12     	; 0x1a86 <__mulsf3+0x14>
    1a92:	95 0f       	add	r25, r21
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	55 1f       	adc	r21, r21
    1a98:	62 9f       	mul	r22, r18
    1a9a:	f0 01       	movw	r30, r0
    1a9c:	72 9f       	mul	r23, r18
    1a9e:	bb 27       	eor	r27, r27
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	b1 1d       	adc	r27, r1
    1aa4:	63 9f       	mul	r22, r19
    1aa6:	aa 27       	eor	r26, r26
    1aa8:	f0 0d       	add	r31, r0
    1aaa:	b1 1d       	adc	r27, r1
    1aac:	aa 1f       	adc	r26, r26
    1aae:	64 9f       	mul	r22, r20
    1ab0:	66 27       	eor	r22, r22
    1ab2:	b0 0d       	add	r27, r0
    1ab4:	a1 1d       	adc	r26, r1
    1ab6:	66 1f       	adc	r22, r22
    1ab8:	82 9f       	mul	r24, r18
    1aba:	22 27       	eor	r18, r18
    1abc:	b0 0d       	add	r27, r0
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	62 1f       	adc	r22, r18
    1ac2:	73 9f       	mul	r23, r19
    1ac4:	b0 0d       	add	r27, r0
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	62 1f       	adc	r22, r18
    1aca:	83 9f       	mul	r24, r19
    1acc:	a0 0d       	add	r26, r0
    1ace:	61 1d       	adc	r22, r1
    1ad0:	22 1f       	adc	r18, r18
    1ad2:	74 9f       	mul	r23, r20
    1ad4:	33 27       	eor	r19, r19
    1ad6:	a0 0d       	add	r26, r0
    1ad8:	61 1d       	adc	r22, r1
    1ada:	23 1f       	adc	r18, r19
    1adc:	84 9f       	mul	r24, r20
    1ade:	60 0d       	add	r22, r0
    1ae0:	21 1d       	adc	r18, r1
    1ae2:	82 2f       	mov	r24, r18
    1ae4:	76 2f       	mov	r23, r22
    1ae6:	6a 2f       	mov	r22, r26
    1ae8:	11 24       	eor	r1, r1
    1aea:	9f 57       	subi	r25, 0x7F	; 127
    1aec:	50 40       	sbci	r21, 0x00	; 0
    1aee:	8a f0       	brmi	.+34     	; 0x1b12 <__mulsf3_pse+0x84>
    1af0:	e1 f0       	breq	.+56     	; 0x1b2a <__mulsf3_pse+0x9c>
    1af2:	88 23       	and	r24, r24
    1af4:	4a f0       	brmi	.+18     	; 0x1b08 <__mulsf3_pse+0x7a>
    1af6:	ee 0f       	add	r30, r30
    1af8:	ff 1f       	adc	r31, r31
    1afa:	bb 1f       	adc	r27, r27
    1afc:	66 1f       	adc	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	91 50       	subi	r25, 0x01	; 1
    1b04:	50 40       	sbci	r21, 0x00	; 0
    1b06:	a9 f7       	brne	.-22     	; 0x1af2 <__mulsf3_pse+0x64>
    1b08:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0a:	51 05       	cpc	r21, r1
    1b0c:	70 f0       	brcs	.+28     	; 0x1b2a <__mulsf3_pse+0x9c>
    1b0e:	60 cf       	rjmp	.-320    	; 0x19d0 <__fp_inf>
    1b10:	aa cf       	rjmp	.-172    	; 0x1a66 <__fp_szero>
    1b12:	5f 3f       	cpi	r21, 0xFF	; 255
    1b14:	ec f3       	brlt	.-6      	; 0x1b10 <__mulsf3_pse+0x82>
    1b16:	98 3e       	cpi	r25, 0xE8	; 232
    1b18:	dc f3       	brlt	.-10     	; 0x1b10 <__mulsf3_pse+0x82>
    1b1a:	86 95       	lsr	r24
    1b1c:	77 95       	ror	r23
    1b1e:	67 95       	ror	r22
    1b20:	b7 95       	ror	r27
    1b22:	f7 95       	ror	r31
    1b24:	e7 95       	ror	r30
    1b26:	9f 5f       	subi	r25, 0xFF	; 255
    1b28:	c1 f7       	brne	.-16     	; 0x1b1a <__mulsf3_pse+0x8c>
    1b2a:	fe 2b       	or	r31, r30
    1b2c:	88 0f       	add	r24, r24
    1b2e:	91 1d       	adc	r25, r1
    1b30:	96 95       	lsr	r25
    1b32:	87 95       	ror	r24
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__divmodhi4>:
    1b38:	97 fb       	bst	r25, 7
    1b3a:	07 2e       	mov	r0, r23
    1b3c:	16 f4       	brtc	.+4      	; 0x1b42 <__divmodhi4+0xa>
    1b3e:	00 94       	com	r0
    1b40:	07 d0       	rcall	.+14     	; 0x1b50 <__divmodhi4_neg1>
    1b42:	77 fd       	sbrc	r23, 7
    1b44:	09 d0       	rcall	.+18     	; 0x1b58 <__divmodhi4_neg2>
    1b46:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__udivmodhi4>
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	05 d0       	rcall	.+10     	; 0x1b58 <__divmodhi4_neg2>
    1b4e:	3e f4       	brtc	.+14     	; 0x1b5e <__divmodhi4_exit>

00001b50 <__divmodhi4_neg1>:
    1b50:	90 95       	com	r25
    1b52:	81 95       	neg	r24
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	08 95       	ret

00001b58 <__divmodhi4_neg2>:
    1b58:	70 95       	com	r23
    1b5a:	61 95       	neg	r22
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b5e <__divmodhi4_exit>:
    1b5e:	08 95       	ret

00001b60 <__udivmodsi4>:
    1b60:	a1 e2       	ldi	r26, 0x21	; 33
    1b62:	1a 2e       	mov	r1, r26
    1b64:	aa 1b       	sub	r26, r26
    1b66:	bb 1b       	sub	r27, r27
    1b68:	fd 01       	movw	r30, r26
    1b6a:	0d c0       	rjmp	.+26     	; 0x1b86 <__udivmodsi4_ep>

00001b6c <__udivmodsi4_loop>:
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	ee 1f       	adc	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	a2 17       	cp	r26, r18
    1b76:	b3 07       	cpc	r27, r19
    1b78:	e4 07       	cpc	r30, r20
    1b7a:	f5 07       	cpc	r31, r21
    1b7c:	20 f0       	brcs	.+8      	; 0x1b86 <__udivmodsi4_ep>
    1b7e:	a2 1b       	sub	r26, r18
    1b80:	b3 0b       	sbc	r27, r19
    1b82:	e4 0b       	sbc	r30, r20
    1b84:	f5 0b       	sbc	r31, r21

00001b86 <__udivmodsi4_ep>:
    1b86:	66 1f       	adc	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	1a 94       	dec	r1
    1b90:	69 f7       	brne	.-38     	; 0x1b6c <__udivmodsi4_loop>
    1b92:	60 95       	com	r22
    1b94:	70 95       	com	r23
    1b96:	80 95       	com	r24
    1b98:	90 95       	com	r25
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ac 01       	movw	r20, r24
    1b9e:	bd 01       	movw	r22, r26
    1ba0:	cf 01       	movw	r24, r30
    1ba2:	08 95       	ret

00001ba4 <__umulhisi3>:
    1ba4:	a2 9f       	mul	r26, r18
    1ba6:	b0 01       	movw	r22, r0
    1ba8:	b3 9f       	mul	r27, r19
    1baa:	c0 01       	movw	r24, r0
    1bac:	a3 9f       	mul	r26, r19
    1bae:	70 0d       	add	r23, r0
    1bb0:	81 1d       	adc	r24, r1
    1bb2:	11 24       	eor	r1, r1
    1bb4:	91 1d       	adc	r25, r1
    1bb6:	b2 9f       	mul	r27, r18
    1bb8:	70 0d       	add	r23, r0
    1bba:	81 1d       	adc	r24, r1
    1bbc:	11 24       	eor	r1, r1
    1bbe:	91 1d       	adc	r25, r1
    1bc0:	08 95       	ret

00001bc2 <__muluhisi3>:
    1bc2:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__umulhisi3>
    1bc6:	a5 9f       	mul	r26, r21
    1bc8:	90 0d       	add	r25, r0
    1bca:	b4 9f       	mul	r27, r20
    1bcc:	90 0d       	add	r25, r0
    1bce:	a4 9f       	mul	r26, r20
    1bd0:	80 0d       	add	r24, r0
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	11 24       	eor	r1, r1
    1bd6:	08 95       	ret

00001bd8 <__udivmodhi4>:
    1bd8:	aa 1b       	sub	r26, r26
    1bda:	bb 1b       	sub	r27, r27
    1bdc:	51 e1       	ldi	r21, 0x11	; 17
    1bde:	07 c0       	rjmp	.+14     	; 0x1bee <__udivmodhi4_ep>

00001be0 <__udivmodhi4_loop>:
    1be0:	aa 1f       	adc	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	a6 17       	cp	r26, r22
    1be6:	b7 07       	cpc	r27, r23
    1be8:	10 f0       	brcs	.+4      	; 0x1bee <__udivmodhi4_ep>
    1bea:	a6 1b       	sub	r26, r22
    1bec:	b7 0b       	sbc	r27, r23

00001bee <__udivmodhi4_ep>:
    1bee:	88 1f       	adc	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	5a 95       	dec	r21
    1bf4:	a9 f7       	brne	.-22     	; 0x1be0 <__udivmodhi4_loop>
    1bf6:	80 95       	com	r24
    1bf8:	90 95       	com	r25
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	08 95       	ret

00001c00 <strcpy>:
    1c00:	fb 01       	movw	r30, r22
    1c02:	dc 01       	movw	r26, r24
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	00 20       	and	r0, r0
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <strcpy+0x4>
    1c0c:	08 95       	ret

00001c0e <_exit>:
    1c0e:	f8 94       	cli

00001c10 <__stop_program>:
    1c10:	ff cf       	rjmp	.-2      	; 0x1c10 <__stop_program>
