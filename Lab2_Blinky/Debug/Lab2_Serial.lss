
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  000019e6  00001a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000053b  0080025e  0080025e  00001bd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002085  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000794  00000000  00000000  00003e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e7  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00005008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000890  00000000  00000000  00005454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001913  00000000  00000000  00005ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  000075f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e6 ee       	ldi	r30, 0xE6	; 230
     17c:	f9 e1       	ldi	r31, 0x19	; 25
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	ae 35       	cpi	r26, 0x5E	; 94
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	ae e5       	ldi	r26, 0x5E	; 94
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a9 39       	cpi	r26, 0x99	; 153
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <main>
     19e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:
     1a6:	00 91 5f 06 	lds	r16, 0x065F
     1aa:	03 95       	inc	r16
     1ac:	00 93 5f 06 	sts	0x065F, r16
     1b0:	e0 91 74 06 	lds	r30, 0x0674
     1b4:	f0 91 75 06 	lds	r31, 0x0675
     1b8:	c1 91       	ld	r28, Z+
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	d1 91       	ld	r29, Z+
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
     204:	08 95       	ret

00000206 <OSCtxSw>:
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16
     24a:	e0 91 82 06 	lds	r30, 0x0682
     24e:	f0 91 83 06 	lds	r31, 0x0683
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	c1 93       	st	Z+, r28
     256:	de b7       	in	r29, 0x3e	; 62
     258:	d1 93       	st	Z+, r29
     25a:	00 91 64 06 	lds	r16, 0x0664
     25e:	00 93 65 06 	sts	0x0665, r16
     262:	e0 91 74 06 	lds	r30, 0x0674
     266:	f0 91 75 06 	lds	r31, 0x0675
     26a:	e0 93 82 06 	sts	0x0682, r30
     26e:	f0 93 83 06 	sts	0x0683, r31
     272:	c1 91       	ld	r28, Z+
     274:	cd bf       	out	0x3d, r28	; 61
     276:	d1 91       	ld	r29, Z+
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
     2c0:	00 91 64 06 	lds	r16, 0x0664
     2c4:	00 93 65 06 	sts	0x0665, r16
     2c8:	e0 91 74 06 	lds	r30, 0x0674
     2cc:	f0 91 75 06 	lds	r31, 0x0675
     2d0:	e0 93 82 06 	sts	0x0682, r30
     2d4:	f0 93 83 06 	sts	0x0683, r31
     2d8:	c1 91       	ld	r28, Z+
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	d1 91       	ld	r29, Z+
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	08 95       	ret

00000326 <OSTickISR>:
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16
     36c:	00 91 81 06 	lds	r16, 0x0681
     370:	03 95       	inc	r16
     372:	00 93 81 06 	sts	0x0681, r16
     376:	01 30       	cpi	r16, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e0 91 82 06 	lds	r30, 0x0682
     382:	f0 91 83 06 	lds	r31, 0x0683
     386:	c1 93       	st	Z+, r28
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
     38a:	0d ee       	ldi	r16, 0xED	; 237
     38c:	06 bd       	out	0x26, r16	; 38
     38e:	78 94       	sei
     390:	0e 94 51 08 	call	0x10a2	; 0x10a2 <OSTimeTick>
     394:	00 00       	nop
     396:	0e 94 3b 07 	call	0xe76	; 0xe76 <OSIntExit>
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
     3de:	08 95       	ret

000003e0 <WatchDogReset>:
     3e0:	a8 95       	wdr
     3e2:	08 95       	ret

000003e4 <SerTxISR>:
     3e4:	08 95       	ret

000003e6 <TaskStart>:
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OSStatInit>
     3ea:	ec e9       	ldi	r30, 0x9C	; 156
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	8c ed       	ldi	r24, 0xDC	; 220
     3f0:	94 e0       	ldi	r25, 0x04	; 4

	for(i=0;i<NUM_MEAS;i++){
		measArray[i] = 0;
     3f2:	11 92       	st	Z+, r1
     3f4:	11 92       	st	Z+, r1
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */

	for(i=0;i<NUM_MEAS;i++){
     3f6:	e8 17       	cp	r30, r24
     3f8:	f9 07       	cpc	r31, r25
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <TaskStart+0xc>
		measArray[i] = 0;
	}
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     3fc:	2a e0       	ldi	r18, 0x0A	; 10
     3fe:	4d ed       	ldi	r20, 0xDD	; 221
     400:	55 e0       	ldi	r21, 0x05	; 5
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	8a e9       	ldi	r24, 0x9A	; 154
     408:	94 e0       	ldi	r25, 0x04	; 4
     40a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     40e:	24 e1       	ldi	r18, 0x14	; 20
     410:	4d e5       	ldi	r20, 0x5D	; 93
     412:	55 e0       	ldi	r21, 0x05	; 5
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	89 e3       	ldi	r24, 0x39	; 57
     41a:	95 e0       	ldi	r25, 0x05	; 5
     41c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     420:	80 e9       	ldi	r24, 0x90	; 144
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	80 91 1a 04 	lds	r24, 0x041A
     430:	90 91 1b 04 	lds	r25, 0x041B
     434:	0e 94 c8 08 	call	0x1190	; 0x1190 <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     438:	80 e9       	ldi	r24, 0x90	; 144
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     440:	65 e2       	ldi	r22, 0x25	; 37
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	80 91 1a 04 	lds	r24, 0x041A
     448:	90 91 1b 04 	lds	r25, 0x041B
     44c:	0e 94 c8 08 	call	0x1190	; 0x1190 <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     450:	2f e0       	ldi	r18, 0x0F	; 15
     452:	49 e1       	ldi	r20, 0x19	; 25
     454:	54 e0       	ldi	r21, 0x04	; 4
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	87 e4       	ldi	r24, 0x47	; 71
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     462:	2b e0       	ldi	r18, 0x0B	; 11
     464:	4b e9       	ldi	r20, 0x9B	; 155
     466:	54 e0       	ldi	r21, 0x04	; 4
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	8c ee       	ldi	r24, 0xEC	; 236
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     474:	10 92 68 06 	sts	0x0668, r1
     478:	10 92 69 06 	sts	0x0669, r1
     47c:	10 92 6a 06 	sts	0x066A, r1
     480:	10 92 6b 06 	sts	0x066B, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     484:	88 ec       	ldi	r24, 0xC8	; 200
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
     48c:	f3 cf       	rjmp	.-26     	; 0x474 <TaskStart+0x8e>

0000048e <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	a3 97       	sbiw	r28, 0x23	; 35
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
		
		if (rotaryInput != notFound){
			outputAngle = (rotaryInput * unitsPer100Degrees);
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f9 e1       	ldi	r31, 0x19	; 25
     4a6:	cf 2e       	mov	r12, r31
     4a8:	dd 24       	eor	r13, r13
     4aa:	d3 94       	inc	r13
     4ac:	f0 2d       	mov	r31, r0
			//else
			//{
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
     4ae:	0f 2e       	mov	r0, r31
     4b0:	fd e0       	ldi	r31, 0x0D	; 13
     4b2:	8f 2e       	mov	r8, r31
     4b4:	f0 2d       	mov	r31, r0
			TextMessage[1] = '\n';
     4b6:	0f 2e       	mov	r0, r31
     4b8:	fa e0       	ldi	r31, 0x0A	; 10
     4ba:	9f 2e       	mov	r9, r31
     4bc:	f0 2d       	mov	r31, r0
			char* p = &TextMessage[2];
			int shifter = outputAngle;
			char const digit[] = "0123456789";
     4be:	0f 2e       	mov	r0, r31
     4c0:	fb e0       	ldi	r31, 0x0B	; 11
     4c2:	af 2e       	mov	r10, r31
     4c4:	f0 2d       	mov	r31, r0
			do{ //Move to where representation ends
				++p;
				shifter = shifter/10;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	fa e0       	ldi	r31, 0x0A	; 10
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 2c       	mov	r15, r1
     4ce:	f0 2d       	mov	r31, r0
			}while(shifter);

			p[0] = ' ';
     4d0:	68 94       	set
     4d2:	bb 24       	eor	r11, r11
     4d4:	b5 f8       	bld	r11, 5
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     4d6:	86 b1       	in	r24, 0x06	; 6
     4d8:	e9 b1       	in	r30, 0x09	; 9
     4da:	e0 7f       	andi	r30, 0xF0	; 240
     4dc:	8f 70       	andi	r24, 0x0F	; 15
     4de:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e8 59       	subi	r30, 0x98	; 152
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	e4 91       	lpm	r30, Z
		
		if (rotaryInput != notFound){
     4e8:	ef 3f       	cpi	r30, 0xFF	; 255
     4ea:	09 f4       	brne	.+2      	; 0x4ee <AngleOutputTask+0x60>
     4ec:	70 c0       	rjmp	.+224    	; 0x5ce <AngleOutputTask+0x140>
			outputAngle = (rotaryInput * unitsPer100Degrees);
     4ee:	ec 9d       	mul	r30, r12
     4f0:	90 01       	movw	r18, r0
     4f2:	ed 9d       	mul	r30, r13
     4f4:	30 0d       	add	r19, r0
     4f6:	11 24       	eor	r1, r1
			outputAngle = outputAngle / 100;
     4f8:	36 95       	lsr	r19
     4fa:	27 95       	ror	r18
     4fc:	36 95       	lsr	r19
     4fe:	27 95       	ror	r18
     500:	ab e7       	ldi	r26, 0x7B	; 123
     502:	b4 e1       	ldi	r27, 0x14	; 20
     504:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     508:	8c 01       	movw	r16, r24
     50a:	16 95       	lsr	r17
     50c:	07 95       	ror	r16
			OnscreenAngle = outputAngle;
     50e:	10 93 5f 02 	sts	0x025F, r17
     512:	00 93 5e 02 	sts	0x025E, r16
			//else
			//{
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
     516:	89 82       	std	Y+1, r8	; 0x01
			TextMessage[1] = '\n';
     518:	9a 82       	std	Y+2, r9	; 0x02
			char* p = &TextMessage[2];
			int shifter = outputAngle;
     51a:	c8 01       	movw	r24, r16
			char const digit[] = "0123456789";
     51c:	ea e4       	ldi	r30, 0x4A	; 74
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	de 01       	movw	r26, r28
     522:	59 96       	adiw	r26, 0x19	; 25
     524:	2a 2d       	mov	r18, r10
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	2a 95       	dec	r18
     52c:	e1 f7       	brne	.-8      	; 0x526 <AngleOutputTask+0x98>
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
			TextMessage[1] = '\n';
			char* p = &TextMessage[2];
     52e:	fe 01       	movw	r30, r28
     530:	33 96       	adiw	r30, 0x03	; 3
			int shifter = outputAngle;
			char const digit[] = "0123456789";
			do{ //Move to where representation ends
				++p;
     532:	31 96       	adiw	r30, 0x01	; 1
				shifter = shifter/10;
     534:	b7 01       	movw	r22, r14
     536:	0e 94 86 0c 	call	0x190c	; 0x190c <__divmodhi4>
     53a:	cb 01       	movw	r24, r22
			}while(shifter);
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	c9 f7       	brne	.-14     	; 0x532 <AngleOutputTask+0xa4>

			p[0] = ' ';
     540:	b0 82       	st	Z, r11
			p[1] = ' ';
     542:	b1 82       	std	Z+1, r11	; 0x01
			p[2] = ' ';
     544:	b2 82       	std	Z+2, r11	; 0x02
			p[3] = ' ';
     546:	b3 82       	std	Z+3, r11	; 0x03
			p[4] = ' ';
     548:	b4 82       	std	Z+4, r11	; 0x04
			p[5] = ' ';
     54a:	b5 82       	std	Z+5, r11	; 0x05
			p[6] = ' ';
     54c:	b6 82       	std	Z+6, r11	; 0x06
			p[7] = ' ';
     54e:	b7 82       	std	Z+7, r11	; 0x07
			p[8] = ' ';
     550:	b0 86       	std	Z+8, r11	; 0x08
			p[9] = ' ';
     552:	b1 86       	std	Z+9, r11	; 0x09
			p[10] = ' ';
     554:	b2 86       	std	Z+10, r11	; 0x0a
			p[11] = ' ';
     556:	b3 86       	std	Z+11, r11	; 0x0b
			p[12] = ' ';
     558:	b4 86       	std	Z+12, r11	; 0x0c
			p[13] = '\0';
     55a:	15 86       	std	Z+13, r1	; 0x0d
		

			do{ //Move back, inserting digits as you go
				*--p = digit[outputAngle%10];
     55c:	98 01       	movw	r18, r16
     55e:	ad ec       	ldi	r26, 0xCD	; 205
     560:	bc ec       	ldi	r27, 0xCC	; 204
     562:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     566:	96 95       	lsr	r25
     568:	87 95       	ror	r24
     56a:	96 95       	lsr	r25
     56c:	87 95       	ror	r24
     56e:	96 95       	lsr	r25
     570:	87 95       	ror	r24
     572:	9c 01       	movw	r18, r24
     574:	22 0f       	add	r18, r18
     576:	33 1f       	adc	r19, r19
     578:	88 0f       	add	r24, r24
     57a:	99 1f       	adc	r25, r25
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	d8 01       	movw	r26, r16
     58a:	a8 1b       	sub	r26, r24
     58c:	b9 0b       	sbc	r27, r25
     58e:	89 e1       	ldi	r24, 0x19	; 25
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	8c 0f       	add	r24, r28
     594:	9d 1f       	adc	r25, r29
     596:	a8 0f       	add	r26, r24
     598:	b9 1f       	adc	r27, r25
     59a:	8c 91       	ld	r24, X
     59c:	82 93       	st	-Z, r24
				outputAngle = outputAngle/10;
     59e:	98 01       	movw	r18, r16
     5a0:	ad ec       	ldi	r26, 0xCD	; 205
     5a2:	bc ec       	ldi	r27, 0xCC	; 204
     5a4:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     5a8:	8c 01       	movw	r16, r24
     5aa:	16 95       	lsr	r17
     5ac:	07 95       	ror	r16
     5ae:	16 95       	lsr	r17
     5b0:	07 95       	ror	r16
     5b2:	16 95       	lsr	r17
     5b4:	07 95       	ror	r16
			}while(outputAngle);
     5b6:	01 15       	cp	r16, r1
     5b8:	11 05       	cpc	r17, r1
     5ba:	81 f6       	brne	.-96     	; 0x55c <AngleOutputTask+0xce>
		
			OSMboxPost(SerialTxMBox, (void *)&TextMessage);
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5f       	subi	r22, 0xFF	; 255
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	80 91 1a 04 	lds	r24, 0x041A
     5c6:	90 91 1b 04 	lds	r25, 0x041B
     5ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <OSMboxPost>
		}
					
		OSTimeDly(0.5*OS_TICKS_PER_SEC);	// relinquish CPU
     5ce:	84 e6       	ldi	r24, 0x64	; 100
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
    }	
     5d6:	7f cf       	rjmp	.-258    	; 0x4d6 <AngleOutputTask+0x48>

000005d8 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	a8 97       	sbiw	r28, 0x28	; 40
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
	INT16U tmp16;
	INT8U tmp8;
	INT8U i;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];

		TextMessage[0]  = '\r';
     5ec:	8d e0       	ldi	r24, 0x0D	; 13
     5ee:	89 83       	std	Y+1, r24	; 0x01
		TextMessage[1]  = '\r';
     5f0:	8a 83       	std	Y+2, r24	; 0x02
		TextMessage[2]  = 'M';
     5f2:	8d e4       	ldi	r24, 0x4D	; 77
     5f4:	8b 83       	std	Y+3, r24	; 0x03
		TextMessage[3]  = 'E';
     5f6:	85 e4       	ldi	r24, 0x45	; 69
     5f8:	8c 83       	std	Y+4, r24	; 0x04
		TextMessage[4]  = 'A';
     5fa:	81 e4       	ldi	r24, 0x41	; 65
     5fc:	8d 83       	std	Y+5, r24	; 0x05
		TextMessage[5]  = 'S';
     5fe:	83 e5       	ldi	r24, 0x53	; 83
     600:	8e 83       	std	Y+6, r24	; 0x06
		TextMessage[6]  = '#';
     602:	83 e2       	ldi	r24, 0x23	; 35
     604:	8f 83       	std	Y+7, r24	; 0x07

	OSTimeDly (0.1*OS_TICKS_PER_SEC);
     606:	84 e1       	ldi	r24, 0x14	; 20
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
     60e:	8e 01       	movw	r16, r28
     610:	07 5e       	subi	r16, 0xE7	; 231
     612:	1f 4f       	sbci	r17, 0xFF	; 255
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
     614:	ce 01       	movw	r24, r28
     616:	08 96       	adiw	r24, 0x08	; 8
     618:	9d a3       	std	Y+37, r25	; 0x25
     61a:	8c a3       	std	Y+36, r24	; 0x24
					++p;
					shifter = shifter/10;
				}while(shifter);

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp8%10];
     61c:	0f 2e       	mov	r0, r31
     61e:	fd ec       	ldi	r31, 0xCD	; 205
     620:	6f 2e       	mov	r6, r31
     622:	f0 2d       	mov	r31, r0
     624:	50 2e       	mov	r5, r16
     626:	41 2e       	mov	r4, r17
				TextMessage[11] = ' ';
				TextMessage[12] = ' ';
				TextMessage[13] = ' ';
				TextMessage[14] = ' ';

				p = &TextMessage[12];
     628:	fe 01       	movw	r30, r28
     62a:	3d 96       	adiw	r30, 0x0d	; 13
     62c:	ff a3       	std	Y+39, r31	; 0x27
     62e:	ee a3       	std	Y+38, r30	; 0x26
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
     630:	3c a0       	ldd	r3, Y+36	; 0x24
     632:	2d a0       	ldd	r2, Y+37	; 0x25
				TextMessage[11] = ' ';
				TextMessage[12] = ' ';
				TextMessage[13] = ' ';
				TextMessage[14] = ' ';

				p = &TextMessage[12];
     634:	fe a1       	ldd	r31, Y+38	; 0x26
     636:	f8 a7       	std	Y+40, r31	; 0x28
     638:	7f a0       	ldd	r7, Y+39	; 0x27
		TextMessage[5]  = 'S';
		TextMessage[6]  = '#';

	OSTimeDly (0.1*OS_TICKS_PER_SEC);
    for (;;) {
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
     63a:	88 e2       	ldi	r24, 0x28	; 40
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
     642:	83 b1       	in	r24, 0x03	; 3
     644:	87 70       	andi	r24, 0x07	; 7
     646:	f8 2e       	mov	r15, r24
		if(ButtonsInput == TOP_BUTTON_ONLY){
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	f8 12       	cpse	r15, r24
     64c:	0c c0       	rjmp	.+24     	; 0x666 <TimerTask+0x8e>
			if (measIndex < NUM_MEAS-1){
     64e:	80 91 60 02 	lds	r24, 0x0260
     652:	8f 31       	cpi	r24, 0x1F	; 31
     654:	68 f5       	brcc	.+90     	; 0x6b0 <TimerTask+0xd8>
				measIndex++;
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	80 93 60 02 	sts	0x0260, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     65c:	88 e2       	ldi	r24, 0x28	; 40
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
     664:	25 c0       	rjmp	.+74     	; 0x6b0 <TimerTask+0xd8>
			}
		}
		if(ButtonsInput == BOTTOM_BUTTON_ONLY){
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	f9 12       	cpse	r15, r25
     66a:	0d c0       	rjmp	.+26     	; 0x686 <TimerTask+0xae>
			if(measIndex > 0){
     66c:	80 91 60 02 	lds	r24, 0x0260
     670:	88 23       	and	r24, r24
     672:	09 f4       	brne	.+2      	; 0x676 <TimerTask+0x9e>
     674:	cd c0       	rjmp	.+410    	; 0x810 <TimerTask+0x238>
				measIndex--;
     676:	81 50       	subi	r24, 0x01	; 1
     678:	80 93 60 02 	sts	0x0260, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     67c:	88 e2       	ldi	r24, 0x28	; 40
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
     684:	c5 c0       	rjmp	.+394    	; 0x810 <TimerTask+0x238>
			}
		}
		if(ButtonsInput == MIDDLE_BUTTON_ONLY){
     686:	e4 e0       	ldi	r30, 0x04	; 4
     688:	fe 12       	cpse	r15, r30
     68a:	12 c0       	rjmp	.+36     	; 0x6b0 <TimerTask+0xd8>
			measArray[measIndex] = OnscreenAngle;
     68c:	e0 91 60 02 	lds	r30, 0x0260
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e4 56       	subi	r30, 0x64	; 100
     698:	fb 4f       	sbci	r31, 0xFB	; 251
     69a:	80 91 5e 02 	lds	r24, 0x025E
     69e:	90 91 5f 02 	lds	r25, 0x025F
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     6a6:	88 e2       	ldi	r24, 0x28	; 40
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
     6ae:	b0 c0       	rjmp	.+352    	; 0x810 <TimerTask+0x238>
		}
		if(ButtonsInput == ALL_3_BUTTONS){
     6b0:	f7 e0       	ldi	r31, 0x07	; 7
     6b2:	ff 12       	cpse	r15, r31
     6b4:	ad c0       	rjmp	.+346    	; 0x810 <TimerTask+0x238>
     6b6:	0f 2e       	mov	r0, r31
     6b8:	fc e9       	ldi	r31, 0x9C	; 156
     6ba:	cf 2e       	mov	r12, r31
     6bc:	f4 e0       	ldi	r31, 0x04	; 4
     6be:	df 2e       	mov	r13, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	ee 24       	eor	r14, r14
     6c4:	e3 94       	inc	r14
     6c6:	f1 2c       	mov	r15, r1
			for(i=0;i<NUM_MEAS;i++){
				
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
     6c8:	68 94       	set
     6ca:	bb 24       	eor	r11, r11
     6cc:	b5 f8       	bld	r11, 5
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
     6ce:	0f 2e       	mov	r0, r31
     6d0:	fb e0       	ldi	r31, 0x0B	; 11
     6d2:	af 2e       	mov	r10, r31
     6d4:	f0 2d       	mov	r31, r0
					tmp8 = tmp8/10;
				}while(tmp8);


		/*Print that Meas Number's angle*/
				TextMessage[10] = '=';
     6d6:	0f 2e       	mov	r0, r31
     6d8:	fd e3       	ldi	r31, 0x3D	; 61
     6da:	8f 2e       	mov	r8, r31
     6dc:	f0 2d       	mov	r31, r0
		}
		if(ButtonsInput == ALL_3_BUTTONS){
			for(i=0;i<NUM_MEAS;i++){
				
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
     6de:	b8 86       	std	Y+8, r11	; 0x08
				TextMessage[8]  = ' ';
     6e0:	b9 86       	std	Y+9, r11	; 0x09
				TextMessage[9]  = ' ';
     6e2:	ba 86       	std	Y+10, r11	; 0x0a
				TextMessage[10] = '\0';
     6e4:	1b 86       	std	Y+11, r1	; 0x0b
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
     6e6:	9e 2c       	mov	r9, r14
				char const digit[] = "0123456789";
     6e8:	ea e4       	ldi	r30, 0x4A	; 74
     6ea:	f1 e0       	ldi	r31, 0x01	; 1
     6ec:	a5 2d       	mov	r26, r5
     6ee:	b4 2d       	mov	r27, r4
     6f0:	8a 2d       	mov	r24, r10
     6f2:	01 90       	ld	r0, Z+
     6f4:	0d 92       	st	X+, r0
     6f6:	8a 95       	dec	r24
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <TimerTask+0x11a>
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
     6fa:	97 01       	movw	r18, r14
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
     6fc:	43 2d       	mov	r20, r3
     6fe:	52 2d       	mov	r21, r2
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
				do{ //Move to where representation ends
					++p;
     700:	4f 5f       	subi	r20, 0xFF	; 255
     702:	5f 4f       	sbci	r21, 0xFF	; 255
					shifter = shifter/10;
     704:	ad ec       	ldi	r26, 0xCD	; 205
     706:	bc ec       	ldi	r27, 0xCC	; 204
     708:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     70c:	9c 01       	movw	r18, r24
     70e:	36 95       	lsr	r19
     710:	27 95       	ror	r18
     712:	36 95       	lsr	r19
     714:	27 95       	ror	r18
     716:	36 95       	lsr	r19
     718:	27 95       	ror	r18
				}while(shifter);
     71a:	21 15       	cp	r18, r1
     71c:	31 05       	cpc	r19, r1
     71e:	81 f7       	brne	.-32     	; 0x700 <TimerTask+0x128>
     720:	fa 01       	movw	r30, r20

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp8%10];
     722:	96 9c       	mul	r9, r6
     724:	81 2d       	mov	r24, r1
     726:	11 24       	eor	r1, r1
     728:	86 95       	lsr	r24
     72a:	86 95       	lsr	r24
     72c:	86 95       	lsr	r24
     72e:	98 2f       	mov	r25, r24
     730:	99 0f       	add	r25, r25
     732:	29 2f       	mov	r18, r25
     734:	22 0f       	add	r18, r18
     736:	22 0f       	add	r18, r18
     738:	92 0f       	add	r25, r18
     73a:	99 1a       	sub	r9, r25
     73c:	d8 01       	movw	r26, r16
     73e:	a9 0d       	add	r26, r9
     740:	b1 1d       	adc	r27, r1
     742:	9c 91       	ld	r25, X
     744:	92 93       	st	-Z, r25
					tmp8 = tmp8/10;
     746:	98 2e       	mov	r9, r24
				}while(tmp8);
     748:	81 11       	cpse	r24, r1
     74a:	eb cf       	rjmp	.-42     	; 0x722 <TimerTask+0x14a>


		/*Print that Meas Number's angle*/
				TextMessage[10] = '=';
     74c:	8b 86       	std	Y+11, r8	; 0x0b
				TextMessage[11] = ' ';
     74e:	bc 86       	std	Y+12, r11	; 0x0c
				TextMessage[12] = ' ';
     750:	bd 86       	std	Y+13, r11	; 0x0d
				TextMessage[13] = ' ';
     752:	be 86       	std	Y+14, r11	; 0x0e
				TextMessage[14] = ' ';
     754:	bf 86       	std	Y+15, r11	; 0x0f

				p = &TextMessage[12];
				shifter = measArray[i];
     756:	f6 01       	movw	r30, r12
     758:	41 91       	ld	r20, Z+
     75a:	51 91       	ld	r21, Z+
     75c:	6f 01       	movw	r12, r30
     75e:	9a 01       	movw	r18, r20
				TextMessage[11] = ' ';
				TextMessage[12] = ' ';
				TextMessage[13] = ' ';
				TextMessage[14] = ' ';

				p = &TextMessage[12];
     760:	e8 a5       	ldd	r30, Y+40	; 0x28
     762:	f7 2d       	mov	r31, r7
				shifter = measArray[i];
				tmp16 = shifter;
				do{ //Move to where representation ends
					++p;
     764:	31 96       	adiw	r30, 0x01	; 1
					shifter = shifter/10;
     766:	ad ec       	ldi	r26, 0xCD	; 205
     768:	bc ec       	ldi	r27, 0xCC	; 204
     76a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     76e:	9c 01       	movw	r18, r24
     770:	36 95       	lsr	r19
     772:	27 95       	ror	r18
     774:	36 95       	lsr	r19
     776:	27 95       	ror	r18
     778:	36 95       	lsr	r19
     77a:	27 95       	ror	r18
				}while(shifter);
     77c:	21 15       	cp	r18, r1
     77e:	31 05       	cpc	r19, r1
     780:	89 f7       	brne	.-30     	; 0x764 <TimerTask+0x18c>
		

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp16%10];
     782:	9a 01       	movw	r18, r20
     784:	ad ec       	ldi	r26, 0xCD	; 205
     786:	bc ec       	ldi	r27, 0xCC	; 204
     788:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     78c:	96 95       	lsr	r25
     78e:	87 95       	ror	r24
     790:	96 95       	lsr	r25
     792:	87 95       	ror	r24
     794:	96 95       	lsr	r25
     796:	87 95       	ror	r24
     798:	9c 01       	movw	r18, r24
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	da 01       	movw	r26, r20
     7b0:	a8 1b       	sub	r26, r24
     7b2:	b9 0b       	sbc	r27, r25
     7b4:	a0 0f       	add	r26, r16
     7b6:	b1 1f       	adc	r27, r17
     7b8:	8c 91       	ld	r24, X
     7ba:	82 93       	st	-Z, r24
					tmp16 = tmp16/10;
     7bc:	9a 01       	movw	r18, r20
     7be:	ad ec       	ldi	r26, 0xCD	; 205
     7c0:	bc ec       	ldi	r27, 0xCC	; 204
     7c2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     7c6:	ac 01       	movw	r20, r24
     7c8:	56 95       	lsr	r21
     7ca:	47 95       	ror	r20
     7cc:	56 95       	lsr	r21
     7ce:	47 95       	ror	r20
     7d0:	56 95       	lsr	r21
     7d2:	47 95       	ror	r20
				}while(tmp16);
     7d4:	41 15       	cp	r20, r1
     7d6:	51 05       	cpc	r21, r1
     7d8:	a1 f6       	brne	.-88     	; 0x782 <TimerTask+0x1aa>

				TextMessage[15] = '\0';
     7da:	18 8a       	std	Y+16, r1	; 0x10
				OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	80 91 1a 04 	lds	r24, 0x041A
     7e6:	90 91 1b 04 	lds	r25, 0x041B
     7ea:	0e 94 c8 08 	call	0x1190	; 0x1190 <OSMboxPost>
				OSTimeDly(5);
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
     7f6:	ff ef       	ldi	r31, 0xFF	; 255
     7f8:	ef 1a       	sub	r14, r31
     7fa:	ff 0a       	sbc	r15, r31
		if(ButtonsInput == MIDDLE_BUTTON_ONLY){
			measArray[measIndex] = OnscreenAngle;
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
		}
		if(ButtonsInput == ALL_3_BUTTONS){
			for(i=0;i<NUM_MEAS;i++){
     7fc:	8c ed       	ldi	r24, 0xDC	; 220
     7fe:	c8 16       	cp	r12, r24
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	d8 06       	cpc	r13, r24
     804:	09 f0       	breq	.+2      	; 0x808 <TimerTask+0x230>
     806:	6b cf       	rjmp	.-298    	; 0x6de <TimerTask+0x106>

				TextMessage[15] = '\0';
				OSMboxPost(SerialTxMBox, (void*)&TextMessage);
				OSTimeDly(5);
			}
			OSTimeDly(2*OS_TICKS_PER_SEC);
     808:	80 e9       	ldi	r24, 0x90	; 144
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
		}
		
		

/*Print Meas Number*/
		TextMessage[7]  = ' ';
     810:	80 e2       	ldi	r24, 0x20	; 32
     812:	88 87       	std	Y+8, r24	; 0x08
		TextMessage[8]  = ' ';
     814:	89 87       	std	Y+9, r24	; 0x09
		TextMessage[9]  = ' ';
     816:	8a 87       	std	Y+10, r24	; 0x0a
		TextMessage[10] = '\0';
     818:	1b 86       	std	Y+11, r1	; 0x0b
		char* p = &TextMessage[7];
		INT16U shifter = measIndex+1;
     81a:	f0 90 60 02 	lds	r15, 0x0260
     81e:	4f 2d       	mov	r20, r15
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	9a 01       	movw	r18, r20
     824:	2f 5f       	subi	r18, 0xFF	; 255
     826:	3f 4f       	sbci	r19, 0xFF	; 255
		tmp8 = measIndex+1;
     828:	f3 94       	inc	r15
		char const digit[] = "0123456789";
     82a:	8b e0       	ldi	r24, 0x0B	; 11
     82c:	ea e4       	ldi	r30, 0x4A	; 74
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	d8 01       	movw	r26, r16
     832:	01 90       	ld	r0, Z+
     834:	0d 92       	st	X+, r0
     836:	8a 95       	dec	r24
     838:	e1 f7       	brne	.-8      	; 0x832 <TimerTask+0x25a>
/*Print Meas Number*/
		TextMessage[7]  = ' ';
		TextMessage[8]  = ' ';
		TextMessage[9]  = ' ';
		TextMessage[10] = '\0';
		char* p = &TextMessage[7];
     83a:	fe 01       	movw	r30, r28
     83c:	38 96       	adiw	r30, 0x08	; 8
		INT16U shifter = measIndex+1;
		tmp8 = measIndex+1;
		char const digit[] = "0123456789";
		do{ //Move to where representation ends
			++p;
     83e:	31 96       	adiw	r30, 0x01	; 1
			shifter = shifter/10;
     840:	ad ec       	ldi	r26, 0xCD	; 205
     842:	bc ec       	ldi	r27, 0xCC	; 204
     844:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     848:	9c 01       	movw	r18, r24
     84a:	36 95       	lsr	r19
     84c:	27 95       	ror	r18
     84e:	36 95       	lsr	r19
     850:	27 95       	ror	r18
     852:	36 95       	lsr	r19
     854:	27 95       	ror	r18
		}while(shifter);
     856:	21 15       	cp	r18, r1
     858:	31 05       	cpc	r19, r1
     85a:	89 f7       	brne	.-30     	; 0x83e <TimerTask+0x266>

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp8%10];
     85c:	f6 9c       	mul	r15, r6
     85e:	81 2d       	mov	r24, r1
     860:	11 24       	eor	r1, r1
     862:	86 95       	lsr	r24
     864:	86 95       	lsr	r24
     866:	86 95       	lsr	r24
     868:	98 2f       	mov	r25, r24
     86a:	99 0f       	add	r25, r25
     86c:	29 2f       	mov	r18, r25
     86e:	22 0f       	add	r18, r18
     870:	22 0f       	add	r18, r18
     872:	92 0f       	add	r25, r18
     874:	f9 1a       	sub	r15, r25
     876:	d8 01       	movw	r26, r16
     878:	af 0d       	add	r26, r15
     87a:	b1 1d       	adc	r27, r1
     87c:	9c 91       	ld	r25, X
     87e:	92 93       	st	-Z, r25
			tmp8 = tmp8/10;
     880:	f8 2e       	mov	r15, r24
		}while(tmp8);
     882:	81 11       	cpse	r24, r1
     884:	eb cf       	rjmp	.-42     	; 0x85c <TimerTask+0x284>


/*Print that Meas Number's angle*/
		TextMessage[10] = '=';
     886:	8d e3       	ldi	r24, 0x3D	; 61
     888:	8b 87       	std	Y+11, r24	; 0x0b
		TextMessage[11] = ' ';
     88a:	80 e2       	ldi	r24, 0x20	; 32
     88c:	8c 87       	std	Y+12, r24	; 0x0c
		TextMessage[12] = ' ';
     88e:	8d 87       	std	Y+13, r24	; 0x0d
		TextMessage[13] = ' ';
     890:	8e 87       	std	Y+14, r24	; 0x0e
		TextMessage[14] = ' ';
     892:	8f 87       	std	Y+15, r24	; 0x0f

		p = &TextMessage[12];
		shifter = measArray[measIndex];
     894:	fa 01       	movw	r30, r20
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	e4 56       	subi	r30, 0x64	; 100
     89c:	fb 4f       	sbci	r31, 0xFB	; 251
     89e:	40 81       	ld	r20, Z
     8a0:	51 81       	ldd	r21, Z+1	; 0x01
     8a2:	9a 01       	movw	r18, r20
		TextMessage[11] = ' ';
		TextMessage[12] = ' ';
		TextMessage[13] = ' ';
		TextMessage[14] = ' ';

		p = &TextMessage[12];
     8a4:	fe 01       	movw	r30, r28
     8a6:	3d 96       	adiw	r30, 0x0d	; 13
		shifter = measArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
     8a8:	31 96       	adiw	r30, 0x01	; 1
			shifter = shifter/10;
     8aa:	ad ec       	ldi	r26, 0xCD	; 205
     8ac:	bc ec       	ldi	r27, 0xCC	; 204
     8ae:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     8b2:	9c 01       	movw	r18, r24
     8b4:	36 95       	lsr	r19
     8b6:	27 95       	ror	r18
     8b8:	36 95       	lsr	r19
     8ba:	27 95       	ror	r18
     8bc:	36 95       	lsr	r19
     8be:	27 95       	ror	r18
		}while(shifter);
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	89 f7       	brne	.-30     	; 0x8a8 <TimerTask+0x2d0>
		

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp16%10];
     8c6:	9a 01       	movw	r18, r20
     8c8:	ad ec       	ldi	r26, 0xCD	; 205
     8ca:	bc ec       	ldi	r27, 0xCC	; 204
     8cc:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	96 95       	lsr	r25
     8da:	87 95       	ror	r24
     8dc:	9c 01       	movw	r18, r24
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	82 0f       	add	r24, r18
     8f0:	93 1f       	adc	r25, r19
     8f2:	da 01       	movw	r26, r20
     8f4:	a8 1b       	sub	r26, r24
     8f6:	b9 0b       	sbc	r27, r25
     8f8:	a0 0f       	add	r26, r16
     8fa:	b1 1f       	adc	r27, r17
     8fc:	8c 91       	ld	r24, X
     8fe:	82 93       	st	-Z, r24
			tmp16 = tmp16/10;
     900:	9a 01       	movw	r18, r20
     902:	ad ec       	ldi	r26, 0xCD	; 205
     904:	bc ec       	ldi	r27, 0xCC	; 204
     906:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
     90a:	ac 01       	movw	r20, r24
     90c:	56 95       	lsr	r21
     90e:	47 95       	ror	r20
     910:	56 95       	lsr	r21
     912:	47 95       	ror	r20
     914:	56 95       	lsr	r21
     916:	47 95       	ror	r20
		}while(tmp16);
     918:	41 15       	cp	r20, r1
     91a:	51 05       	cpc	r21, r1
     91c:	a1 f6       	brne	.-88     	; 0x8c6 <TimerTask+0x2ee>

		TextMessage[15] = '\0';
     91e:	18 8a       	std	Y+16, r1	; 0x10
		
		
		OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     920:	be 01       	movw	r22, r28
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	80 91 1a 04 	lds	r24, 0x041A
     92a:	90 91 1b 04 	lds	r25, 0x041B
     92e:	0e 94 c8 08 	call	0x1190	; 0x1190 <OSMboxPost>

    }	
     932:	83 ce       	rjmp	.-762    	; 0x63a <TimerTask+0x62>

00000934 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage
     934:	00 e0       	ldi	r16, 0x00	; 0
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	d0 e0       	ldi	r29, 0x00	; 0
     93a:	cf e3       	ldi	r28, 0x3F	; 63
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
     93c:	0f 2e       	mov	r0, r31
     93e:	fa e9       	ldi	r31, 0x9A	; 154
     940:	8f 2e       	mov	r8, r31
     942:	f0 2d       	mov	r31, r0
     944:	0f 2e       	mov	r0, r31
     946:	f9 e9       	ldi	r31, 0x99	; 153
     948:	9f 2e       	mov	r9, r31
     94a:	f0 2d       	mov	r31, r0
     94c:	0f 2e       	mov	r0, r31
     94e:	f9 e1       	ldi	r31, 0x19	; 25
     950:	af 2e       	mov	r10, r31
     952:	f0 2d       	mov	r31, r0
     954:	68 94       	set
     956:	bb 24       	eor	r11, r11
     958:	b6 f8       	bld	r11, 6
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     95a:	41 2c       	mov	r4, r1
     95c:	51 2c       	mov	r5, r1
     95e:	61 2c       	mov	r6, r1
     960:	0f 2e       	mov	r0, r31
     962:	ff e3       	ldi	r31, 0x3F	; 63
     964:	7f 2e       	mov	r7, r31
     966:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     968:	0f 2e       	mov	r0, r31
     96a:	fd ec       	ldi	r31, 0xCD	; 205
     96c:	2f 2e       	mov	r2, r31
     96e:	f0 2d       	mov	r31, r0
     970:	0f 2e       	mov	r0, r31
     972:	fc ec       	ldi	r31, 0xCC	; 204
     974:	3f 2e       	mov	r3, r31
     976:	f0 2d       	mov	r31, r0
     978:	0d c0       	rjmp	.+26     	; 0x994 <LedTask+0x60>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     97a:	0d ec       	ldi	r16, 0xCD	; 205
     97c:	1c ec       	ldi	r17, 0xCC	; 204
     97e:	dc ec       	ldi	r29, 0xCC	; 204
     980:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     982:	81 2c       	mov	r8, r1
     984:	91 2c       	mov	r9, r1
     986:	68 94       	set
     988:	aa 24       	eor	r10, r10
     98a:	a7 f8       	bld	r10, 7
     98c:	0f 2e       	mov	r0, r31
     98e:	ff e3       	ldi	r31, 0x3F	; 63
     990:	bf 2e       	mov	r11, r31
     992:	f0 2d       	mov	r31, r0
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     994:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     996:	28 2d       	mov	r18, r8
     998:	39 2d       	mov	r19, r9
     99a:	4a 2d       	mov	r20, r10
     99c:	5b 2d       	mov	r21, r11
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	9f e3       	ldi	r25, 0x3F	; 63
     9a6:	0e 94 3e 0b 	call	0x167c	; 0x167c <__divsf3>
     9aa:	6b 01       	movw	r12, r22
     9ac:	7c 01       	movw	r14, r24
     9ae:	20 2f       	mov	r18, r16
     9b0:	31 2f       	mov	r19, r17
     9b2:	4d 2f       	mov	r20, r29
     9b4:	5c 2f       	mov	r21, r28
     9b6:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	48 e4       	ldi	r20, 0x48	; 72
     9c0:	53 e4       	ldi	r21, 0x43	; 67
     9c2:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     9c6:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixunssfsi>
     9ca:	cb 01       	movw	r24, r22
     9cc:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     9d0:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     9d2:	20 2f       	mov	r18, r16
     9d4:	31 2f       	mov	r19, r17
     9d6:	4d 2f       	mov	r20, r29
     9d8:	5c 2f       	mov	r21, r28
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e8       	ldi	r24, 0x80	; 128
     9e0:	9f e3       	ldi	r25, 0x3F	; 63
     9e2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__subsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	48 e4       	ldi	r20, 0x48	; 72
     9f8:	53 e4       	ldi	r21, 0x43	; 67
     9fa:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
     9fe:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixunssfsi>
     a02:	cb 01       	movw	r24, r22
     a04:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     a08:	80 91 96 03 	lds	r24, 0x0396
     a0c:	90 91 97 03 	lds	r25, 0x0397
     a10:	0e 94 97 08 	call	0x112e	; 0x112e <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	09 f4       	brne	.+2      	; 0xa1a <LedTask+0xe6>
     a18:	bd cf       	rjmp	.-134    	; 0x994 <LedTask+0x60>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     a1a:	fc 01       	movw	r30, r24
     a1c:	80 81       	ld	r24, Z
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	c9 f0       	breq	.+50     	; 0xa54 <LedTask+0x120>
     a22:	08 f4       	brcc	.+2      	; 0xa26 <LedTask+0xf2>
     a24:	aa cf       	rjmp	.-172    	; 0x97a <LedTask+0x46>
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	09 f0       	breq	.+2      	; 0xa2c <LedTask+0xf8>
     a2a:	b4 cf       	rjmp	.-152    	; 0x994 <LedTask+0x60>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     a2c:	04 2d       	mov	r16, r4
     a2e:	15 2d       	mov	r17, r5
     a30:	d6 2d       	mov	r29, r6
     a32:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     a34:	0f 2e       	mov	r0, r31
     a36:	fa e9       	ldi	r31, 0x9A	; 154
     a38:	8f 2e       	mov	r8, r31
     a3a:	f0 2d       	mov	r31, r0
     a3c:	0f 2e       	mov	r0, r31
     a3e:	f9 e9       	ldi	r31, 0x99	; 153
     a40:	9f 2e       	mov	r9, r31
     a42:	f0 2d       	mov	r31, r0
     a44:	0f 2e       	mov	r0, r31
     a46:	f9 e1       	ldi	r31, 0x19	; 25
     a48:	af 2e       	mov	r10, r31
     a4a:	f0 2d       	mov	r31, r0
     a4c:	68 94       	set
     a4e:	bb 24       	eor	r11, r11
     a50:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     a52:	a0 cf       	rjmp	.-192    	; 0x994 <LedTask+0x60>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     a54:	04 2d       	mov	r16, r4
     a56:	15 2d       	mov	r17, r5
     a58:	d6 2d       	mov	r29, r6
     a5a:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     a5c:	82 2c       	mov	r8, r2
     a5e:	93 2c       	mov	r9, r3
     a60:	0f 2e       	mov	r0, r31
     a62:	fc ec       	ldi	r31, 0xCC	; 204
     a64:	af 2e       	mov	r10, r31
     a66:	f0 2d       	mov	r31, r0
     a68:	0f 2e       	mov	r0, r31
     a6a:	fe e3       	ldi	r31, 0x3E	; 62
     a6c:	bf 2e       	mov	r11, r31
     a6e:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     a70:	91 cf       	rjmp	.-222    	; 0x994 <LedTask+0x60>

00000a72 <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	69 97       	sbiw	r28, 0x19	; 25
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     a86:	0f 2e       	mov	r0, r31
     a88:	f1 ec       	ldi	r31, 0xC1	; 193
     a8a:	cf 2e       	mov	r12, r31
     a8c:	d1 2c       	mov	r13, r1
     a8e:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     a90:	61 2c       	mov	r6, r1
     a92:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     a94:	0f 2e       	mov	r0, r31
     a96:	fe ef       	ldi	r31, 0xFE	; 254
     a98:	af 2e       	mov	r10, r31
     a9a:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     a9c:	68 94       	set
     a9e:	88 24       	eor	r8, r8
     aa0:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f0 ec       	ldi	r31, 0xC0	; 192
     aa6:	9f 2e       	mov	r9, r31
     aa8:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     aaa:	0f 2e       	mov	r0, r31
     aac:	f6 ec       	ldi	r31, 0xC6	; 198
     aae:	ef 2e       	mov	r14, r31
     ab0:	f1 2c       	mov	r15, r1
     ab2:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (5);
     ab4:	85 e0       	ldi	r24, 0x05	; 5
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     abc:	80 91 1a 04 	lds	r24, 0x041A
     ac0:	90 91 1b 04 	lds	r25, 0x041B
     ac4:	0e 94 97 08 	call	0x112e	; 0x112e <OSMboxAccept>
		
		if(msg != NULL){
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	09 f4       	brne	.+2      	; 0xace <SerialTransmitTask+0x5c>
     acc:	6f c0       	rjmp	.+222    	; 0xbac <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     ace:	bc 01       	movw	r22, r24
     ad0:	ce 01       	movw	r24, r28
     ad2:	02 96       	adiw	r24, 0x02	; 2
     ad4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     ad8:	f6 01       	movw	r30, r12
     ada:	80 81       	ld	r24, Z
     adc:	86 60       	ori	r24, 0x06	; 6
     ade:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
     ae2:	88 23       	and	r24, r24
     ae4:	09 f4       	brne	.+2      	; 0xae8 <SerialTransmitTask+0x76>
     ae6:	62 c0       	rjmp	.+196    	; 0xbac <SerialTransmitTask+0x13a>
     ae8:	06 2d       	mov	r16, r6
     aea:	17 2d       	mov	r17, r7
     aec:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     aee:	8d 30       	cpi	r24, 0x0D	; 13
     af0:	c9 f4       	brne	.+50     	; 0xb24 <SerialTransmitTask+0xb2>
     af2:	c8 01       	movw	r24, r16
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	e2 e0       	ldi	r30, 0x02	; 2
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ec 0f       	add	r30, r28
     afc:	fd 1f       	adc	r31, r29
     afe:	e8 0f       	add	r30, r24
     b00:	f9 1f       	adc	r31, r25
     b02:	20 81       	ld	r18, Z
     b04:	2d 30       	cpi	r18, 0x0D	; 13
     b06:	71 f4       	brne	.+28     	; 0xb24 <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     b08:	e2 e0       	ldi	r30, 0x02	; 2
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ec 0f       	add	r30, r28
     b0e:	fd 1f       	adc	r31, r29
     b10:	e0 0f       	add	r30, r16
     b12:	f1 1f       	adc	r31, r17
     b14:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     b16:	e2 e0       	ldi	r30, 0x02	; 2
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	ec 0f       	add	r30, r28
     b1c:	fd 1f       	adc	r31, r29
     b1e:	e8 0f       	add	r30, r24
     b20:	f9 1f       	adc	r31, r25
     b22:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     b24:	e2 e0       	ldi	r30, 0x02	; 2
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ec 0f       	add	r30, r28
     b2a:	fd 1f       	adc	r31, r29
     b2c:	e0 0f       	add	r30, r16
     b2e:	f1 1f       	adc	r31, r17
     b30:	80 81       	ld	r24, Z
     b32:	8d 30       	cpi	r24, 0x0D	; 13
     b34:	c9 f4       	brne	.+50     	; 0xb68 <SerialTransmitTask+0xf6>
     b36:	c8 01       	movw	r24, r16
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	e2 e0       	ldi	r30, 0x02	; 2
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	ec 0f       	add	r30, r28
     b40:	fd 1f       	adc	r31, r29
     b42:	e8 0f       	add	r30, r24
     b44:	f9 1f       	adc	r31, r25
     b46:	20 81       	ld	r18, Z
     b48:	2a 30       	cpi	r18, 0x0A	; 10
     b4a:	71 f4       	brne	.+28     	; 0xb68 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     b4c:	e2 e0       	ldi	r30, 0x02	; 2
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	ec 0f       	add	r30, r28
     b52:	fd 1f       	adc	r31, r29
     b54:	e0 0f       	add	r30, r16
     b56:	f1 1f       	adc	r31, r17
     b58:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     b5a:	e2 e0       	ldi	r30, 0x02	; 2
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ec 0f       	add	r30, r28
     b60:	fd 1f       	adc	r31, r29
     b62:	e8 0f       	add	r30, r24
     b64:	f9 1f       	adc	r31, r25
     b66:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     b68:	ae 01       	movw	r20, r28
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	80 91 dc 04 	lds	r24, 0x04DC
     b76:	90 91 dd 04 	lds	r25, 0x04DD
     b7a:	0e 94 07 09 	call	0x120e	; 0x120e <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     b7e:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     b80:	e2 e0       	ldi	r30, 0x02	; 2
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ec 0f       	add	r30, r28
     b86:	fd 1f       	adc	r31, r29
     b88:	e0 0f       	add	r30, r16
     b8a:	f1 1f       	adc	r31, r17
     b8c:	80 81       	ld	r24, Z
     b8e:	f7 01       	movw	r30, r14
     b90:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     b92:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     b94:	b3 94       	inc	r11
     b96:	0b 2d       	mov	r16, r11
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	e2 e0       	ldi	r30, 0x02	; 2
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ec 0f       	add	r30, r28
     ba0:	fd 1f       	adc	r31, r29
     ba2:	e0 0f       	add	r30, r16
     ba4:	f1 1f       	adc	r31, r17
     ba6:	80 81       	ld	r24, Z
     ba8:	81 11       	cpse	r24, r1
     baa:	a1 cf       	rjmp	.-190    	; 0xaee <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     bac:	f6 01       	movw	r30, r12
     bae:	80 81       	ld	r24, Z
     bb0:	89 7f       	andi	r24, 0xF9	; 249
     bb2:	80 83       	st	Z, r24
	}
     bb4:	7f cf       	rjmp	.-258    	; 0xab4 <SerialTransmitTask+0x42>

00000bb6 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     bb6:	0e 94 05 06 	call	0xc0a	; 0xc0a <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     bba:	0e 94 bc 09 	call	0x1378	; 0x1378 <OSInit>
	
	USART_Init();
     bbe:	0e 94 35 06 	call	0xc6a	; 0xc6a <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 ab 08 	call	0x1156	; 0x1156 <OSMboxCreate>
     bca:	90 93 97 03 	sts	0x0397, r25
     bce:	80 93 96 03 	sts	0x0396, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 ab 08 	call	0x1156	; 0x1156 <OSMboxCreate>
     bda:	90 93 1b 04 	sts	0x041B, r25
     bde:	80 93 1a 04 	sts	0x041A, r24
	SerialTxSem = OSSemCreate(1);
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <OSSemCreate>
     bea:	90 93 dd 04 	sts	0x04DD, r25
     bee:	80 93 dc 04 	sts	0x04DC, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	4d e5       	ldi	r20, 0x5D	; 93
     bf6:	56 e0       	ldi	r21, 0x06	; 6
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	83 ef       	ldi	r24, 0xF3	; 243
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     c04:	0e 94 c6 07 	call	0xf8c	; 0xf8c <OSStart>
     c08:	ff cf       	rjmp	.-2      	; 0xc08 <main+0x52>

00000c0a <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     c0a:	f8 94       	cli
	WatchDogReset();
     c0c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     c10:	84 b7       	in	r24, 0x34	; 52
     c12:	87 7f       	andi	r24, 0xF7	; 247
     c14:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     c16:	e0 e6       	ldi	r30, 0x60	; 96
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 61       	ori	r24, 0x18	; 24
     c1e:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     c20:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     c22:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     c24:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     c26:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     c28:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     c2a:	87 b1       	in	r24, 0x07	; 7
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     c30:	8a b1       	in	r24, 0x0a	; 10
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	8a b9       	out	0x0a, r24	; 10
	
	// END TEAM ROTARY
	
	//BUTTON
	
	DDRB |= _BV(DDB0); //B0 as input
     c36:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(DDB1); //B1 as input
     c38:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(DDB2); //B2 as input
     c3a:	22 9a       	sbi	0x04, 2	; 4
	// END BUTTON
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     c40:	8d e0       	ldi	r24, 0x0D	; 13
     c42:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     c44:	82 e1       	ldi	r24, 0x12	; 18
     c46:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     c48:	ee e6       	ldi	r30, 0x6E	; 110
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     c52:	e4 e6       	ldi	r30, 0x64	; 100
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8f 7d       	andi	r24, 0xDF	; 223
     c5a:	80 83       	st	Z, r24


/* setup USART here  */	

	UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     c5c:	e1 ec       	ldi	r30, 0xC1	; 193
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	89 7f       	andi	r24, 0xF9	; 249
     c64:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     c66:	78 94       	sei
     c68:	08 95       	ret

00000c6a <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     c6a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     c6e:	87 e6       	ldi	r24, 0x67	; 103
     c70:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     c7a:	8e e0       	ldi	r24, 0x0E	; 14
     c7c:	80 93 c2 00 	sts	0x00C2, r24
     c80:	08 95       	ret

00000c82 <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     c82:	fa 01       	movw	r30, r20
     c84:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     d10:	ca 01       	movw	r24, r20
     d12:	83 97       	sbiw	r24, 0x23	; 35
     d14:	08 95       	ret

00000d16 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     d16:	08 95       	ret

00000d18 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     d18:	08 95       	ret

00000d1a <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     d1a:	08 95       	ret

00000d1c <OSTaskIdle>:
     d1c:	f8 94       	cli
     d1e:	78 94       	sei
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <OSTaskIdle>

00000d22 <OSEventTaskRdy>:
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	fc 01       	movw	r30, r24
     d2c:	05 85       	ldd	r16, Z+13	; 0x0d
     d2e:	e0 2f       	mov	r30, r16
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	eb 5a       	subi	r30, 0xAB	; 171
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	10 81       	ld	r17, Z
     d38:	21 2f       	mov	r18, r17
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	d9 01       	movw	r26, r18
     d3e:	ab 5a       	subi	r26, 0xAB	; 171
     d40:	bd 4f       	sbci	r27, 0xFD	; 253
     d42:	dc 91       	ld	r29, X
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	52 81       	ldd	r21, Z+2	; 0x02
     d4c:	a5 2f       	mov	r26, r21
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ab 5a       	subi	r26, 0xAB	; 171
     d52:	be 4f       	sbci	r27, 0xFE	; 254
     d54:	cc 91       	ld	r28, X
     d56:	ac 2f       	mov	r26, r28
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ab 5a       	subi	r26, 0xAB	; 171
     d5c:	bd 4f       	sbci	r27, 0xFD	; 253
     d5e:	ac 91       	ld	r26, X
     d60:	11 0f       	add	r17, r17
     d62:	11 0f       	add	r17, r17
     d64:	11 0f       	add	r17, r17
     d66:	c1 0f       	add	r28, r17
     d68:	ba 2f       	mov	r27, r26
     d6a:	b0 95       	com	r27
     d6c:	5b 23       	and	r21, r27
     d6e:	52 83       	std	Z+2, r21	; 0x02
     d70:	51 11       	cpse	r21, r1
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <OSEventTaskRdy+0x5c>
     d74:	5d 2f       	mov	r21, r29
     d76:	50 95       	com	r21
     d78:	05 23       	and	r16, r21
     d7a:	fc 01       	movw	r30, r24
     d7c:	05 87       	std	Z+13, r16	; 0x0d
     d7e:	ec 2f       	mov	r30, r28
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	eb 5e       	subi	r30, 0xEB	; 235
     d88:	f8 4f       	sbci	r31, 0xF8	; 248
     d8a:	01 90       	ld	r0, Z+
     d8c:	f0 81       	ld	r31, Z
     d8e:	e0 2d       	mov	r30, r0
     d90:	13 86       	std	Z+11, r1	; 0x0b
     d92:	12 86       	std	Z+10, r1	; 0x0a
     d94:	17 82       	std	Z+7, r1	; 0x07
     d96:	16 82       	std	Z+6, r1	; 0x06
     d98:	71 87       	std	Z+9, r23	; 0x09
     d9a:	60 87       	std	Z+8, r22	; 0x08
     d9c:	40 95       	com	r20
     d9e:	84 85       	ldd	r24, Z+12	; 0x0c
     da0:	48 23       	and	r20, r24
     da2:	44 87       	std	Z+12, r20	; 0x0c
     da4:	41 11       	cpse	r20, r1
     da6:	0b c0       	rjmp	.+22     	; 0xdbe <OSEventTaskRdy+0x9c>
     da8:	80 91 76 06 	lds	r24, 0x0676
     dac:	d8 2b       	or	r29, r24
     dae:	d0 93 76 06 	sts	0x0676, r29
     db2:	f9 01       	movw	r30, r18
     db4:	e9 58       	subi	r30, 0x89	; 137
     db6:	f9 4f       	sbci	r31, 0xF9	; 249
     db8:	80 81       	ld	r24, Z
     dba:	a8 2b       	or	r26, r24
     dbc:	a0 83       	st	Z, r26
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <OSEventTaskWait>:
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	e0 91 82 06 	lds	r30, 0x0682
     dd0:	f0 91 83 06 	lds	r31, 0x0683
     dd4:	97 83       	std	Z+7, r25	; 0x07
     dd6:	86 83       	std	Z+6, r24	; 0x06
     dd8:	a7 85       	ldd	r26, Z+15	; 0x0f
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	20 89       	ldd	r18, Z+16	; 0x10
     dde:	ed 01       	movw	r28, r26
     de0:	c9 58       	subi	r28, 0x89	; 137
     de2:	d9 4f       	sbci	r29, 0xF9	; 249
     de4:	42 2f       	mov	r20, r18
     de6:	40 95       	com	r20
     de8:	38 81       	ld	r19, Y
     dea:	34 23       	and	r19, r20
     dec:	38 83       	st	Y, r19
     dee:	31 11       	cpse	r19, r1
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <OSEventTaskWait+0x38>
     df2:	31 89       	ldd	r19, Z+17	; 0x11
     df4:	30 95       	com	r19
     df6:	40 91 76 06 	lds	r20, 0x0676
     dfa:	34 23       	and	r19, r20
     dfc:	30 93 76 06 	sts	0x0676, r19
     e00:	a8 0f       	add	r26, r24
     e02:	b9 1f       	adc	r27, r25
     e04:	12 96       	adiw	r26, 0x02	; 2
     e06:	3c 91       	ld	r19, X
     e08:	12 97       	sbiw	r26, 0x02	; 2
     e0a:	23 2b       	or	r18, r19
     e0c:	12 96       	adiw	r26, 0x02	; 2
     e0e:	2c 93       	st	X, r18
     e10:	dc 01       	movw	r26, r24
     e12:	1d 96       	adiw	r26, 0x0d	; 13
     e14:	3c 91       	ld	r19, X
     e16:	1d 97       	sbiw	r26, 0x0d	; 13
     e18:	21 89       	ldd	r18, Z+17	; 0x11
     e1a:	23 2b       	or	r18, r19
     e1c:	1d 96       	adiw	r26, 0x0d	; 13
     e1e:	2c 93       	st	X, r18
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <OSEventTO>:
     e26:	e0 91 82 06 	lds	r30, 0x0682
     e2a:	f0 91 83 06 	lds	r31, 0x0683
     e2e:	27 85       	ldd	r18, Z+15	; 0x0f
     e30:	dc 01       	movw	r26, r24
     e32:	a2 0f       	add	r26, r18
     e34:	b1 1d       	adc	r27, r1
     e36:	20 89       	ldd	r18, Z+16	; 0x10
     e38:	20 95       	com	r18
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	3c 91       	ld	r19, X
     e3e:	12 97       	sbiw	r26, 0x02	; 2
     e40:	23 23       	and	r18, r19
     e42:	12 96       	adiw	r26, 0x02	; 2
     e44:	2c 93       	st	X, r18
     e46:	21 11       	cpse	r18, r1
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <OSEventTO+0x36>
     e4a:	21 89       	ldd	r18, Z+17	; 0x11
     e4c:	20 95       	com	r18
     e4e:	dc 01       	movw	r26, r24
     e50:	1d 96       	adiw	r26, 0x0d	; 13
     e52:	3c 91       	ld	r19, X
     e54:	1d 97       	sbiw	r26, 0x0d	; 13
     e56:	23 23       	and	r18, r19
     e58:	1d 96       	adiw	r26, 0x0d	; 13
     e5a:	2c 93       	st	X, r18
     e5c:	14 86       	std	Z+12, r1	; 0x0c
     e5e:	17 82       	std	Z+7, r1	; 0x07
     e60:	16 82       	std	Z+6, r1	; 0x06
     e62:	08 95       	ret

00000e64 <OSEventWaitListInit>:
     e64:	fc 01       	movw	r30, r24
     e66:	15 86       	std	Z+13, r1	; 0x0d
     e68:	32 96       	adiw	r30, 0x02	; 2
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	11 92       	st	Z+, r1
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	88 30       	cpi	r24, 0x08	; 8
     e72:	e1 f7       	brne	.-8      	; 0xe6c <OSEventWaitListInit+0x8>
     e74:	08 95       	ret

00000e76 <OSIntExit>:
     e76:	f8 94       	cli
     e78:	80 91 81 06 	lds	r24, 0x0681
     e7c:	81 50       	subi	r24, 0x01	; 1
     e7e:	80 93 81 06 	sts	0x0681, r24
     e82:	90 91 5e 06 	lds	r25, 0x065E
     e86:	89 2b       	or	r24, r25
     e88:	e1 f5       	brne	.+120    	; 0xf02 <OSIntExit+0x8c>
     e8a:	e0 91 76 06 	lds	r30, 0x0676
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	eb 5a       	subi	r30, 0xAB	; 171
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 81       	ld	r24, Z
     e96:	80 93 95 03 	sts	0x0395, r24
     e9a:	e8 2f       	mov	r30, r24
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	e9 58       	subi	r30, 0x89	; 137
     ea0:	f9 4f       	sbci	r31, 0xF9	; 249
     ea2:	e0 81       	ld	r30, Z
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	eb 5a       	subi	r30, 0xAB	; 171
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	88 0f       	add	r24, r24
     eac:	88 0f       	add	r24, r24
     eae:	88 0f       	add	r24, r24
     eb0:	90 81       	ld	r25, Z
     eb2:	89 0f       	add	r24, r25
     eb4:	80 93 64 06 	sts	0x0664, r24
     eb8:	90 91 65 06 	lds	r25, 0x0665
     ebc:	89 17       	cp	r24, r25
     ebe:	09 f1       	breq	.+66     	; 0xf02 <OSIntExit+0x8c>
     ec0:	e8 2f       	mov	r30, r24
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	eb 5e       	subi	r30, 0xEB	; 235
     eca:	f8 4f       	sbci	r31, 0xF8	; 248
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	90 93 75 06 	sts	0x0675, r25
     ed4:	80 93 74 06 	sts	0x0674, r24
     ed8:	80 91 68 06 	lds	r24, 0x0668
     edc:	90 91 69 06 	lds	r25, 0x0669
     ee0:	a0 91 6a 06 	lds	r26, 0x066A
     ee4:	b0 91 6b 06 	lds	r27, 0x066B
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	a1 1d       	adc	r26, r1
     eec:	b1 1d       	adc	r27, r1
     eee:	80 93 68 06 	sts	0x0668, r24
     ef2:	90 93 69 06 	sts	0x0669, r25
     ef6:	a0 93 6a 06 	sts	0x066A, r26
     efa:	b0 93 6b 06 	sts	0x066B, r27
     efe:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
     f02:	78 94       	sei
     f04:	08 95       	ret

00000f06 <OSSched>:
     f06:	f8 94       	cli
     f08:	90 91 81 06 	lds	r25, 0x0681
     f0c:	80 91 5e 06 	lds	r24, 0x065E
     f10:	89 2b       	or	r24, r25
     f12:	d1 f5       	brne	.+116    	; 0xf88 <OSSched+0x82>
     f14:	e0 91 76 06 	lds	r30, 0x0676
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	eb 5a       	subi	r30, 0xAB	; 171
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	e8 2f       	mov	r30, r24
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e9 58       	subi	r30, 0x89	; 137
     f26:	f9 4f       	sbci	r31, 0xF9	; 249
     f28:	e0 81       	ld	r30, Z
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	eb 5a       	subi	r30, 0xAB	; 171
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	88 0f       	add	r24, r24
     f32:	88 0f       	add	r24, r24
     f34:	88 0f       	add	r24, r24
     f36:	90 81       	ld	r25, Z
     f38:	e8 2f       	mov	r30, r24
     f3a:	e9 0f       	add	r30, r25
     f3c:	e0 93 64 06 	sts	0x0664, r30
     f40:	80 91 65 06 	lds	r24, 0x0665
     f44:	e8 17       	cp	r30, r24
     f46:	01 f1       	breq	.+64     	; 0xf88 <OSSched+0x82>
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	eb 5e       	subi	r30, 0xEB	; 235
     f50:	f8 4f       	sbci	r31, 0xF8	; 248
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	90 93 75 06 	sts	0x0675, r25
     f5a:	80 93 74 06 	sts	0x0674, r24
     f5e:	80 91 68 06 	lds	r24, 0x0668
     f62:	90 91 69 06 	lds	r25, 0x0669
     f66:	a0 91 6a 06 	lds	r26, 0x066A
     f6a:	b0 91 6b 06 	lds	r27, 0x066B
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	a1 1d       	adc	r26, r1
     f72:	b1 1d       	adc	r27, r1
     f74:	80 93 68 06 	sts	0x0668, r24
     f78:	90 93 69 06 	sts	0x0669, r25
     f7c:	a0 93 6a 06 	sts	0x066A, r26
     f80:	b0 93 6b 06 	sts	0x066B, r27
     f84:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
     f88:	78 94       	sei
     f8a:	08 95       	ret

00000f8c <OSStart>:
     f8c:	80 91 5f 06 	lds	r24, 0x065F
     f90:	81 11       	cpse	r24, r1
     f92:	26 c0       	rjmp	.+76     	; 0xfe0 <OSStart+0x54>
     f94:	e0 91 76 06 	lds	r30, 0x0676
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	eb 5a       	subi	r30, 0xAB	; 171
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	e0 81       	ld	r30, Z
     fa0:	ae 2f       	mov	r26, r30
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	a9 58       	subi	r26, 0x89	; 137
     fa6:	b9 4f       	sbci	r27, 0xF9	; 249
     fa8:	ac 91       	ld	r26, X
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ab 5a       	subi	r26, 0xAB	; 171
     fae:	be 4f       	sbci	r27, 0xFE	; 254
     fb0:	ee 0f       	add	r30, r30
     fb2:	ee 0f       	add	r30, r30
     fb4:	ee 0f       	add	r30, r30
     fb6:	8c 91       	ld	r24, X
     fb8:	e8 0f       	add	r30, r24
     fba:	e0 93 64 06 	sts	0x0664, r30
     fbe:	e0 93 65 06 	sts	0x0665, r30
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	eb 5e       	subi	r30, 0xEB	; 235
     fca:	f8 4f       	sbci	r31, 0xF8	; 248
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	90 93 75 06 	sts	0x0675, r25
     fd4:	80 93 74 06 	sts	0x0674, r24
     fd8:	90 93 83 06 	sts	0x0683, r25
     fdc:	80 93 82 06 	sts	0x0682, r24
     fe0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
     fe4:	08 95       	ret

00000fe6 <OSTCBInit>:
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	f8 94       	cli
     fec:	e0 91 70 06 	lds	r30, 0x0670
     ff0:	f0 91 71 06 	lds	r31, 0x0671
     ff4:	30 97       	sbiw	r30, 0x00	; 0
     ff6:	09 f4       	brne	.+2      	; 0xffa <OSTCBInit+0x14>
     ff8:	4f c0       	rjmp	.+158    	; 0x1098 <OSTCBInit+0xb2>
     ffa:	22 81       	ldd	r18, Z+2	; 0x02
     ffc:	33 81       	ldd	r19, Z+3	; 0x03
     ffe:	30 93 71 06 	sts	0x0671, r19
    1002:	20 93 70 06 	sts	0x0670, r18
    1006:	78 94       	sei
    1008:	71 83       	std	Z+1, r23	; 0x01
    100a:	60 83       	st	Z, r22
    100c:	85 87       	std	Z+13, r24	; 0x0d
    100e:	14 86       	std	Z+12, r1	; 0x0c
    1010:	13 86       	std	Z+11, r1	; 0x0b
    1012:	12 86       	std	Z+10, r1	; 0x0a
    1014:	c8 2f       	mov	r28, r24
    1016:	c6 95       	lsr	r28
    1018:	c6 95       	lsr	r28
    101a:	c6 95       	lsr	r28
    101c:	c7 87       	std	Z+15, r28	; 0x0f
    101e:	d0 e0       	ldi	r29, 0x00	; 0
    1020:	cb 5a       	subi	r28, 0xAB	; 171
    1022:	dd 4f       	sbci	r29, 0xFD	; 253
    1024:	98 81       	ld	r25, Y
    1026:	91 8b       	std	Z+17, r25	; 0x11
    1028:	c8 2f       	mov	r28, r24
    102a:	c7 70       	andi	r28, 0x07	; 7
    102c:	c6 87       	std	Z+14, r28	; 0x0e
    102e:	d0 e0       	ldi	r29, 0x00	; 0
    1030:	cb 5a       	subi	r28, 0xAB	; 171
    1032:	dd 4f       	sbci	r29, 0xFD	; 253
    1034:	98 81       	ld	r25, Y
    1036:	90 8b       	std	Z+16, r25	; 0x10
    1038:	17 82       	std	Z+7, r1	; 0x07
    103a:	16 82       	std	Z+6, r1	; 0x06
    103c:	11 86       	std	Z+9, r1	; 0x09
    103e:	10 86       	std	Z+8, r1	; 0x08
    1040:	f8 94       	cli
    1042:	a8 2f       	mov	r26, r24
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	aa 0f       	add	r26, r26
    1048:	bb 1f       	adc	r27, r27
    104a:	ab 5e       	subi	r26, 0xEB	; 235
    104c:	b8 4f       	sbci	r27, 0xF8	; 248
    104e:	ed 93       	st	X+, r30
    1050:	fc 93       	st	X, r31
    1052:	a0 91 66 06 	lds	r26, 0x0666
    1056:	b0 91 67 06 	lds	r27, 0x0667
    105a:	b3 83       	std	Z+3, r27	; 0x03
    105c:	a2 83       	std	Z+2, r26	; 0x02
    105e:	15 82       	std	Z+5, r1	; 0x05
    1060:	14 82       	std	Z+4, r1	; 0x04
    1062:	10 97       	sbiw	r26, 0x00	; 0
    1064:	21 f0       	breq	.+8      	; 0x106e <OSTCBInit+0x88>
    1066:	15 96       	adiw	r26, 0x05	; 5
    1068:	fc 93       	st	X, r31
    106a:	ee 93       	st	-X, r30
    106c:	14 97       	sbiw	r26, 0x04	; 4
    106e:	f0 93 67 06 	sts	0x0667, r31
    1072:	e0 93 66 06 	sts	0x0666, r30
    1076:	90 91 76 06 	lds	r25, 0x0676
    107a:	81 89       	ldd	r24, Z+17	; 0x11
    107c:	89 2b       	or	r24, r25
    107e:	80 93 76 06 	sts	0x0676, r24
    1082:	a7 85       	ldd	r26, Z+15	; 0x0f
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	a9 58       	subi	r26, 0x89	; 137
    1088:	b9 4f       	sbci	r27, 0xF9	; 249
    108a:	9c 91       	ld	r25, X
    108c:	80 89       	ldd	r24, Z+16	; 0x10
    108e:	89 2b       	or	r24, r25
    1090:	8c 93       	st	X, r24
    1092:	78 94       	sei
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <OSTCBInit+0xb6>
    1098:	78 94       	sei
    109a:	86 e4       	ldi	r24, 0x46	; 70
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <OSTimeTick>:
    10a2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <OSTimeTickHook>
    10a6:	e0 91 66 06 	lds	r30, 0x0666
    10aa:	f0 91 67 06 	lds	r31, 0x0667
    10ae:	85 85       	ldd	r24, Z+13	; 0x0d
    10b0:	8f 33       	cpi	r24, 0x3F	; 63
    10b2:	39 f1       	breq	.+78     	; 0x1102 <OSTimeTick+0x60>
    10b4:	40 91 76 06 	lds	r20, 0x0676
    10b8:	21 e0       	ldi	r18, 0x01	; 1
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	f8 94       	cli
    10be:	82 85       	ldd	r24, Z+10	; 0x0a
    10c0:	93 85       	ldd	r25, Z+11	; 0x0b
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	a9 f0       	breq	.+42     	; 0x10f0 <OSTimeTick+0x4e>
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	93 87       	std	Z+11, r25	; 0x0b
    10ca:	82 87       	std	Z+10, r24	; 0x0a
    10cc:	89 2b       	or	r24, r25
    10ce:	81 f4       	brne	.+32     	; 0x10f0 <OSTimeTick+0x4e>
    10d0:	84 85       	ldd	r24, Z+12	; 0x0c
    10d2:	83 fd       	sbrc	r24, 3
    10d4:	0b c0       	rjmp	.+22     	; 0x10ec <OSTimeTick+0x4a>
    10d6:	81 89       	ldd	r24, Z+17	; 0x11
    10d8:	a7 85       	ldd	r26, Z+15	; 0x0f
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	a9 58       	subi	r26, 0x89	; 137
    10de:	b9 4f       	sbci	r27, 0xF9	; 249
    10e0:	5c 91       	ld	r21, X
    10e2:	90 89       	ldd	r25, Z+16	; 0x10
    10e4:	95 2b       	or	r25, r21
    10e6:	9c 93       	st	X, r25
    10e8:	48 2b       	or	r20, r24
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <OSTimeTick+0x4e>
    10ec:	33 87       	std	Z+11, r19	; 0x0b
    10ee:	22 87       	std	Z+10, r18	; 0x0a
    10f0:	02 80       	ldd	r0, Z+2	; 0x02
    10f2:	f3 81       	ldd	r31, Z+3	; 0x03
    10f4:	e0 2d       	mov	r30, r0
    10f6:	78 94       	sei
    10f8:	85 85       	ldd	r24, Z+13	; 0x0d
    10fa:	8f 33       	cpi	r24, 0x3F	; 63
    10fc:	f9 f6       	brne	.-66     	; 0x10bc <OSTimeTick+0x1a>
    10fe:	40 93 76 06 	sts	0x0676, r20
    1102:	f8 94       	cli
    1104:	80 91 84 06 	lds	r24, 0x0684
    1108:	90 91 85 06 	lds	r25, 0x0685
    110c:	a0 91 86 06 	lds	r26, 0x0686
    1110:	b0 91 87 06 	lds	r27, 0x0687
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	a1 1d       	adc	r26, r1
    1118:	b1 1d       	adc	r27, r1
    111a:	80 93 84 06 	sts	0x0684, r24
    111e:	90 93 85 06 	sts	0x0685, r25
    1122:	a0 93 86 06 	sts	0x0686, r26
    1126:	b0 93 87 06 	sts	0x0687, r27
    112a:	78 94       	sei
    112c:	08 95       	ret

0000112e <OSMboxAccept>:
    112e:	fc 01       	movw	r30, r24
    1130:	f8 94       	cli
    1132:	84 85       	ldd	r24, Z+12	; 0x0c
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	21 f0       	breq	.+8      	; 0x1140 <OSMboxAccept+0x12>
    1138:	78 94       	sei
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	08 95       	ret
    1140:	20 81       	ld	r18, Z
    1142:	31 81       	ldd	r19, Z+1	; 0x01
    1144:	21 15       	cp	r18, r1
    1146:	31 05       	cpc	r19, r1
    1148:	11 f0       	breq	.+4      	; 0x114e <OSMboxAccept+0x20>
    114a:	11 82       	std	Z+1, r1	; 0x01
    114c:	10 82       	st	Z, r1
    114e:	78 94       	sei
    1150:	82 2f       	mov	r24, r18
    1152:	93 2f       	mov	r25, r19
    1154:	08 95       	ret

00001156 <OSMboxCreate>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	f8 94       	cli
    115c:	c0 91 7f 06 	lds	r28, 0x067F
    1160:	d0 91 80 06 	lds	r29, 0x0680
    1164:	20 97       	sbiw	r28, 0x00	; 0
    1166:	31 f0       	breq	.+12     	; 0x1174 <OSMboxCreate+0x1e>
    1168:	28 81       	ld	r18, Y
    116a:	39 81       	ldd	r19, Y+1	; 0x01
    116c:	30 93 80 06 	sts	0x0680, r19
    1170:	20 93 7f 06 	sts	0x067F, r18
    1174:	78 94       	sei
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	39 f0       	breq	.+14     	; 0x1188 <OSMboxCreate+0x32>
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	2c 87       	std	Y+12, r18	; 0x0c
    117e:	99 83       	std	Y+1, r25	; 0x01
    1180:	88 83       	st	Y, r24
    1182:	ce 01       	movw	r24, r28
    1184:	0e 94 32 07 	call	0xe64	; 0xe64 <OSEventWaitListInit>
    1188:	ce 01       	movw	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <OSMboxPost>:
    1190:	f8 94       	cli
    1192:	fc 01       	movw	r30, r24
    1194:	24 85       	ldd	r18, Z+12	; 0x0c
    1196:	21 30       	cpi	r18, 0x01	; 1
    1198:	19 f0       	breq	.+6      	; 0x11a0 <OSMboxPost+0x10>
    119a:	78 94       	sei
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	08 95       	ret
    11a0:	fc 01       	movw	r30, r24
    11a2:	25 85       	ldd	r18, Z+13	; 0x0d
    11a4:	22 23       	and	r18, r18
    11a6:	41 f0       	breq	.+16     	; 0x11b8 <OSMboxPost+0x28>
    11a8:	42 e0       	ldi	r20, 0x02	; 2
    11aa:	0e 94 91 06 	call	0xd22	; 0xd22 <OSEventTaskRdy>
    11ae:	78 94       	sei
    11b0:	0e 94 83 07 	call	0xf06	; 0xf06 <OSSched>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 81       	ld	r18, Z
    11bc:	31 81       	ldd	r19, Z+1	; 0x01
    11be:	23 2b       	or	r18, r19
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <OSMboxPost+0x38>
    11c2:	78 94       	sei
    11c4:	84 e1       	ldi	r24, 0x14	; 20
    11c6:	08 95       	ret
    11c8:	fc 01       	movw	r30, r24
    11ca:	71 83       	std	Z+1, r23	; 0x01
    11cc:	60 83       	st	Z, r22
    11ce:	78 94       	sei
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret

000011d4 <OSSemCreate>:
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	f8 94       	cli
    11da:	c0 91 7f 06 	lds	r28, 0x067F
    11de:	d0 91 80 06 	lds	r29, 0x0680
    11e2:	20 97       	sbiw	r28, 0x00	; 0
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <OSSemCreate+0x1e>
    11e6:	28 81       	ld	r18, Y
    11e8:	39 81       	ldd	r19, Y+1	; 0x01
    11ea:	30 93 80 06 	sts	0x0680, r19
    11ee:	20 93 7f 06 	sts	0x067F, r18
    11f2:	78 94       	sei
    11f4:	20 97       	sbiw	r28, 0x00	; 0
    11f6:	39 f0       	breq	.+14     	; 0x1206 <OSSemCreate+0x32>
    11f8:	23 e0       	ldi	r18, 0x03	; 3
    11fa:	2c 87       	std	Y+12, r18	; 0x0c
    11fc:	9b 87       	std	Y+11, r25	; 0x0b
    11fe:	8a 87       	std	Y+10, r24	; 0x0a
    1200:	ce 01       	movw	r24, r28
    1202:	0e 94 32 07 	call	0xe64	; 0xe64 <OSEventWaitListInit>
    1206:	ce 01       	movw	r24, r28
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <OSSemPend>:
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	8a 01       	movw	r16, r20
    121a:	f8 94       	cli
    121c:	8c 85       	ldd	r24, Y+12	; 0x0c
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	21 f0       	breq	.+8      	; 0x122a <OSSemPend+0x1c>
    1222:	78 94       	sei
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	fa 01       	movw	r30, r20
    1228:	80 83       	st	Z, r24
    122a:	8a 85       	ldd	r24, Y+10	; 0x0a
    122c:	9b 85       	ldd	r25, Y+11	; 0x0b
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	39 f0       	breq	.+14     	; 0x1240 <OSSemPend+0x32>
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9b 87       	std	Y+11, r25	; 0x0b
    1236:	8a 87       	std	Y+10, r24	; 0x0a
    1238:	78 94       	sei
    123a:	f8 01       	movw	r30, r16
    123c:	10 82       	st	Z, r1
    123e:	2d c0       	rjmp	.+90     	; 0x129a <OSSemPend+0x8c>
    1240:	80 91 81 06 	lds	r24, 0x0681
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <OSSemPend+0x44>
    1248:	78 94       	sei
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	f8 01       	movw	r30, r16
    124e:	80 83       	st	Z, r24
    1250:	24 c0       	rjmp	.+72     	; 0x129a <OSSemPend+0x8c>
    1252:	e0 91 82 06 	lds	r30, 0x0682
    1256:	f0 91 83 06 	lds	r31, 0x0683
    125a:	84 85       	ldd	r24, Z+12	; 0x0c
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	84 87       	std	Z+12, r24	; 0x0c
    1260:	73 87       	std	Z+11, r23	; 0x0b
    1262:	62 87       	std	Z+10, r22	; 0x0a
    1264:	ce 01       	movw	r24, r28
    1266:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <OSEventTaskWait>
    126a:	78 94       	sei
    126c:	0e 94 83 07 	call	0xf06	; 0xf06 <OSSched>
    1270:	f8 94       	cli
    1272:	e0 91 82 06 	lds	r30, 0x0682
    1276:	f0 91 83 06 	lds	r31, 0x0683
    127a:	84 85       	ldd	r24, Z+12	; 0x0c
    127c:	80 ff       	sbrs	r24, 0
    127e:	08 c0       	rjmp	.+16     	; 0x1290 <OSSemPend+0x82>
    1280:	ce 01       	movw	r24, r28
    1282:	0e 94 13 07 	call	0xe26	; 0xe26 <OSEventTO>
    1286:	78 94       	sei
    1288:	8a e0       	ldi	r24, 0x0A	; 10
    128a:	f8 01       	movw	r30, r16
    128c:	80 83       	st	Z, r24
    128e:	05 c0       	rjmp	.+10     	; 0x129a <OSSemPend+0x8c>
    1290:	17 82       	std	Z+7, r1	; 0x07
    1292:	16 82       	std	Z+6, r1	; 0x06
    1294:	78 94       	sei
    1296:	f8 01       	movw	r30, r16
    1298:	10 82       	st	Z, r1
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <OSTaskCreate>:
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	b2 2e       	mov	r11, r18
    12b8:	2f e3       	ldi	r18, 0x3F	; 63
    12ba:	2b 15       	cp	r18, r11
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <OSTaskCreate+0x1c>
    12be:	4f c0       	rjmp	.+158    	; 0x135e <OSTaskCreate+0xba>
    12c0:	f8 94       	cli
    12c2:	cb 2d       	mov	r28, r11
    12c4:	d0 e0       	ldi	r29, 0x00	; 0
    12c6:	fe 01       	movw	r30, r28
    12c8:	ee 0f       	add	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	eb 5e       	subi	r30, 0xEB	; 235
    12ce:	f8 4f       	sbci	r31, 0xF8	; 248
    12d0:	01 90       	ld	r0, Z+
    12d2:	f0 81       	ld	r31, Z
    12d4:	e0 2d       	mov	r30, r0
    12d6:	ef 2b       	or	r30, r31
    12d8:	09 f0       	breq	.+2      	; 0x12dc <OSTaskCreate+0x38>
    12da:	3e c0       	rjmp	.+124    	; 0x1358 <OSTaskCreate+0xb4>
    12dc:	fe 01       	movw	r30, r28
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	eb 5e       	subi	r30, 0xEB	; 235
    12e4:	f8 4f       	sbci	r31, 0xF8	; 248
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	31 83       	std	Z+1, r19	; 0x01
    12ec:	20 83       	st	Z, r18
    12ee:	78 94       	sei
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	0e 94 41 06 	call	0xc82	; 0xc82 <OSTaskStkInit>
    12f8:	c1 2c       	mov	r12, r1
    12fa:	d1 2c       	mov	r13, r1
    12fc:	e1 2c       	mov	r14, r1
    12fe:	f1 2c       	mov	r15, r1
    1300:	00 e0       	ldi	r16, 0x00	; 0
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	bc 01       	movw	r22, r24
    130e:	8b 2d       	mov	r24, r11
    1310:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <OSTCBInit>
    1314:	81 11       	cpse	r24, r1
    1316:	17 c0       	rjmp	.+46     	; 0x1346 <OSTaskCreate+0xa2>
    1318:	f8 94       	cli
    131a:	80 91 73 06 	lds	r24, 0x0673
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 93 73 06 	sts	0x0673, r24
    1324:	cc 0f       	add	r28, r28
    1326:	dd 1f       	adc	r29, r29
    1328:	cb 5e       	subi	r28, 0xEB	; 235
    132a:	d8 4f       	sbci	r29, 0xF8	; 248
    132c:	88 81       	ld	r24, Y
    132e:	99 81       	ldd	r25, Y+1	; 0x01
    1330:	0e 94 8b 06 	call	0xd16	; 0xd16 <OSTaskCreateHook>
    1334:	78 94       	sei
    1336:	80 91 5f 06 	lds	r24, 0x065F
    133a:	88 23       	and	r24, r24
    133c:	91 f0       	breq	.+36     	; 0x1362 <OSTaskCreate+0xbe>
    133e:	0e 94 83 07 	call	0xf06	; 0xf06 <OSSched>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <OSTaskCreate+0xc0>
    1346:	f8 94       	cli
    1348:	cc 0f       	add	r28, r28
    134a:	dd 1f       	adc	r29, r29
    134c:	cb 5e       	subi	r28, 0xEB	; 235
    134e:	d8 4f       	sbci	r29, 0xF8	; 248
    1350:	19 82       	std	Y+1, r1	; 0x01
    1352:	18 82       	st	Y, r1
    1354:	78 94       	sei
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <OSTaskCreate+0xc0>
    1358:	78 94       	sei
    135a:	88 e2       	ldi	r24, 0x28	; 40
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <OSTaskCreate+0xc0>
    135e:	8a e2       	ldi	r24, 0x2A	; 42
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <OSTaskCreate+0xc0>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	bf 90       	pop	r11
    1376:	08 95       	ret

00001378 <OSInit>:
    1378:	10 92 84 06 	sts	0x0684, r1
    137c:	10 92 85 06 	sts	0x0685, r1
    1380:	10 92 86 06 	sts	0x0686, r1
    1384:	10 92 87 06 	sts	0x0687, r1
    1388:	10 92 81 06 	sts	0x0681, r1
    138c:	10 92 5e 06 	sts	0x065E, r1
    1390:	10 92 73 06 	sts	0x0673, r1
    1394:	10 92 5f 06 	sts	0x065F, r1
    1398:	10 92 60 06 	sts	0x0660, r1
    139c:	10 92 61 06 	sts	0x0661, r1
    13a0:	10 92 62 06 	sts	0x0662, r1
    13a4:	10 92 63 06 	sts	0x0663, r1
    13a8:	10 92 68 06 	sts	0x0668, r1
    13ac:	10 92 69 06 	sts	0x0669, r1
    13b0:	10 92 6a 06 	sts	0x066A, r1
    13b4:	10 92 6b 06 	sts	0x066B, r1
    13b8:	10 92 76 06 	sts	0x0676, r1
    13bc:	e7 e7       	ldi	r30, 0x77	; 119
    13be:	f6 e0       	ldi	r31, 0x06	; 6
    13c0:	8f e7       	ldi	r24, 0x7F	; 127
    13c2:	96 e0       	ldi	r25, 0x06	; 6
    13c4:	11 92       	st	Z+, r1
    13c6:	e8 17       	cp	r30, r24
    13c8:	f9 07       	cpc	r31, r25
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <OSInit+0x4c>
    13cc:	10 92 65 06 	sts	0x0665, r1
    13d0:	10 92 64 06 	sts	0x0664, r1
    13d4:	10 92 75 06 	sts	0x0675, r1
    13d8:	10 92 74 06 	sts	0x0674, r1
    13dc:	10 92 83 06 	sts	0x0683, r1
    13e0:	10 92 82 06 	sts	0x0682, r1
    13e4:	10 92 67 06 	sts	0x0667, r1
    13e8:	10 92 66 06 	sts	0x0666, r1
    13ec:	e5 e1       	ldi	r30, 0x15	; 21
    13ee:	f7 e0       	ldi	r31, 0x07	; 7
    13f0:	85 e9       	ldi	r24, 0x95	; 149
    13f2:	97 e0       	ldi	r25, 0x07	; 7
    13f4:	11 92       	st	Z+, r1
    13f6:	11 92       	st	Z+, r1
    13f8:	e8 17       	cp	r30, r24
    13fa:	f9 07       	cpc	r31, r25
    13fc:	d9 f7       	brne	.-10     	; 0x13f4 <OSInit+0x7c>
    13fe:	83 e7       	ldi	r24, 0x73	; 115
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	25 e1       	ldi	r18, 0x15	; 21
    1404:	33 e0       	ldi	r19, 0x03	; 3
    1406:	fc 01       	movw	r30, r24
    1408:	70 97       	sbiw	r30, 0x10	; 16
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	80 83       	st	Z, r24
    140e:	42 96       	adiw	r24, 0x12	; 18
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
    1414:	c1 f7       	brne	.-16     	; 0x1406 <OSInit+0x8e>
    1416:	10 92 06 03 	sts	0x0306, r1
    141a:	10 92 05 03 	sts	0x0305, r1
    141e:	81 e6       	ldi	r24, 0x61	; 97
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	90 93 71 06 	sts	0x0671, r25
    1426:	80 93 70 06 	sts	0x0670, r24
    142a:	86 e9       	ldi	r24, 0x96	; 150
    142c:	96 e0       	ldi	r25, 0x06	; 6
    142e:	24 e1       	ldi	r18, 0x14	; 20
    1430:	37 e0       	ldi	r19, 0x07	; 7
    1432:	fc 01       	movw	r30, r24
    1434:	3e 97       	sbiw	r30, 0x0e	; 14
    1436:	91 83       	std	Z+1, r25	; 0x01
    1438:	80 83       	st	Z, r24
    143a:	0e 96       	adiw	r24, 0x0e	; 14
    143c:	82 17       	cp	r24, r18
    143e:	93 07       	cpc	r25, r19
    1440:	c1 f7       	brne	.-16     	; 0x1432 <OSInit+0xba>
    1442:	10 92 07 07 	sts	0x0707, r1
    1446:	10 92 06 07 	sts	0x0706, r1
    144a:	88 e8       	ldi	r24, 0x88	; 136
    144c:	96 e0       	ldi	r25, 0x06	; 6
    144e:	90 93 80 06 	sts	0x0680, r25
    1452:	80 93 7f 06 	sts	0x067F, r24
    1456:	2f e3       	ldi	r18, 0x3F	; 63
    1458:	44 e9       	ldi	r20, 0x94	; 148
    145a:	53 e0       	ldi	r21, 0x03	; 3
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	8e e8       	ldi	r24, 0x8E	; 142
    1462:	96 e0       	ldi	r25, 0x06	; 6
    1464:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
    1468:	2e e3       	ldi	r18, 0x3E	; 62
    146a:	44 e5       	ldi	r20, 0x54	; 84
    146c:	53 e0       	ldi	r21, 0x03	; 3
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	85 e8       	ldi	r24, 0x85	; 133
    1474:	9a e0       	ldi	r25, 0x0A	; 10
    1476:	0e 94 52 09 	call	0x12a4	; 0x12a4 <OSTaskCreate>
    147a:	08 95       	ret

0000147c <OSTimeDly>:
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	e1 f0       	breq	.+56     	; 0x14b8 <OSTimeDly+0x3c>
    1480:	f8 94       	cli
    1482:	e0 91 82 06 	lds	r30, 0x0682
    1486:	f0 91 83 06 	lds	r31, 0x0683
    148a:	a7 85       	ldd	r26, Z+15	; 0x0f
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	a9 58       	subi	r26, 0x89	; 137
    1490:	b9 4f       	sbci	r27, 0xF9	; 249
    1492:	20 89       	ldd	r18, Z+16	; 0x10
    1494:	20 95       	com	r18
    1496:	3c 91       	ld	r19, X
    1498:	23 23       	and	r18, r19
    149a:	2c 93       	st	X, r18
    149c:	21 11       	cpse	r18, r1
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <OSTimeDly+0x32>
    14a0:	21 89       	ldd	r18, Z+17	; 0x11
    14a2:	20 95       	com	r18
    14a4:	30 91 76 06 	lds	r19, 0x0676
    14a8:	23 23       	and	r18, r19
    14aa:	20 93 76 06 	sts	0x0676, r18
    14ae:	93 87       	std	Z+11, r25	; 0x0b
    14b0:	82 87       	std	Z+10, r24	; 0x0a
    14b2:	78 94       	sei
    14b4:	0e 94 83 07 	call	0xf06	; 0xf06 <OSSched>
    14b8:	08 95       	ret

000014ba <OSStatInit>:
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
    14c2:	f8 94       	cli
    14c4:	10 92 60 06 	sts	0x0660, r1
    14c8:	10 92 61 06 	sts	0x0661, r1
    14cc:	10 92 62 06 	sts	0x0662, r1
    14d0:	10 92 63 06 	sts	0x0663, r1
    14d4:	78 94       	sei
    14d6:	88 ec       	ldi	r24, 0xC8	; 200
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
    14de:	f8 94       	cli
    14e0:	80 91 60 06 	lds	r24, 0x0660
    14e4:	90 91 61 06 	lds	r25, 0x0661
    14e8:	a0 91 62 06 	lds	r26, 0x0662
    14ec:	b0 91 63 06 	lds	r27, 0x0663
    14f0:	80 93 6c 06 	sts	0x066C, r24
    14f4:	90 93 6d 06 	sts	0x066D, r25
    14f8:	a0 93 6e 06 	sts	0x066E, r26
    14fc:	b0 93 6f 06 	sts	0x066F, r27
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 14 07 	sts	0x0714, r24
    1506:	78 94       	sei
    1508:	08 95       	ret

0000150a <OSTaskStat>:
    150a:	80 91 14 07 	lds	r24, 0x0714
    150e:	81 11       	cpse	r24, r1
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <OSTaskStat+0x18>
    1512:	80 e9       	ldi	r24, 0x90	; 144
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
    151a:	80 91 14 07 	lds	r24, 0x0714
    151e:	88 23       	and	r24, r24
    1520:	c1 f3       	breq	.-16     	; 0x1512 <OSTaskStat+0x8>
    1522:	c4 e6       	ldi	r28, 0x64	; 100
    1524:	f8 94       	cli
    1526:	20 91 60 06 	lds	r18, 0x0660
    152a:	30 91 61 06 	lds	r19, 0x0661
    152e:	40 91 62 06 	lds	r20, 0x0662
    1532:	50 91 63 06 	lds	r21, 0x0663
    1536:	20 93 95 07 	sts	0x0795, r18
    153a:	30 93 96 07 	sts	0x0796, r19
    153e:	40 93 97 07 	sts	0x0797, r20
    1542:	50 93 98 07 	sts	0x0798, r21
    1546:	10 92 60 06 	sts	0x0660, r1
    154a:	10 92 61 06 	sts	0x0661, r1
    154e:	10 92 62 06 	sts	0x0662, r1
    1552:	10 92 63 06 	sts	0x0663, r1
    1556:	78 94       	sei
    1558:	c0 90 6c 06 	lds	r12, 0x066C
    155c:	d0 90 6d 06 	lds	r13, 0x066D
    1560:	e0 90 6e 06 	lds	r14, 0x066E
    1564:	f0 90 6f 06 	lds	r15, 0x066F
    1568:	c1 14       	cp	r12, r1
    156a:	d1 04       	cpc	r13, r1
    156c:	e1 04       	cpc	r14, r1
    156e:	f1 04       	cpc	r15, r1
    1570:	b9 f0       	breq	.+46     	; 0x15a0 <OSTaskStat+0x96>
    1572:	a4 e6       	ldi	r26, 0x64	; 100
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__muluhisi3>
    157a:	a7 01       	movw	r20, r14
    157c:	96 01       	movw	r18, r12
    157e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__udivmodsi4>
    1582:	8c 2f       	mov	r24, r28
    1584:	82 1b       	sub	r24, r18
    1586:	85 36       	cpi	r24, 0x65	; 101
    1588:	1c f0       	brlt	.+6      	; 0x1590 <OSTaskStat+0x86>
    158a:	c0 93 72 06 	sts	0x0672, r28
    158e:	0a c0       	rjmp	.+20     	; 0x15a4 <OSTaskStat+0x9a>
    1590:	88 23       	and	r24, r24
    1592:	1c f4       	brge	.+6      	; 0x159a <OSTaskStat+0x90>
    1594:	10 92 72 06 	sts	0x0672, r1
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <OSTaskStat+0x9a>
    159a:	80 93 72 06 	sts	0x0672, r24
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <OSTaskStat+0x9a>
    15a0:	10 92 72 06 	sts	0x0672, r1
    15a4:	0e 94 8c 06 	call	0xd18	; 0xd18 <OSTaskStatHook>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 3e 0a 	call	0x147c	; 0x147c <OSTimeDly>
    15b0:	b9 cf       	rjmp	.-142    	; 0x1524 <OSTaskStat+0x1a>

000015b2 <__subsf3>:
    15b2:	50 58       	subi	r21, 0x80	; 128

000015b4 <__addsf3>:
    15b4:	bb 27       	eor	r27, r27
    15b6:	aa 27       	eor	r26, r26
    15b8:	0e d0       	rcall	.+28     	; 0x15d6 <__addsf3x>
    15ba:	0b c1       	rjmp	.+534    	; 0x17d2 <__fp_round>
    15bc:	fc d0       	rcall	.+504    	; 0x17b6 <__fp_pscA>
    15be:	30 f0       	brcs	.+12     	; 0x15cc <__addsf3+0x18>
    15c0:	01 d1       	rcall	.+514    	; 0x17c4 <__fp_pscB>
    15c2:	20 f0       	brcs	.+8      	; 0x15cc <__addsf3+0x18>
    15c4:	31 f4       	brne	.+12     	; 0x15d2 <__addsf3+0x1e>
    15c6:	9f 3f       	cpi	r25, 0xFF	; 255
    15c8:	11 f4       	brne	.+4      	; 0x15ce <__addsf3+0x1a>
    15ca:	1e f4       	brtc	.+6      	; 0x15d2 <__addsf3+0x1e>
    15cc:	f1 c0       	rjmp	.+482    	; 0x17b0 <__fp_nan>
    15ce:	0e f4       	brtc	.+2      	; 0x15d2 <__addsf3+0x1e>
    15d0:	e0 95       	com	r30
    15d2:	e7 fb       	bst	r30, 7
    15d4:	e7 c0       	rjmp	.+462    	; 0x17a4 <__fp_inf>

000015d6 <__addsf3x>:
    15d6:	e9 2f       	mov	r30, r25
    15d8:	0d d1       	rcall	.+538    	; 0x17f4 <__fp_split3>
    15da:	80 f3       	brcs	.-32     	; 0x15bc <__addsf3+0x8>
    15dc:	ba 17       	cp	r27, r26
    15de:	62 07       	cpc	r22, r18
    15e0:	73 07       	cpc	r23, r19
    15e2:	84 07       	cpc	r24, r20
    15e4:	95 07       	cpc	r25, r21
    15e6:	18 f0       	brcs	.+6      	; 0x15ee <__addsf3x+0x18>
    15e8:	71 f4       	brne	.+28     	; 0x1606 <__addsf3x+0x30>
    15ea:	9e f5       	brtc	.+102    	; 0x1652 <__addsf3x+0x7c>
    15ec:	25 c1       	rjmp	.+586    	; 0x1838 <__fp_zero>
    15ee:	0e f4       	brtc	.+2      	; 0x15f2 <__addsf3x+0x1c>
    15f0:	e0 95       	com	r30
    15f2:	0b 2e       	mov	r0, r27
    15f4:	ba 2f       	mov	r27, r26
    15f6:	a0 2d       	mov	r26, r0
    15f8:	0b 01       	movw	r0, r22
    15fa:	b9 01       	movw	r22, r18
    15fc:	90 01       	movw	r18, r0
    15fe:	0c 01       	movw	r0, r24
    1600:	ca 01       	movw	r24, r20
    1602:	a0 01       	movw	r20, r0
    1604:	11 24       	eor	r1, r1
    1606:	ff 27       	eor	r31, r31
    1608:	59 1b       	sub	r21, r25
    160a:	99 f0       	breq	.+38     	; 0x1632 <__addsf3x+0x5c>
    160c:	59 3f       	cpi	r21, 0xF9	; 249
    160e:	50 f4       	brcc	.+20     	; 0x1624 <__addsf3x+0x4e>
    1610:	50 3e       	cpi	r21, 0xE0	; 224
    1612:	68 f1       	brcs	.+90     	; 0x166e <__addsf3x+0x98>
    1614:	1a 16       	cp	r1, r26
    1616:	f0 40       	sbci	r31, 0x00	; 0
    1618:	a2 2f       	mov	r26, r18
    161a:	23 2f       	mov	r18, r19
    161c:	34 2f       	mov	r19, r20
    161e:	44 27       	eor	r20, r20
    1620:	58 5f       	subi	r21, 0xF8	; 248
    1622:	f3 cf       	rjmp	.-26     	; 0x160a <__addsf3x+0x34>
    1624:	46 95       	lsr	r20
    1626:	37 95       	ror	r19
    1628:	27 95       	ror	r18
    162a:	a7 95       	ror	r26
    162c:	f0 40       	sbci	r31, 0x00	; 0
    162e:	53 95       	inc	r21
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__addsf3x+0x4e>
    1632:	7e f4       	brtc	.+30     	; 0x1652 <__addsf3x+0x7c>
    1634:	1f 16       	cp	r1, r31
    1636:	ba 0b       	sbc	r27, r26
    1638:	62 0b       	sbc	r22, r18
    163a:	73 0b       	sbc	r23, r19
    163c:	84 0b       	sbc	r24, r20
    163e:	ba f0       	brmi	.+46     	; 0x166e <__addsf3x+0x98>
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	a1 f0       	breq	.+40     	; 0x166c <__addsf3x+0x96>
    1644:	ff 0f       	add	r31, r31
    1646:	bb 1f       	adc	r27, r27
    1648:	66 1f       	adc	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	c2 f7       	brpl	.-16     	; 0x1640 <__addsf3x+0x6a>
    1650:	0e c0       	rjmp	.+28     	; 0x166e <__addsf3x+0x98>
    1652:	ba 0f       	add	r27, r26
    1654:	62 1f       	adc	r22, r18
    1656:	73 1f       	adc	r23, r19
    1658:	84 1f       	adc	r24, r20
    165a:	48 f4       	brcc	.+18     	; 0x166e <__addsf3x+0x98>
    165c:	87 95       	ror	r24
    165e:	77 95       	ror	r23
    1660:	67 95       	ror	r22
    1662:	b7 95       	ror	r27
    1664:	f7 95       	ror	r31
    1666:	9e 3f       	cpi	r25, 0xFE	; 254
    1668:	08 f0       	brcs	.+2      	; 0x166c <__addsf3x+0x96>
    166a:	b3 cf       	rjmp	.-154    	; 0x15d2 <__addsf3+0x1e>
    166c:	93 95       	inc	r25
    166e:	88 0f       	add	r24, r24
    1670:	08 f0       	brcs	.+2      	; 0x1674 <__addsf3x+0x9e>
    1672:	99 27       	eor	r25, r25
    1674:	ee 0f       	add	r30, r30
    1676:	97 95       	ror	r25
    1678:	87 95       	ror	r24
    167a:	08 95       	ret

0000167c <__divsf3>:
    167c:	0c d0       	rcall	.+24     	; 0x1696 <__divsf3x>
    167e:	a9 c0       	rjmp	.+338    	; 0x17d2 <__fp_round>
    1680:	a1 d0       	rcall	.+322    	; 0x17c4 <__fp_pscB>
    1682:	40 f0       	brcs	.+16     	; 0x1694 <__divsf3+0x18>
    1684:	98 d0       	rcall	.+304    	; 0x17b6 <__fp_pscA>
    1686:	30 f0       	brcs	.+12     	; 0x1694 <__divsf3+0x18>
    1688:	21 f4       	brne	.+8      	; 0x1692 <__divsf3+0x16>
    168a:	5f 3f       	cpi	r21, 0xFF	; 255
    168c:	19 f0       	breq	.+6      	; 0x1694 <__divsf3+0x18>
    168e:	8a c0       	rjmp	.+276    	; 0x17a4 <__fp_inf>
    1690:	51 11       	cpse	r21, r1
    1692:	d3 c0       	rjmp	.+422    	; 0x183a <__fp_szero>
    1694:	8d c0       	rjmp	.+282    	; 0x17b0 <__fp_nan>

00001696 <__divsf3x>:
    1696:	ae d0       	rcall	.+348    	; 0x17f4 <__fp_split3>
    1698:	98 f3       	brcs	.-26     	; 0x1680 <__divsf3+0x4>

0000169a <__divsf3_pse>:
    169a:	99 23       	and	r25, r25
    169c:	c9 f3       	breq	.-14     	; 0x1690 <__divsf3+0x14>
    169e:	55 23       	and	r21, r21
    16a0:	b1 f3       	breq	.-20     	; 0x168e <__divsf3+0x12>
    16a2:	95 1b       	sub	r25, r21
    16a4:	55 0b       	sbc	r21, r21
    16a6:	bb 27       	eor	r27, r27
    16a8:	aa 27       	eor	r26, r26
    16aa:	62 17       	cp	r22, r18
    16ac:	73 07       	cpc	r23, r19
    16ae:	84 07       	cpc	r24, r20
    16b0:	38 f0       	brcs	.+14     	; 0x16c0 <__divsf3_pse+0x26>
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	aa 1f       	adc	r26, r26
    16be:	a9 f3       	breq	.-22     	; 0x16aa <__divsf3_pse+0x10>
    16c0:	33 d0       	rcall	.+102    	; 0x1728 <__divsf3_pse+0x8e>
    16c2:	0e 2e       	mov	r0, r30
    16c4:	3a f0       	brmi	.+14     	; 0x16d4 <__divsf3_pse+0x3a>
    16c6:	e0 e8       	ldi	r30, 0x80	; 128
    16c8:	30 d0       	rcall	.+96     	; 0x172a <__divsf3_pse+0x90>
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	e6 95       	lsr	r30
    16d0:	00 1c       	adc	r0, r0
    16d2:	ca f7       	brpl	.-14     	; 0x16c6 <__divsf3_pse+0x2c>
    16d4:	29 d0       	rcall	.+82     	; 0x1728 <__divsf3_pse+0x8e>
    16d6:	fe 2f       	mov	r31, r30
    16d8:	27 d0       	rcall	.+78     	; 0x1728 <__divsf3_pse+0x8e>
    16da:	66 0f       	add	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	bb 1f       	adc	r27, r27
    16e2:	26 17       	cp	r18, r22
    16e4:	37 07       	cpc	r19, r23
    16e6:	48 07       	cpc	r20, r24
    16e8:	ab 07       	cpc	r26, r27
    16ea:	b0 e8       	ldi	r27, 0x80	; 128
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__divsf3_pse+0x56>
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	80 2d       	mov	r24, r0
    16f2:	bf 01       	movw	r22, r30
    16f4:	ff 27       	eor	r31, r31
    16f6:	93 58       	subi	r25, 0x83	; 131
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	2a f0       	brmi	.+10     	; 0x1706 <__divsf3_pse+0x6c>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	68 f0       	brcs	.+26     	; 0x171c <__divsf3_pse+0x82>
    1702:	50 c0       	rjmp	.+160    	; 0x17a4 <__fp_inf>
    1704:	9a c0       	rjmp	.+308    	; 0x183a <__fp_szero>
    1706:	5f 3f       	cpi	r21, 0xFF	; 255
    1708:	ec f3       	brlt	.-6      	; 0x1704 <__divsf3_pse+0x6a>
    170a:	98 3e       	cpi	r25, 0xE8	; 232
    170c:	dc f3       	brlt	.-10     	; 0x1704 <__divsf3_pse+0x6a>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f7 95       	ror	r31
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	c9 f7       	brne	.-14     	; 0x170e <__divsf3_pse+0x74>
    171c:	88 0f       	add	r24, r24
    171e:	91 1d       	adc	r25, r1
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret
    1728:	e1 e0       	ldi	r30, 0x01	; 1
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	bb 1f       	adc	r27, r27
    1732:	62 17       	cp	r22, r18
    1734:	73 07       	cpc	r23, r19
    1736:	84 07       	cpc	r24, r20
    1738:	ba 07       	cpc	r27, r26
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__divsf3_pse+0xaa>
    173c:	62 1b       	sub	r22, r18
    173e:	73 0b       	sbc	r23, r19
    1740:	84 0b       	sbc	r24, r20
    1742:	ba 0b       	sbc	r27, r26
    1744:	ee 1f       	adc	r30, r30
    1746:	88 f7       	brcc	.-30     	; 0x172a <__divsf3_pse+0x90>
    1748:	e0 95       	com	r30
    174a:	08 95       	ret

0000174c <__fixunssfsi>:
    174c:	5b d0       	rcall	.+182    	; 0x1804 <__fp_splitA>
    174e:	88 f0       	brcs	.+34     	; 0x1772 <__fixunssfsi+0x26>
    1750:	9f 57       	subi	r25, 0x7F	; 127
    1752:	90 f0       	brcs	.+36     	; 0x1778 <__fixunssfsi+0x2c>
    1754:	b9 2f       	mov	r27, r25
    1756:	99 27       	eor	r25, r25
    1758:	b7 51       	subi	r27, 0x17	; 23
    175a:	a0 f0       	brcs	.+40     	; 0x1784 <__fixunssfsi+0x38>
    175c:	d1 f0       	breq	.+52     	; 0x1792 <__fixunssfsi+0x46>
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	1a f0       	brmi	.+6      	; 0x176e <__fixunssfsi+0x22>
    1768:	ba 95       	dec	r27
    176a:	c9 f7       	brne	.-14     	; 0x175e <__fixunssfsi+0x12>
    176c:	12 c0       	rjmp	.+36     	; 0x1792 <__fixunssfsi+0x46>
    176e:	b1 30       	cpi	r27, 0x01	; 1
    1770:	81 f0       	breq	.+32     	; 0x1792 <__fixunssfsi+0x46>
    1772:	62 d0       	rcall	.+196    	; 0x1838 <__fp_zero>
    1774:	b1 e0       	ldi	r27, 0x01	; 1
    1776:	08 95       	ret
    1778:	5f c0       	rjmp	.+190    	; 0x1838 <__fp_zero>
    177a:	67 2f       	mov	r22, r23
    177c:	78 2f       	mov	r23, r24
    177e:	88 27       	eor	r24, r24
    1780:	b8 5f       	subi	r27, 0xF8	; 248
    1782:	39 f0       	breq	.+14     	; 0x1792 <__fixunssfsi+0x46>
    1784:	b9 3f       	cpi	r27, 0xF9	; 249
    1786:	cc f3       	brlt	.-14     	; 0x177a <__fixunssfsi+0x2e>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b3 95       	inc	r27
    1790:	d9 f7       	brne	.-10     	; 0x1788 <__fixunssfsi+0x3c>
    1792:	3e f4       	brtc	.+14     	; 0x17a2 <__fixunssfsi+0x56>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__fp_inf>:
    17a4:	97 f9       	bld	r25, 7
    17a6:	9f 67       	ori	r25, 0x7F	; 127
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	08 95       	ret

000017b0 <__fp_nan>:
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	80 ec       	ldi	r24, 0xC0	; 192
    17b4:	08 95       	ret

000017b6 <__fp_pscA>:
    17b6:	00 24       	eor	r0, r0
    17b8:	0a 94       	dec	r0
    17ba:	16 16       	cp	r1, r22
    17bc:	17 06       	cpc	r1, r23
    17be:	18 06       	cpc	r1, r24
    17c0:	09 06       	cpc	r0, r25
    17c2:	08 95       	ret

000017c4 <__fp_pscB>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	12 16       	cp	r1, r18
    17ca:	13 06       	cpc	r1, r19
    17cc:	14 06       	cpc	r1, r20
    17ce:	05 06       	cpc	r0, r21
    17d0:	08 95       	ret

000017d2 <__fp_round>:
    17d2:	09 2e       	mov	r0, r25
    17d4:	03 94       	inc	r0
    17d6:	00 0c       	add	r0, r0
    17d8:	11 f4       	brne	.+4      	; 0x17de <__fp_round+0xc>
    17da:	88 23       	and	r24, r24
    17dc:	52 f0       	brmi	.+20     	; 0x17f2 <__fp_round+0x20>
    17de:	bb 0f       	add	r27, r27
    17e0:	40 f4       	brcc	.+16     	; 0x17f2 <__fp_round+0x20>
    17e2:	bf 2b       	or	r27, r31
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__fp_round+0x18>
    17e6:	60 ff       	sbrs	r22, 0
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__fp_round+0x20>
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	08 95       	ret

000017f4 <__fp_split3>:
    17f4:	57 fd       	sbrc	r21, 7
    17f6:	90 58       	subi	r25, 0x80	; 128
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	59 f0       	breq	.+22     	; 0x1814 <__fp_splitA+0x10>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	71 f0       	breq	.+28     	; 0x181e <__fp_splitA+0x1a>
    1802:	47 95       	ror	r20

00001804 <__fp_splitA>:
    1804:	88 0f       	add	r24, r24
    1806:	97 fb       	bst	r25, 7
    1808:	99 1f       	adc	r25, r25
    180a:	61 f0       	breq	.+24     	; 0x1824 <__fp_splitA+0x20>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	79 f0       	breq	.+30     	; 0x182e <__fp_splitA+0x2a>
    1810:	87 95       	ror	r24
    1812:	08 95       	ret
    1814:	12 16       	cp	r1, r18
    1816:	13 06       	cpc	r1, r19
    1818:	14 06       	cpc	r1, r20
    181a:	55 1f       	adc	r21, r21
    181c:	f2 cf       	rjmp	.-28     	; 0x1802 <__fp_split3+0xe>
    181e:	46 95       	lsr	r20
    1820:	f1 df       	rcall	.-30     	; 0x1804 <__fp_splitA>
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <__fp_splitA+0x30>
    1824:	16 16       	cp	r1, r22
    1826:	17 06       	cpc	r1, r23
    1828:	18 06       	cpc	r1, r24
    182a:	99 1f       	adc	r25, r25
    182c:	f1 cf       	rjmp	.-30     	; 0x1810 <__fp_splitA+0xc>
    182e:	86 95       	lsr	r24
    1830:	71 05       	cpc	r23, r1
    1832:	61 05       	cpc	r22, r1
    1834:	08 94       	sec
    1836:	08 95       	ret

00001838 <__fp_zero>:
    1838:	e8 94       	clt

0000183a <__fp_szero>:
    183a:	bb 27       	eor	r27, r27
    183c:	66 27       	eor	r22, r22
    183e:	77 27       	eor	r23, r23
    1840:	cb 01       	movw	r24, r22
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__mulsf3>:
    1846:	0b d0       	rcall	.+22     	; 0x185e <__mulsf3x>
    1848:	c4 cf       	rjmp	.-120    	; 0x17d2 <__fp_round>
    184a:	b5 df       	rcall	.-150    	; 0x17b6 <__fp_pscA>
    184c:	28 f0       	brcs	.+10     	; 0x1858 <__mulsf3+0x12>
    184e:	ba df       	rcall	.-140    	; 0x17c4 <__fp_pscB>
    1850:	18 f0       	brcs	.+6      	; 0x1858 <__mulsf3+0x12>
    1852:	95 23       	and	r25, r21
    1854:	09 f0       	breq	.+2      	; 0x1858 <__mulsf3+0x12>
    1856:	a6 cf       	rjmp	.-180    	; 0x17a4 <__fp_inf>
    1858:	ab cf       	rjmp	.-170    	; 0x17b0 <__fp_nan>
    185a:	11 24       	eor	r1, r1
    185c:	ee cf       	rjmp	.-36     	; 0x183a <__fp_szero>

0000185e <__mulsf3x>:
    185e:	ca df       	rcall	.-108    	; 0x17f4 <__fp_split3>
    1860:	a0 f3       	brcs	.-24     	; 0x184a <__mulsf3+0x4>

00001862 <__mulsf3_pse>:
    1862:	95 9f       	mul	r25, r21
    1864:	d1 f3       	breq	.-12     	; 0x185a <__mulsf3+0x14>
    1866:	95 0f       	add	r25, r21
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	55 1f       	adc	r21, r21
    186c:	62 9f       	mul	r22, r18
    186e:	f0 01       	movw	r30, r0
    1870:	72 9f       	mul	r23, r18
    1872:	bb 27       	eor	r27, r27
    1874:	f0 0d       	add	r31, r0
    1876:	b1 1d       	adc	r27, r1
    1878:	63 9f       	mul	r22, r19
    187a:	aa 27       	eor	r26, r26
    187c:	f0 0d       	add	r31, r0
    187e:	b1 1d       	adc	r27, r1
    1880:	aa 1f       	adc	r26, r26
    1882:	64 9f       	mul	r22, r20
    1884:	66 27       	eor	r22, r22
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	66 1f       	adc	r22, r22
    188c:	82 9f       	mul	r24, r18
    188e:	22 27       	eor	r18, r18
    1890:	b0 0d       	add	r27, r0
    1892:	a1 1d       	adc	r26, r1
    1894:	62 1f       	adc	r22, r18
    1896:	73 9f       	mul	r23, r19
    1898:	b0 0d       	add	r27, r0
    189a:	a1 1d       	adc	r26, r1
    189c:	62 1f       	adc	r22, r18
    189e:	83 9f       	mul	r24, r19
    18a0:	a0 0d       	add	r26, r0
    18a2:	61 1d       	adc	r22, r1
    18a4:	22 1f       	adc	r18, r18
    18a6:	74 9f       	mul	r23, r20
    18a8:	33 27       	eor	r19, r19
    18aa:	a0 0d       	add	r26, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	23 1f       	adc	r18, r19
    18b0:	84 9f       	mul	r24, r20
    18b2:	60 0d       	add	r22, r0
    18b4:	21 1d       	adc	r18, r1
    18b6:	82 2f       	mov	r24, r18
    18b8:	76 2f       	mov	r23, r22
    18ba:	6a 2f       	mov	r22, r26
    18bc:	11 24       	eor	r1, r1
    18be:	9f 57       	subi	r25, 0x7F	; 127
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	8a f0       	brmi	.+34     	; 0x18e6 <__mulsf3_pse+0x84>
    18c4:	e1 f0       	breq	.+56     	; 0x18fe <__mulsf3_pse+0x9c>
    18c6:	88 23       	and	r24, r24
    18c8:	4a f0       	brmi	.+18     	; 0x18dc <__mulsf3_pse+0x7a>
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	bb 1f       	adc	r27, r27
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	a9 f7       	brne	.-22     	; 0x18c6 <__mulsf3_pse+0x64>
    18dc:	9e 3f       	cpi	r25, 0xFE	; 254
    18de:	51 05       	cpc	r21, r1
    18e0:	70 f0       	brcs	.+28     	; 0x18fe <__mulsf3_pse+0x9c>
    18e2:	60 cf       	rjmp	.-320    	; 0x17a4 <__fp_inf>
    18e4:	aa cf       	rjmp	.-172    	; 0x183a <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	ec f3       	brlt	.-6      	; 0x18e4 <__mulsf3_pse+0x82>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	dc f3       	brlt	.-10     	; 0x18e4 <__mulsf3_pse+0x82>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	e7 95       	ror	r30
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <__mulsf3_pse+0x8c>
    18fe:	fe 2b       	or	r31, r30
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <__divmodhi4>:
    190c:	97 fb       	bst	r25, 7
    190e:	07 2e       	mov	r0, r23
    1910:	16 f4       	brtc	.+4      	; 0x1916 <__divmodhi4+0xa>
    1912:	00 94       	com	r0
    1914:	07 d0       	rcall	.+14     	; 0x1924 <__divmodhi4_neg1>
    1916:	77 fd       	sbrc	r23, 7
    1918:	09 d0       	rcall	.+18     	; 0x192c <__divmodhi4_neg2>
    191a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__udivmodhi4>
    191e:	07 fc       	sbrc	r0, 7
    1920:	05 d0       	rcall	.+10     	; 0x192c <__divmodhi4_neg2>
    1922:	3e f4       	brtc	.+14     	; 0x1932 <__divmodhi4_exit>

00001924 <__divmodhi4_neg1>:
    1924:	90 95       	com	r25
    1926:	81 95       	neg	r24
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	08 95       	ret

0000192c <__divmodhi4_neg2>:
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255

00001932 <__divmodhi4_exit>:
    1932:	08 95       	ret

00001934 <__udivmodsi4>:
    1934:	a1 e2       	ldi	r26, 0x21	; 33
    1936:	1a 2e       	mov	r1, r26
    1938:	aa 1b       	sub	r26, r26
    193a:	bb 1b       	sub	r27, r27
    193c:	fd 01       	movw	r30, r26
    193e:	0d c0       	rjmp	.+26     	; 0x195a <__udivmodsi4_ep>

00001940 <__udivmodsi4_loop>:
    1940:	aa 1f       	adc	r26, r26
    1942:	bb 1f       	adc	r27, r27
    1944:	ee 1f       	adc	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	a2 17       	cp	r26, r18
    194a:	b3 07       	cpc	r27, r19
    194c:	e4 07       	cpc	r30, r20
    194e:	f5 07       	cpc	r31, r21
    1950:	20 f0       	brcs	.+8      	; 0x195a <__udivmodsi4_ep>
    1952:	a2 1b       	sub	r26, r18
    1954:	b3 0b       	sbc	r27, r19
    1956:	e4 0b       	sbc	r30, r20
    1958:	f5 0b       	sbc	r31, r21

0000195a <__udivmodsi4_ep>:
    195a:	66 1f       	adc	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	1a 94       	dec	r1
    1964:	69 f7       	brne	.-38     	; 0x1940 <__udivmodsi4_loop>
    1966:	60 95       	com	r22
    1968:	70 95       	com	r23
    196a:	80 95       	com	r24
    196c:	90 95       	com	r25
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	bd 01       	movw	r22, r26
    1974:	cf 01       	movw	r24, r30
    1976:	08 95       	ret

00001978 <__umulhisi3>:
    1978:	a2 9f       	mul	r26, r18
    197a:	b0 01       	movw	r22, r0
    197c:	b3 9f       	mul	r27, r19
    197e:	c0 01       	movw	r24, r0
    1980:	a3 9f       	mul	r26, r19
    1982:	70 0d       	add	r23, r0
    1984:	81 1d       	adc	r24, r1
    1986:	11 24       	eor	r1, r1
    1988:	91 1d       	adc	r25, r1
    198a:	b2 9f       	mul	r27, r18
    198c:	70 0d       	add	r23, r0
    198e:	81 1d       	adc	r24, r1
    1990:	11 24       	eor	r1, r1
    1992:	91 1d       	adc	r25, r1
    1994:	08 95       	ret

00001996 <__muluhisi3>:
    1996:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__umulhisi3>
    199a:	a5 9f       	mul	r26, r21
    199c:	90 0d       	add	r25, r0
    199e:	b4 9f       	mul	r27, r20
    19a0:	90 0d       	add	r25, r0
    19a2:	a4 9f       	mul	r26, r20
    19a4:	80 0d       	add	r24, r0
    19a6:	91 1d       	adc	r25, r1
    19a8:	11 24       	eor	r1, r1
    19aa:	08 95       	ret

000019ac <__udivmodhi4>:
    19ac:	aa 1b       	sub	r26, r26
    19ae:	bb 1b       	sub	r27, r27
    19b0:	51 e1       	ldi	r21, 0x11	; 17
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <__udivmodhi4_ep>

000019b4 <__udivmodhi4_loop>:
    19b4:	aa 1f       	adc	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	a6 17       	cp	r26, r22
    19ba:	b7 07       	cpc	r27, r23
    19bc:	10 f0       	brcs	.+4      	; 0x19c2 <__udivmodhi4_ep>
    19be:	a6 1b       	sub	r26, r22
    19c0:	b7 0b       	sbc	r27, r23

000019c2 <__udivmodhi4_ep>:
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	5a 95       	dec	r21
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__udivmodhi4_loop>
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	08 95       	ret

000019d4 <strcpy>:
    19d4:	fb 01       	movw	r30, r22
    19d6:	dc 01       	movw	r26, r24
    19d8:	01 90       	ld	r0, Z+
    19da:	0d 92       	st	X+, r0
    19dc:	00 20       	and	r0, r0
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <strcpy+0x4>
    19e0:	08 95       	ret

000019e2 <_exit>:
    19e2:	f8 94       	cli

000019e4 <__stop_program>:
    19e4:	ff cf       	rjmp	.-2      	; 0x19e4 <__stop_program>
