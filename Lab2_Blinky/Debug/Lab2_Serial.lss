
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  000016e0  00001774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f8  00800296  00800296  0000190a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001940  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f61  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000776  00000000  00000000  00003aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094f  00000000  00000000  00004217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00004b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000838  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001601  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00006ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e0 ee       	ldi	r30, 0xE0	; 224
     17c:	f6 e1       	ldi	r31, 0x16	; 22
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	a6 39       	cpi	r26, 0x96	; 150
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	a6 e9       	ldi	r26, 0x96	; 150
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	ae 38       	cpi	r26, 0x8E	; 142
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <main>
     19e:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:

OSStartHighRdy: 
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
     1a6:	00 91 54 06 	lds	r16, 0x0654
                inc     R16                         ;
     1aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
     1ac:	00 93 54 06 	sts	0x0654, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     1b0:	e0 91 69 06 	lds	r30, 0x0669
                lds     R31,OSTCBHighRdy+1          ; ready to run
     1b4:	f0 91 6a 06 	lds	r31, 0x066A

                ld      R28,Z+                      ; Load stack L pointer
     1b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
                ret                                 ; Start task
     204:	08 95       	ret

00000206 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     24a:	e0 91 77 06 	lds	r30, 0x0677
                lds     R31,OSTCBCur+1              ;
     24e:	f0 91 78 06 	lds	r31, 0x0678

                in      r28,_SFR_IO_ADDR(SPL)
     252:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     254:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     256:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     258:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     25a:	00 91 59 06 	lds	r16, 0x0659
                sts     OSPrioCur,R16
     25e:	00 93 5a 06 	sts	0x065A, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     262:	e0 91 69 06 	lds	r30, 0x0669
                lds     R31,OSTCBHighRdy+1          ; ready to run
     266:	f0 91 6a 06 	lds	r31, 0x066A
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     26a:	e0 93 77 06 	sts	0x0677, r30
                sts     OSTCBCur+1,R31              ;
     26e:	f0 93 78 06 	sts	0x0678, r31

                ld      R28,Z+                      ; Restore Y pointer
     272:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     274:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     276:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     278:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
                ret
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     2c0:	00 91 59 06 	lds	r16, 0x0659
                sts     OSPrioCur,R16               ;
     2c4:	00 93 5a 06 	sts	0x065A, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     2c8:	e0 91 69 06 	lds	r30, 0x0669
                lds     R31,OSTCBHighRdy+1          ;
     2cc:	f0 91 6a 06 	lds	r31, 0x066A
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     2d0:	e0 93 77 06 	sts	0x0677, r30
                sts     OSTCBCur+1,R31              ;
     2d4:	f0 93 78 06 	sts	0x0678, r31

                ld      R28,Z+                      ; Restore Y pointer
     2d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     2da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     2dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     2de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
                ret
     324:	08 95       	ret

00000326 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     36c:	00 91 76 06 	lds	r16, 0x0676
                inc     R16                         ;
     370:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     372:	00 93 76 06 	sts	0x0676, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     376:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     37a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     37c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     37e:	e0 91 77 06 	lds	r30, 0x0677
                lds     R31,OSTCBCur+1              ;
     382:	f0 91 78 06 	lds	r31, 0x0678
                st      Z+,R28                      ; Save Y pointer
     386:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
     38a:	0d ee       	ldi	r16, 0xED	; 237
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     38c:	06 bd       	out	0x26, r16	; 38
	
                sei                                 ; Enable interrupts
     38e:	78 94       	sei
                
                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     390:	0e 94 ce 06 	call	0xd9c	; 0xd9c <OSTimeTick>
                nop
     394:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     396:	0e 94 b8 05 	call	0xb70	; 0xb70 <OSIntExit>

                POPSREG
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     3de:	08 95       	ret

000003e0 <WatchDogReset>:



.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     3e0:	a8 95       	wdr
				ret
     3e2:	08 95       	ret

000003e4 <SerTxISR>:

.global USART_TX_vect							   ; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:      
.extern PostTxCompleteSem
			   ret
     3e4:	08 95       	ret

000003e6 <TaskStart>:
{
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <OSStatInit>

	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     3ea:	2a e0       	ldi	r18, 0x0A	; 10
     3ec:	42 ed       	ldi	r20, 0xD2	; 210
     3ee:	55 e0       	ldi	r21, 0x05	; 5
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	80 e2       	ldi	r24, 0x20	; 32
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     3fc:	24 e1       	ldi	r18, 0x14	; 20
     3fe:	42 e5       	ldi	r20, 0x52	; 82
     400:	55 e0       	ldi	r21, 0x05	; 5
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	89 eb       	ldi	r24, 0xB9	; 185
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     40e:	80 e9       	ldi	r24, 0x90	; 144
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	80 91 4f 04 	lds	r24, 0x044F
     41e:	90 91 50 04 	lds	r25, 0x0450
     422:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     426:	80 e9       	ldi	r24, 0x90	; 144
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     42e:	65 e2       	ldi	r22, 0x25	; 37
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	80 91 4f 04 	lds	r24, 0x044F
     436:	90 91 50 04 	lds	r25, 0x0450
     43a:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     43e:	2f e0       	ldi	r18, 0x0F	; 15
     440:	4e e4       	ldi	r20, 0x4E	; 78
     442:	54 e0       	ldi	r21, 0x04	; 4
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	8e e3       	ldi	r24, 0x3E	; 62
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     450:	2b e0       	ldi	r18, 0x0B	; 11
     452:	40 ed       	ldi	r20, 0xD0	; 208
     454:	54 e0       	ldi	r21, 0x04	; 4
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 eb       	ldi	r24, 0xB0	; 176
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     462:	10 92 5d 06 	sts	0x065D, r1
     466:	10 92 5e 06 	sts	0x065E, r1
     46a:	10 92 5f 06 	sts	0x065F, r1
     46e:	10 92 60 06 	sts	0x0660, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     472:	88 ec       	ldi	r24, 0xC8	; 200
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
     47a:	f3 cf       	rjmp	.-26     	; 0x462 <TaskStart+0x7c>

0000047c <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	a3 97       	sbiw	r28, 0x23	; 35
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
		//else
		//{
			//rotaryInput = 0;
		//}
		*/
		TextMessage[0] = '\r';
     490:	0f 2e       	mov	r0, r31
     492:	fd e0       	ldi	r31, 0x0D	; 13
     494:	bf 2e       	mov	r11, r31
     496:	f0 2d       	mov	r31, r0
		TextMessage[1] = '\n';
     498:	0f 2e       	mov	r0, r31
     49a:	fa e0       	ldi	r31, 0x0A	; 10
     49c:	cf 2e       	mov	r12, r31
     49e:	f0 2d       	mov	r31, r0
		char* p = &TextMessage[2];
		int shifter = rotaryInput;
		char const digit[] = "0123456789";
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fb e0       	ldi	r31, 0x0B	; 11
     4a4:	df 2e       	mov	r13, r31
     4a6:	f0 2d       	mov	r31, r0
		do{ //Move to where representation ends
			++p;
			shifter = shifter/10;
     4a8:	0a e0       	ldi	r16, 0x0A	; 10
     4aa:	10 e0       	ldi	r17, 0x00	; 0
		}while(shifter);

		p[0] = ' ';
     4ac:	68 94       	set
     4ae:	ff 24       	eor	r15, r15
     4b0:	f5 f8       	bld	r15, 5
		p[12] = ' ';
		p[13] = '\0';
		

		do{ //Move back, inserting digits as you go
			*--p = digit[rotaryInput%10];
     4b2:	0f 2e       	mov	r0, r31
     4b4:	fd ec       	ldi	r31, 0xCD	; 205
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f0 2d       	mov	r31, r0
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     4ba:	86 b1       	in	r24, 0x06	; 6
     4bc:	e9 b1       	in	r30, 0x09	; 9
     4be:	e0 7f       	andi	r30, 0xF0	; 240
     4c0:	8f 70       	andi	r24, 0x0F	; 15
     4c2:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]); 
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	e8 59       	subi	r30, 0x98	; 152
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ca:	24 91       	lpm	r18, Z
		//else
		//{
			//rotaryInput = 0;
		//}
		*/
		TextMessage[0] = '\r';
     4cc:	b9 82       	std	Y+1, r11	; 0x01
		TextMessage[1] = '\n';
     4ce:	ca 82       	std	Y+2, r12	; 0x02
		char* p = &TextMessage[2];
		int shifter = rotaryInput;
     4d0:	82 2f       	mov	r24, r18
     4d2:	90 e0       	ldi	r25, 0x00	; 0
		char const digit[] = "0123456789";
     4d4:	ea e4       	ldi	r30, 0x4A	; 74
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	de 01       	movw	r26, r28
     4da:	59 96       	adiw	r26, 0x19	; 25
     4dc:	3d 2d       	mov	r19, r13
     4de:	01 90       	ld	r0, Z+
     4e0:	0d 92       	st	X+, r0
     4e2:	3a 95       	dec	r19
     4e4:	e1 f7       	brne	.-8      	; 0x4de <AngleOutputTask+0x62>
			//rotaryInput = 0;
		//}
		*/
		TextMessage[0] = '\r';
		TextMessage[1] = '\n';
		char* p = &TextMessage[2];
     4e6:	fe 01       	movw	r30, r28
     4e8:	33 96       	adiw	r30, 0x03	; 3
		int shifter = rotaryInput;
		char const digit[] = "0123456789";
		do{ //Move to where representation ends
			++p;
     4ea:	31 96       	adiw	r30, 0x01	; 1
			shifter = shifter/10;
     4ec:	b8 01       	movw	r22, r16
     4ee:	0e 94 03 0b 	call	0x1606	; 0x1606 <__divmodhi4>
     4f2:	cb 01       	movw	r24, r22
		}while(shifter);
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	c9 f7       	brne	.-14     	; 0x4ea <AngleOutputTask+0x6e>

		p[0] = ' ';
     4f8:	f0 82       	st	Z, r15
		p[1] = ' ';
     4fa:	f1 82       	std	Z+1, r15	; 0x01
		p[2] = ' ';
     4fc:	f2 82       	std	Z+2, r15	; 0x02
		p[3] = ' ';
     4fe:	f3 82       	std	Z+3, r15	; 0x03
		p[4] = ' ';
     500:	f4 82       	std	Z+4, r15	; 0x04
		p[5] = ' ';
     502:	f5 82       	std	Z+5, r15	; 0x05
		p[6] = ' ';
     504:	f6 82       	std	Z+6, r15	; 0x06
		p[7] = ' ';
     506:	f7 82       	std	Z+7, r15	; 0x07
		p[8] = ' ';
     508:	f0 86       	std	Z+8, r15	; 0x08
		p[9] = ' ';
     50a:	f1 86       	std	Z+9, r15	; 0x09
		p[10] = ' ';
     50c:	f2 86       	std	Z+10, r15	; 0x0a
		p[11] = ' ';
     50e:	f3 86       	std	Z+11, r15	; 0x0b
		p[12] = ' ';
     510:	f4 86       	std	Z+12, r15	; 0x0c
		p[13] = '\0';
     512:	15 86       	std	Z+13, r1	; 0x0d
		

		do{ //Move back, inserting digits as you go
			*--p = digit[rotaryInput%10];
     514:	2e 9d       	mul	r18, r14
     516:	81 2d       	mov	r24, r1
     518:	11 24       	eor	r1, r1
     51a:	86 95       	lsr	r24
     51c:	86 95       	lsr	r24
     51e:	86 95       	lsr	r24
     520:	98 2f       	mov	r25, r24
     522:	99 0f       	add	r25, r25
     524:	39 2f       	mov	r19, r25
     526:	33 0f       	add	r19, r19
     528:	33 0f       	add	r19, r19
     52a:	93 0f       	add	r25, r19
     52c:	29 1b       	sub	r18, r25
     52e:	a9 e1       	ldi	r26, 0x19	; 25
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	ac 0f       	add	r26, r28
     534:	bd 1f       	adc	r27, r29
     536:	a2 0f       	add	r26, r18
     538:	b1 1d       	adc	r27, r1
     53a:	9c 91       	ld	r25, X
     53c:	92 93       	st	-Z, r25
			rotaryInput = rotaryInput/10;
     53e:	28 2f       	mov	r18, r24
		}while(rotaryInput);
     540:	81 11       	cpse	r24, r1
     542:	e8 cf       	rjmp	.-48     	; 0x514 <AngleOutputTask+0x98>
		
		OSMboxPost(SerialTxMBox, (void *)&TextMessage);
     544:	be 01       	movw	r22, r28
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	80 91 4f 04 	lds	r24, 0x044F
     54e:	90 91 50 04 	lds	r25, 0x0450
     552:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
					
		OSTimeDly(OS_TICKS_PER_SEC);	// relinquish CPU
     556:	88 ec       	ldi	r24, 0xC8	; 200
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    }	
     55e:	ad cf       	rjmp	.-166    	; 0x4ba <AngleOutputTask+0x3e>

00000560 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	69 97       	sbiw	r28, 0x19	; 25
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
     574:	68 94       	set
     576:	ff 24       	eor	r15, r15
     578:	f1 f8       	bld	r15, 1
		OSMboxPost(LedMBox, (void *)&tmp);
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Hi]            ");
     57a:	13 e1       	ldi	r17, 0x13	; 19
		OSMboxPost(SerialTxMBox, (void *)TextMessage);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
     57c:	01 e0       	ldi	r16, 0x01	; 1
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
     57e:	80 ed       	ldi	r24, 0xD0	; 208
     580:	97 e0       	ldi	r25, 0x07	; 7
     582:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
     586:	f9 82       	std	Y+1, r15	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     588:	be 01       	movw	r22, r28
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	80 91 cb 03 	lds	r24, 0x03CB
     592:	90 91 cc 03 	lds	r25, 0x03CC
     596:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Hi]            ");
     59a:	e5 e5       	ldi	r30, 0x55	; 85
     59c:	f1 e0       	ldi	r31, 0x01	; 1
     59e:	de 01       	movw	r26, r28
     5a0:	12 96       	adiw	r26, 0x02	; 2
     5a2:	81 2f       	mov	r24, r17
     5a4:	01 90       	ld	r0, Z+
     5a6:	0d 92       	st	X+, r0
     5a8:	8a 95       	dec	r24
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <TimerTask+0x44>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     5ac:	be 01       	movw	r22, r28
     5ae:	6e 5f       	subi	r22, 0xFE	; 254
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 91 4f 04 	lds	r24, 0x044F
     5b6:	90 91 50 04 	lds	r25, 0x0450
     5ba:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
     5be:	80 ed       	ldi	r24, 0xD0	; 208
     5c0:	97 e0       	ldi	r25, 0x07	; 7
     5c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
     5c6:	09 83       	std	Y+1, r16	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	80 91 cb 03 	lds	r24, 0x03CB
     5d2:	90 91 cc 03 	lds	r25, 0x03CC
     5d6:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Med]           ");
     5da:	e8 e6       	ldi	r30, 0x68	; 104
     5dc:	f1 e0       	ldi	r31, 0x01	; 1
     5de:	de 01       	movw	r26, r28
     5e0:	12 96       	adiw	r26, 0x02	; 2
     5e2:	81 2f       	mov	r24, r17
     5e4:	01 90       	ld	r0, Z+
     5e6:	0d 92       	st	X+, r0
     5e8:	8a 95       	dec	r24
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <TimerTask+0x84>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     5ec:	be 01       	movw	r22, r28
     5ee:	6e 5f       	subi	r22, 0xFE	; 254
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	80 91 4f 04 	lds	r24, 0x044F
     5f6:	90 91 50 04 	lds	r25, 0x0450
     5fa:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
     5fe:	80 ed       	ldi	r24, 0xD0	; 208
     600:	97 e0       	ldi	r25, 0x07	; 7
     602:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
     606:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     608:	be 01       	movw	r22, r28
     60a:	6f 5f       	subi	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 91 cb 03 	lds	r24, 0x03CB
     612:	90 91 cc 03 	lds	r25, 0x03CC
     616:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
		//strcpy(TextMessage, "NO ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[No]            ");
     61a:	eb e7       	ldi	r30, 0x7B	; 123
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	de 01       	movw	r26, r28
     620:	12 96       	adiw	r26, 0x02	; 2
     622:	81 2f       	mov	r24, r17
     624:	01 90       	ld	r0, Z+
     626:	0d 92       	st	X+, r0
     628:	8a 95       	dec	r24
     62a:	e1 f7       	brne	.-8      	; 0x624 <TimerTask+0xc4>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     62c:	be 01       	movw	r22, r28
     62e:	6e 5f       	subi	r22, 0xFE	; 254
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	80 91 4f 04 	lds	r24, 0x044F
     636:	90 91 50 04 	lds	r25, 0x0450
     63a:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSMboxPost>
     63e:	9f cf       	rjmp	.-194    	; 0x57e <TimerTask+0x1e>

00000640 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     640:	0d ec       	ldi	r16, 0xCD	; 205
     642:	1c ec       	ldi	r17, 0xCC	; 204
     644:	dc ec       	ldi	r29, 0xCC	; 204
     646:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     648:	81 2c       	mov	r8, r1
     64a:	91 2c       	mov	r9, r1
     64c:	68 94       	set
     64e:	aa 24       	eor	r10, r10
     650:	a7 f8       	bld	r10, 7
     652:	0f 2e       	mov	r0, r31
     654:	ff e3       	ldi	r31, 0x3F	; 63
     656:	bf 2e       	mov	r11, r31
     658:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     65a:	41 2c       	mov	r4, r1
     65c:	51 2c       	mov	r5, r1
     65e:	61 2c       	mov	r6, r1
     660:	0f 2e       	mov	r0, r31
     662:	ff e3       	ldi	r31, 0x3F	; 63
     664:	7f 2e       	mov	r7, r31
     666:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     668:	0f 2e       	mov	r0, r31
     66a:	fd ec       	ldi	r31, 0xCD	; 205
     66c:	2f 2e       	mov	r2, r31
     66e:	f0 2d       	mov	r31, r0
     670:	0f 2e       	mov	r0, r31
     672:	fc ec       	ldi	r31, 0xCC	; 204
     674:	3f 2e       	mov	r3, r31
     676:	f0 2d       	mov	r31, r0
     678:	0d c0       	rjmp	.+26     	; 0x694 <LedTask+0x54>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     67a:	0d ec       	ldi	r16, 0xCD	; 205
     67c:	1c ec       	ldi	r17, 0xCC	; 204
     67e:	dc ec       	ldi	r29, 0xCC	; 204
     680:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     682:	81 2c       	mov	r8, r1
     684:	91 2c       	mov	r9, r1
     686:	68 94       	set
     688:	aa 24       	eor	r10, r10
     68a:	a7 f8       	bld	r10, 7
     68c:	0f 2e       	mov	r0, r31
     68e:	ff e3       	ldi	r31, 0x3F	; 63
     690:	bf 2e       	mov	r11, r31
     692:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     694:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     696:	28 2d       	mov	r18, r8
     698:	39 2d       	mov	r19, r9
     69a:	4a 2d       	mov	r20, r10
     69c:	5b 2d       	mov	r21, r11
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	9f e3       	ldi	r25, 0x3F	; 63
     6a6:	0e 94 bb 09 	call	0x1376	; 0x1376 <__divsf3>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
     6ae:	20 2f       	mov	r18, r16
     6b0:	31 2f       	mov	r19, r17
     6b2:	4d 2f       	mov	r20, r29
     6b4:	5c 2f       	mov	r21, r28
     6b6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	48 e4       	ldi	r20, 0x48	; 72
     6c0:	53 e4       	ldi	r21, 0x43	; 67
     6c2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     6c6:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fixunssfsi>
     6ca:	cb 01       	movw	r24, r22
     6cc:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     6d0:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6d2:	20 2f       	mov	r18, r16
     6d4:	31 2f       	mov	r19, r17
     6d6:	4d 2f       	mov	r20, r29
     6d8:	5c 2f       	mov	r21, r28
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e8       	ldi	r24, 0x80	; 128
     6e0:	9f e3       	ldi	r25, 0x3F	; 63
     6e2:	0e 94 56 09 	call	0x12ac	; 0x12ac <__subsf3>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	c7 01       	movw	r24, r14
     6ec:	b6 01       	movw	r22, r12
     6ee:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	48 e4       	ldi	r20, 0x48	; 72
     6f8:	53 e4       	ldi	r21, 0x43	; 67
     6fa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     6fe:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fixunssfsi>
     702:	cb 01       	movw	r24, r22
     704:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     708:	80 91 cb 03 	lds	r24, 0x03CB
     70c:	90 91 cc 03 	lds	r25, 0x03CC
     710:	0e 94 14 07 	call	0xe28	; 0xe28 <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	09 f4       	brne	.+2      	; 0x71a <LedTask+0xda>
     718:	bd cf       	rjmp	.-134    	; 0x694 <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	c9 f0       	breq	.+50     	; 0x754 <LedTask+0x114>
     722:	08 f4       	brcc	.+2      	; 0x726 <LedTask+0xe6>
     724:	aa cf       	rjmp	.-172    	; 0x67a <LedTask+0x3a>
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	09 f0       	breq	.+2      	; 0x72c <LedTask+0xec>
     72a:	b4 cf       	rjmp	.-152    	; 0x694 <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     72c:	04 2d       	mov	r16, r4
     72e:	15 2d       	mov	r17, r5
     730:	d6 2d       	mov	r29, r6
     732:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     734:	0f 2e       	mov	r0, r31
     736:	fa e9       	ldi	r31, 0x9A	; 154
     738:	8f 2e       	mov	r8, r31
     73a:	f0 2d       	mov	r31, r0
     73c:	0f 2e       	mov	r0, r31
     73e:	f9 e9       	ldi	r31, 0x99	; 153
     740:	9f 2e       	mov	r9, r31
     742:	f0 2d       	mov	r31, r0
     744:	0f 2e       	mov	r0, r31
     746:	f9 e1       	ldi	r31, 0x19	; 25
     748:	af 2e       	mov	r10, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	68 94       	set
     74e:	bb 24       	eor	r11, r11
     750:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     752:	a0 cf       	rjmp	.-192    	; 0x694 <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     754:	04 2d       	mov	r16, r4
     756:	15 2d       	mov	r17, r5
     758:	d6 2d       	mov	r29, r6
     75a:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     75c:	82 2c       	mov	r8, r2
     75e:	93 2c       	mov	r9, r3
     760:	0f 2e       	mov	r0, r31
     762:	fc ec       	ldi	r31, 0xCC	; 204
     764:	af 2e       	mov	r10, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	fe e3       	ldi	r31, 0x3E	; 62
     76c:	bf 2e       	mov	r11, r31
     76e:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     770:	91 cf       	rjmp	.-222    	; 0x694 <LedTask+0x54>

00000772 <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	69 97       	sbiw	r28, 0x19	; 25
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     786:	0f 2e       	mov	r0, r31
     788:	f1 ec       	ldi	r31, 0xC1	; 193
     78a:	cf 2e       	mov	r12, r31
     78c:	d1 2c       	mov	r13, r1
     78e:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     790:	61 2c       	mov	r6, r1
     792:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     794:	0f 2e       	mov	r0, r31
     796:	fe ef       	ldi	r31, 0xFE	; 254
     798:	af 2e       	mov	r10, r31
     79a:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     79c:	68 94       	set
     79e:	88 24       	eor	r8, r8
     7a0:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     7a2:	0f 2e       	mov	r0, r31
     7a4:	f0 ec       	ldi	r31, 0xC0	; 192
     7a6:	9f 2e       	mov	r9, r31
     7a8:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f6 ec       	ldi	r31, 0xC6	; 198
     7ae:	ef 2e       	mov	r14, r31
     7b0:	f1 2c       	mov	r15, r1
     7b2:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
     7b4:	88 ec       	ldi	r24, 0xC8	; 200
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     7bc:	80 91 4f 04 	lds	r24, 0x044F
     7c0:	90 91 50 04 	lds	r25, 0x0450
     7c4:	0e 94 14 07 	call	0xe28	; 0xe28 <OSMboxAccept>
		
		if(msg != NULL){
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	09 f4       	brne	.+2      	; 0x7ce <SerialTransmitTask+0x5c>
     7cc:	6f c0       	rjmp	.+222    	; 0x8ac <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     7ce:	bc 01       	movw	r22, r24
     7d0:	ce 01       	movw	r24, r28
     7d2:	02 96       	adiw	r24, 0x02	; 2
     7d4:	0e 94 67 0b 	call	0x16ce	; 0x16ce <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     7d8:	f6 01       	movw	r30, r12
     7da:	80 81       	ld	r24, Z
     7dc:	86 60       	ori	r24, 0x06	; 6
     7de:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	88 23       	and	r24, r24
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <SerialTransmitTask+0x76>
     7e6:	62 c0       	rjmp	.+196    	; 0x8ac <SerialTransmitTask+0x13a>
     7e8:	06 2d       	mov	r16, r6
     7ea:	17 2d       	mov	r17, r7
     7ec:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     7ee:	8d 30       	cpi	r24, 0x0D	; 13
     7f0:	c9 f4       	brne	.+50     	; 0x824 <SerialTransmitTask+0xb2>
     7f2:	c8 01       	movw	r24, r16
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	e2 e0       	ldi	r30, 0x02	; 2
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	ec 0f       	add	r30, r28
     7fc:	fd 1f       	adc	r31, r29
     7fe:	e8 0f       	add	r30, r24
     800:	f9 1f       	adc	r31, r25
     802:	20 81       	ld	r18, Z
     804:	2d 30       	cpi	r18, 0x0D	; 13
     806:	71 f4       	brne	.+28     	; 0x824 <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     808:	e2 e0       	ldi	r30, 0x02	; 2
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	ec 0f       	add	r30, r28
     80e:	fd 1f       	adc	r31, r29
     810:	e0 0f       	add	r30, r16
     812:	f1 1f       	adc	r31, r17
     814:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     816:	e2 e0       	ldi	r30, 0x02	; 2
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	ec 0f       	add	r30, r28
     81c:	fd 1f       	adc	r31, r29
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     824:	e2 e0       	ldi	r30, 0x02	; 2
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	ec 0f       	add	r30, r28
     82a:	fd 1f       	adc	r31, r29
     82c:	e0 0f       	add	r30, r16
     82e:	f1 1f       	adc	r31, r17
     830:	80 81       	ld	r24, Z
     832:	8d 30       	cpi	r24, 0x0D	; 13
     834:	c9 f4       	brne	.+50     	; 0x868 <SerialTransmitTask+0xf6>
     836:	c8 01       	movw	r24, r16
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	e2 e0       	ldi	r30, 0x02	; 2
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	ec 0f       	add	r30, r28
     840:	fd 1f       	adc	r31, r29
     842:	e8 0f       	add	r30, r24
     844:	f9 1f       	adc	r31, r25
     846:	20 81       	ld	r18, Z
     848:	2a 30       	cpi	r18, 0x0A	; 10
     84a:	71 f4       	brne	.+28     	; 0x868 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     84c:	e2 e0       	ldi	r30, 0x02	; 2
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ec 0f       	add	r30, r28
     852:	fd 1f       	adc	r31, r29
     854:	e0 0f       	add	r30, r16
     856:	f1 1f       	adc	r31, r17
     858:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     85a:	e2 e0       	ldi	r30, 0x02	; 2
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ec 0f       	add	r30, r28
     860:	fd 1f       	adc	r31, r29
     862:	e8 0f       	add	r30, r24
     864:	f9 1f       	adc	r31, r25
     866:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     868:	ae 01       	movw	r20, r28
     86a:	4f 5f       	subi	r20, 0xFF	; 255
     86c:	5f 4f       	sbci	r21, 0xFF	; 255
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 91 d1 04 	lds	r24, 0x04D1
     876:	90 91 d2 04 	lds	r25, 0x04D2
     87a:	0e 94 84 07 	call	0xf08	; 0xf08 <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     87e:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     880:	e2 e0       	ldi	r30, 0x02	; 2
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ec 0f       	add	r30, r28
     886:	fd 1f       	adc	r31, r29
     888:	e0 0f       	add	r30, r16
     88a:	f1 1f       	adc	r31, r17
     88c:	80 81       	ld	r24, Z
     88e:	f7 01       	movw	r30, r14
     890:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     892:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     894:	b3 94       	inc	r11
     896:	0b 2d       	mov	r16, r11
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	e2 e0       	ldi	r30, 0x02	; 2
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	ec 0f       	add	r30, r28
     8a0:	fd 1f       	adc	r31, r29
     8a2:	e0 0f       	add	r30, r16
     8a4:	f1 1f       	adc	r31, r17
     8a6:	80 81       	ld	r24, Z
     8a8:	81 11       	cpse	r24, r1
     8aa:	a1 cf       	rjmp	.-190    	; 0x7ee <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     8ac:	f6 01       	movw	r30, r12
     8ae:	80 81       	ld	r24, Z
     8b0:	89 7f       	andi	r24, 0xF9	; 249
     8b2:	80 83       	st	Z, r24
	}
     8b4:	7f cf       	rjmp	.-258    	; 0x7b4 <SerialTransmitTask+0x42>

000008b6 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     8b6:	0e 94 85 04 	call	0x90a	; 0x90a <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     8ba:	0e 94 39 08 	call	0x1072	; 0x1072 <OSInit>
	
	USART_Init();
     8be:	0e 94 b2 04 	call	0x964	; 0x964 <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 28 07 	call	0xe50	; 0xe50 <OSMboxCreate>
     8ca:	90 93 cc 03 	sts	0x03CC, r25
     8ce:	80 93 cb 03 	sts	0x03CB, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 28 07 	call	0xe50	; 0xe50 <OSMboxCreate>
     8da:	90 93 50 04 	sts	0x0450, r25
     8de:	80 93 4f 04 	sts	0x044F, r24
	SerialTxSem = OSSemCreate(1);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 67 07 	call	0xece	; 0xece <OSSemCreate>
     8ea:	90 93 d2 04 	sts	0x04D2, r25
     8ee:	80 93 d1 04 	sts	0x04D1, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	42 e5       	ldi	r20, 0x52	; 82
     8f6:	56 e0       	ldi	r21, 0x06	; 6
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	83 ef       	ldi	r24, 0xF3	; 243
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     904:	0e 94 43 06 	call	0xc86	; 0xc86 <OSStart>
     908:	ff cf       	rjmp	.-2      	; 0x908 <__stack+0x9>

0000090a <InitPeripherals>:
     90a:	f8 94       	cli
     90c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
     910:	84 b7       	in	r24, 0x34	; 52
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	84 bf       	out	0x34, r24	; 52
     916:	e0 e6       	ldi	r30, 0x60	; 96
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 61       	ori	r24, 0x18	; 24
     91e:	80 83       	st	Z, r24
     920:	10 82       	st	Z, r1
     922:	2d 98       	cbi	0x05, 5	; 5
     924:	2c 98       	cbi	0x05, 4	; 5
     926:	25 9a       	sbi	0x04, 5	; 4
     928:	24 9a       	sbi	0x04, 4	; 4
     92a:	87 b1       	in	r24, 0x07	; 7
     92c:	80 7f       	andi	r24, 0xF0	; 240
     92e:	87 b9       	out	0x07, r24	; 7
     930:	8a b1       	in	r24, 0x0a	; 10
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	8a b9       	out	0x0a, r24	; 10
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	84 bd       	out	0x24, r24	; 36
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	85 bd       	out	0x25, r24	; 37
     93e:	82 e1       	ldi	r24, 0x12	; 18
     940:	87 bd       	out	0x27, r24	; 39
     942:	ee e6       	ldi	r30, 0x6E	; 110
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	81 60       	ori	r24, 0x01	; 1
     94a:	80 83       	st	Z, r24
     94c:	e4 e6       	ldi	r30, 0x64	; 100
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8f 7d       	andi	r24, 0xDF	; 223
     954:	80 83       	st	Z, r24
     956:	e1 ec       	ldi	r30, 0xC1	; 193
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	89 7f       	andi	r24, 0xF9	; 249
     95e:	80 83       	st	Z, r24
     960:	78 94       	sei
     962:	08 95       	ret

00000964 <USART_Init>:
     964:	10 92 c5 00 	sts	0x00C5, r1
     968:	87 e6       	ldi	r24, 0x67	; 103
     96a:	80 93 c4 00 	sts	0x00C4, r24
     96e:	88 e1       	ldi	r24, 0x18	; 24
     970:	80 93 c1 00 	sts	0x00C1, r24
     974:	8e e0       	ldi	r24, 0x0E	; 14
     976:	80 93 c2 00 	sts	0x00C2, r24
     97a:	08 95       	ret

0000097c <OSTaskStkInit>:
     97c:	fa 01       	movw	r30, r20
     97e:	80 83       	st	Z, r24
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	90 83       	st	Z, r25
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	10 82       	st	Z, r1
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	10 82       	st	Z, r1
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	10 82       	st	Z, r1
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	10 82       	st	Z, r1
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	10 82       	st	Z, r1
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	10 82       	st	Z, r1
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	10 82       	st	Z, r1
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	10 82       	st	Z, r1
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	10 82       	st	Z, r1
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	10 82       	st	Z, r1
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	10 82       	st	Z, r1
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	10 82       	st	Z, r1
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	10 82       	st	Z, r1
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	10 82       	st	Z, r1
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	10 82       	st	Z, r1
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	10 82       	st	Z, r1
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	10 82       	st	Z, r1
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	10 82       	st	Z, r1
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	10 82       	st	Z, r1
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	10 82       	st	Z, r1
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	10 82       	st	Z, r1
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	60 83       	st	Z, r22
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	70 83       	st	Z, r23
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	10 82       	st	Z, r1
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	10 82       	st	Z, r1
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	80 e8       	ldi	r24, 0x80	; 128
     a08:	80 83       	st	Z, r24
     a0a:	ca 01       	movw	r24, r20
     a0c:	83 97       	sbiw	r24, 0x23	; 35
     a0e:	08 95       	ret

00000a10 <OSTaskCreateHook>:
     a10:	08 95       	ret

00000a12 <OSTaskStatHook>:
     a12:	08 95       	ret

00000a14 <OSTimeTickHook>:
     a14:	08 95       	ret

00000a16 <OSTaskIdle>:

void OSTaskIdle (void *pdata)
{
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     a16:	f8 94       	cli
        OSIdleCtr++;
        OS_EXIT_CRITICAL();
     a18:	78 94       	sei
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <OSTaskIdle>

00000a1c <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     a24:	fc 01       	movw	r30, r24
     a26:	05 85       	ldd	r16, Z+13	; 0x0d
     a28:	e0 2f       	mov	r30, r16
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e2 57       	subi	r30, 0x72	; 114
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	10 81       	ld	r17, Z
    bity = OSMapTbl[y];
     a32:	21 2f       	mov	r18, r17
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	d9 01       	movw	r26, r18
     a38:	a2 57       	subi	r26, 0x72	; 114
     a3a:	bd 4f       	sbci	r27, 0xFD	; 253
     a3c:	dc 91       	ld	r29, X
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     a3e:	fc 01       	movw	r30, r24
     a40:	e2 0f       	add	r30, r18
     a42:	f3 1f       	adc	r31, r19
     a44:	52 81       	ldd	r21, Z+2	; 0x02
     a46:	a5 2f       	mov	r26, r21
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	a2 57       	subi	r26, 0x72	; 114
     a4c:	be 4f       	sbci	r27, 0xFE	; 254
     a4e:	cc 91       	ld	r28, X
    bitx = OSMapTbl[x];
     a50:	ac 2f       	mov	r26, r28
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	a2 57       	subi	r26, 0x72	; 114
     a56:	bd 4f       	sbci	r27, 0xFD	; 253
     a58:	ac 91       	ld	r26, X
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     a5a:	11 0f       	add	r17, r17
     a5c:	11 0f       	add	r17, r17
     a5e:	11 0f       	add	r17, r17
     a60:	c1 0f       	add	r28, r17
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     a62:	ba 2f       	mov	r27, r26
     a64:	b0 95       	com	r27
     a66:	5b 23       	and	r21, r27
     a68:	52 83       	std	Z+2, r21	; 0x02
     a6a:	51 11       	cpse	r21, r1
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <OSEventTaskRdy+0x5c>
        pevent->OSEventGrp &= ~bity;
     a6e:	5d 2f       	mov	r21, r29
     a70:	50 95       	com	r21
     a72:	05 23       	and	r16, r21
     a74:	fc 01       	movw	r30, r24
     a76:	05 87       	std	Z+13, r16	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     a78:	ec 2f       	mov	r30, r28
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	e6 5f       	subi	r30, 0xF6	; 246
     a82:	f8 4f       	sbci	r31, 0xF8	; 248
     a84:	01 90       	ld	r0, Z+
     a86:	f0 81       	ld	r31, Z
     a88:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     a8a:	13 86       	std	Z+11, r1	; 0x0b
     a8c:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     a8e:	17 82       	std	Z+7, r1	; 0x07
     a90:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     a92:	71 87       	std	Z+9, r23	; 0x09
     a94:	60 87       	std	Z+8, r22	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */    
#endif    
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     a96:	40 95       	com	r20
     a98:	84 85       	ldd	r24, Z+12	; 0x0c
     a9a:	48 23       	and	r20, r24
     a9c:	44 87       	std	Z+12, r20	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     a9e:	41 11       	cpse	r20, r1
     aa0:	0b c0       	rjmp	.+22     	; 0xab8 <OSEventTaskRdy+0x9c>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     aa2:	80 91 6b 06 	lds	r24, 0x066B
     aa6:	d8 2b       	or	r29, r24
     aa8:	d0 93 6b 06 	sts	0x066B, r29
        OSRdyTbl[y]     |=  bitx;
     aac:	f9 01       	movw	r30, r18
     aae:	e4 59       	subi	r30, 0x94	; 148
     ab0:	f9 4f       	sbci	r31, 0xF9	; 249
     ab2:	80 81       	ld	r24, Z
     ab4:	a8 2b       	or	r26, r24
     ab6:	a0 83       	st	Z, r26
    }
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <OSEventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskWait (OS_EVENT *pevent)
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
     ac6:	e0 91 77 06 	lds	r30, 0x0677
     aca:	f0 91 78 06 	lds	r31, 0x0678
     ace:	97 83       	std	Z+7, r25	; 0x07
     ad0:	86 83       	std	Z+6, r24	; 0x06
    if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {      /* Task no longer ready      */
     ad2:	a7 85       	ldd	r26, Z+15	; 0x0f
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	20 89       	ldd	r18, Z+16	; 0x10
     ad8:	ed 01       	movw	r28, r26
     ada:	c4 59       	subi	r28, 0x94	; 148
     adc:	d9 4f       	sbci	r29, 0xF9	; 249
     ade:	42 2f       	mov	r20, r18
     ae0:	40 95       	com	r20
     ae2:	38 81       	ld	r19, Y
     ae4:	34 23       	and	r19, r20
     ae6:	38 83       	st	Y, r19
     ae8:	31 11       	cpse	r19, r1
     aea:	07 c0       	rjmp	.+14     	; 0xafa <OSEventTaskWait+0x38>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     aec:	31 89       	ldd	r19, Z+17	; 0x11
     aee:	30 95       	com	r19
     af0:	40 91 6b 06 	lds	r20, 0x066B
     af4:	34 23       	and	r19, r20
     af6:	30 93 6b 06 	sts	0x066B, r19
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
     afa:	a8 0f       	add	r26, r24
     afc:	b9 1f       	adc	r27, r25
     afe:	12 96       	adiw	r26, 0x02	; 2
     b00:	3c 91       	ld	r19, X
     b02:	12 97       	sbiw	r26, 0x02	; 2
     b04:	23 2b       	or	r18, r19
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	2c 93       	st	X, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     b0a:	dc 01       	movw	r26, r24
     b0c:	1d 96       	adiw	r26, 0x0d	; 13
     b0e:	3c 91       	ld	r19, X
     b10:	1d 97       	sbiw	r26, 0x0d	; 13
     b12:	21 89       	ldd	r18, Z+17	; 0x11
     b14:	23 2b       	or	r18, r19
     b16:	1d 96       	adiw	r26, 0x0d	; 13
     b18:	2c 93       	st	X, r18
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <OSEventTO>:
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTO (OS_EVENT *pevent)
{
    if ((pevent->OSEventTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
     b20:	e0 91 77 06 	lds	r30, 0x0677
     b24:	f0 91 78 06 	lds	r31, 0x0678
     b28:	27 85       	ldd	r18, Z+15	; 0x0f
     b2a:	dc 01       	movw	r26, r24
     b2c:	a2 0f       	add	r26, r18
     b2e:	b1 1d       	adc	r27, r1
     b30:	20 89       	ldd	r18, Z+16	; 0x10
     b32:	20 95       	com	r18
     b34:	12 96       	adiw	r26, 0x02	; 2
     b36:	3c 91       	ld	r19, X
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	23 23       	and	r18, r19
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	2c 93       	st	X, r18
     b40:	21 11       	cpse	r18, r1
     b42:	09 c0       	rjmp	.+18     	; 0xb56 <OSEventTO+0x36>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
     b44:	21 89       	ldd	r18, Z+17	; 0x11
     b46:	20 95       	com	r18
     b48:	dc 01       	movw	r26, r24
     b4a:	1d 96       	adiw	r26, 0x0d	; 13
     b4c:	3c 91       	ld	r19, X
     b4e:	1d 97       	sbiw	r26, 0x0d	; 13
     b50:	23 23       	and	r18, r19
     b52:	1d 96       	adiw	r26, 0x0d	; 13
     b54:	2c 93       	st	X, r18
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
     b56:	14 86       	std	Z+12, r1	; 0x0c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
     b58:	17 82       	std	Z+7, r1	; 0x07
     b5a:	16 82       	std	Z+6, r1	; 0x06
     b5c:	08 95       	ret

00000b5e <OSEventWaitListInit>:
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
     b5e:	fc 01       	movw	r30, r24
     b60:	15 86       	std	Z+13, r1	; 0x0d
     b62:	32 96       	adiw	r30, 0x02	; 2
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     b64:	80 e0       	ldi	r24, 0x00	; 0
        pevent->OSEventTbl[i] = 0x00;
     b66:	11 92       	st	Z+, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <OSEventWaitListInit+0x8>
        pevent->OSEventTbl[i] = 0x00;
    }
}
     b6e:	08 95       	ret

00000b70 <OSIntExit>:
*********************************************************************************************************
*/

void OSIntExit (void)
{
    OS_ENTER_CRITICAL();
     b70:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
     b72:	80 91 76 06 	lds	r24, 0x0676
     b76:	81 50       	subi	r24, 0x01	; 1
     b78:	80 93 76 06 	sts	0x0676, r24
     b7c:	90 91 53 06 	lds	r25, 0x0653
     b80:	89 2b       	or	r24, r25
     b82:	e1 f5       	brne	.+120    	; 0xbfc <OSIntExit+0x8c>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
     b84:	e0 91 6b 06 	lds	r30, 0x066B
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	e2 57       	subi	r30, 0x72	; 114
     b8c:	fe 4f       	sbci	r31, 0xFE	; 254
     b8e:	80 81       	ld	r24, Z
     b90:	80 93 ca 03 	sts	0x03CA, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
     b94:	e8 2f       	mov	r30, r24
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	e4 59       	subi	r30, 0x94	; 148
     b9a:	f9 4f       	sbci	r31, 0xF9	; 249
     b9c:	e0 81       	ld	r30, Z
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	e2 57       	subi	r30, 0x72	; 114
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	88 0f       	add	r24, r24
     ba6:	88 0f       	add	r24, r24
     ba8:	88 0f       	add	r24, r24
     baa:	90 81       	ld	r25, Z
     bac:	89 0f       	add	r24, r25
     bae:	80 93 59 06 	sts	0x0659, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
     bb2:	90 91 5a 06 	lds	r25, 0x065A
     bb6:	89 17       	cp	r24, r25
     bb8:	09 f1       	breq	.+66     	; 0xbfc <OSIntExit+0x8c>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     bba:	e8 2f       	mov	r30, r24
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	e6 5f       	subi	r30, 0xF6	; 246
     bc4:	f8 4f       	sbci	r31, 0xF8	; 248
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	90 93 6a 06 	sts	0x066A, r25
     bce:	80 93 69 06 	sts	0x0669, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
     bd2:	80 91 5d 06 	lds	r24, 0x065D
     bd6:	90 91 5e 06 	lds	r25, 0x065E
     bda:	a0 91 5f 06 	lds	r26, 0x065F
     bde:	b0 91 60 06 	lds	r27, 0x0660
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	a1 1d       	adc	r26, r1
     be6:	b1 1d       	adc	r27, r1
     be8:	80 93 5d 06 	sts	0x065D, r24
     bec:	90 93 5e 06 	sts	0x065E, r25
     bf0:	a0 93 5f 06 	sts	0x065F, r26
     bf4:	b0 93 60 06 	sts	0x0660, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
     bf8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
     bfc:	78 94       	sei
     bfe:	08 95       	ret

00000c00 <OSSched>:
void OSSched (void)
{
    INT8U y;


    OS_ENTER_CRITICAL();
     c00:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
     c02:	90 91 76 06 	lds	r25, 0x0676
     c06:	80 91 53 06 	lds	r24, 0x0653
     c0a:	89 2b       	or	r24, r25
     c0c:	d1 f5       	brne	.+116    	; 0xc82 <OSSched+0x82>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
     c0e:	e0 91 6b 06 	lds	r30, 0x066B
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e2 57       	subi	r30, 0x72	; 114
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	80 81       	ld	r24, Z
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     c1a:	e8 2f       	mov	r30, r24
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	e4 59       	subi	r30, 0x94	; 148
     c20:	f9 4f       	sbci	r31, 0xF9	; 249
     c22:	e0 81       	ld	r30, Z
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	e2 57       	subi	r30, 0x72	; 114
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	88 0f       	add	r24, r24
     c2c:	88 0f       	add	r24, r24
     c2e:	88 0f       	add	r24, r24
     c30:	90 81       	ld	r25, Z
     c32:	e8 2f       	mov	r30, r24
     c34:	e9 0f       	add	r30, r25
     c36:	e0 93 59 06 	sts	0x0659, r30
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
     c3a:	80 91 5a 06 	lds	r24, 0x065A
     c3e:	e8 17       	cp	r30, r24
     c40:	01 f1       	breq	.+64     	; 0xc82 <OSSched+0x82>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	e6 5f       	subi	r30, 0xF6	; 246
     c4a:	f8 4f       	sbci	r31, 0xF8	; 248
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	90 93 6a 06 	sts	0x066A, r25
     c54:	80 93 69 06 	sts	0x0669, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
     c58:	80 91 5d 06 	lds	r24, 0x065D
     c5c:	90 91 5e 06 	lds	r25, 0x065E
     c60:	a0 91 5f 06 	lds	r26, 0x065F
     c64:	b0 91 60 06 	lds	r27, 0x0660
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	a1 1d       	adc	r26, r1
     c6c:	b1 1d       	adc	r27, r1
     c6e:	80 93 5d 06 	sts	0x065D, r24
     c72:	90 93 5e 06 	sts	0x065E, r25
     c76:	a0 93 5f 06 	sts	0x065F, r26
     c7a:	b0 93 60 06 	sts	0x0660, r27
#if 1
			//DebugPulse ();
#endif	
			
#if 1			
            OS_TASK_SW();                        /* Perform a context switch                           */
     c7e:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
     c82:	78 94       	sei
     c84:	08 95       	ret

00000c86 <OSStart>:
#if 0
	DebugPulse();
#endif	
	
	
    if (OSRunning == FALSE) {
     c86:	80 91 54 06 	lds	r24, 0x0654
     c8a:	81 11       	cpse	r24, r1
     c8c:	26 c0       	rjmp	.+76     	; 0xcda <OSStart+0x54>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
     c8e:	e0 91 6b 06 	lds	r30, 0x066B
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	e2 57       	subi	r30, 0x72	; 114
     c96:	fe 4f       	sbci	r31, 0xFE	; 254
     c98:	e0 81       	ld	r30, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
     c9a:	ae 2f       	mov	r26, r30
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	a4 59       	subi	r26, 0x94	; 148
     ca0:	b9 4f       	sbci	r27, 0xF9	; 249
     ca2:	ac 91       	ld	r26, X
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	a2 57       	subi	r26, 0x72	; 114
     ca8:	be 4f       	sbci	r27, 0xFE	; 254
        OSPrioHighRdy = (INT8U)((y << 3) + x);
     caa:	ee 0f       	add	r30, r30
     cac:	ee 0f       	add	r30, r30
     cae:	ee 0f       	add	r30, r30
     cb0:	8c 91       	ld	r24, X
     cb2:	e8 0f       	add	r30, r24
     cb4:	e0 93 59 06 	sts	0x0659, r30
        OSPrioCur     = OSPrioHighRdy;
     cb8:	e0 93 5a 06 	sts	0x065A, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	e6 5f       	subi	r30, 0xF6	; 246
     cc4:	f8 4f       	sbci	r31, 0xF8	; 248
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	90 93 6a 06 	sts	0x066A, r25
     cce:	80 93 69 06 	sts	0x0669, r24
        OSTCBCur      = OSTCBHighRdy;
     cd2:	90 93 78 06 	sts	0x0678, r25
     cd6:	80 93 77 06 	sts	0x0677, r24
    }
	
	
#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
     cda:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
     cde:	08 95       	ret

00000ce0 <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
     ce4:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     ce6:	e0 91 65 06 	lds	r30, 0x0665
     cea:	f0 91 66 06 	lds	r31, 0x0666
    if (ptcb != (OS_TCB *)0) {
     cee:	30 97       	sbiw	r30, 0x00	; 0
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <OSTCBInit+0x14>
     cf2:	4f c0       	rjmp	.+158    	; 0xd92 <OSTCBInit+0xb2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	33 81       	ldd	r19, Z+3	; 0x03
     cf8:	30 93 66 06 	sts	0x0666, r19
     cfc:	20 93 65 06 	sts	0x0665, r18
        OS_EXIT_CRITICAL();
     d00:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
     d02:	71 83       	std	Z+1, r23	; 0x01
     d04:	60 83       	st	Z, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
     d06:	85 87       	std	Z+13, r24	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
     d08:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
     d0a:	13 86       	std	Z+11, r1	; 0x0b
     d0c:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN        
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
     d0e:	c8 2f       	mov	r28, r24
     d10:	c6 95       	lsr	r28
     d12:	c6 95       	lsr	r28
     d14:	c6 95       	lsr	r28
     d16:	c7 87       	std	Z+15, r28	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
     d18:	d0 e0       	ldi	r29, 0x00	; 0
     d1a:	c2 57       	subi	r28, 0x72	; 114
     d1c:	dd 4f       	sbci	r29, 0xFD	; 253
     d1e:	98 81       	ld	r25, Y
     d20:	91 8b       	std	Z+17, r25	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
     d22:	c8 2f       	mov	r28, r24
     d24:	c7 70       	andi	r28, 0x07	; 7
     d26:	c6 87       	std	Z+14, r28	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
     d28:	d0 e0       	ldi	r29, 0x00	; 0
     d2a:	c2 57       	subi	r28, 0x72	; 114
     d2c:	dd 4f       	sbci	r29, 0xFD	; 253
     d2e:	98 81       	ld	r25, Y
     d30:	90 8b       	std	Z+16, r25	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
     d32:	17 82       	std	Z+7, r1	; 0x07
     d34:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     d36:	11 86       	std	Z+9, r1	; 0x09
     d38:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
     d3a:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
     d3c:	a8 2f       	mov	r26, r24
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	aa 0f       	add	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	a6 5f       	subi	r26, 0xF6	; 246
     d46:	b8 4f       	sbci	r27, 0xF8	; 248
     d48:	ed 93       	st	X+, r30
     d4a:	fc 93       	st	X, r31
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
     d4c:	a0 91 5b 06 	lds	r26, 0x065B
     d50:	b0 91 5c 06 	lds	r27, 0x065C
     d54:	b3 83       	std	Z+3, r27	; 0x03
     d56:	a2 83       	std	Z+2, r26	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
     d58:	15 82       	std	Z+5, r1	; 0x05
     d5a:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     d5c:	10 97       	sbiw	r26, 0x00	; 0
     d5e:	21 f0       	breq	.+8      	; 0xd68 <OSTCBInit+0x88>
            OSTCBList->OSTCBPrev = ptcb;
     d60:	15 96       	adiw	r26, 0x05	; 5
     d62:	fc 93       	st	X, r31
     d64:	ee 93       	st	-X, r30
     d66:	14 97       	sbiw	r26, 0x04	; 4
        }
        OSTCBList               = ptcb;
     d68:	f0 93 5c 06 	sts	0x065C, r31
     d6c:	e0 93 5b 06 	sts	0x065B, r30
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     d70:	90 91 6b 06 	lds	r25, 0x066B
     d74:	81 89       	ldd	r24, Z+17	; 0x11
     d76:	89 2b       	or	r24, r25
     d78:	80 93 6b 06 	sts	0x066B, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     d7c:	a7 85       	ldd	r26, Z+15	; 0x0f
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	a4 59       	subi	r26, 0x94	; 148
     d82:	b9 4f       	sbci	r27, 0xF9	; 249
     d84:	9c 91       	ld	r25, X
     d86:	80 89       	ldd	r24, Z+16	; 0x10
     d88:	89 2b       	or	r24, r25
     d8a:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
     d8c:	78 94       	sei
        return (OS_NO_ERR);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <OSTCBInit+0xb6>
    } else {
        OS_EXIT_CRITICAL();
     d92:	78 94       	sei
        return (OS_NO_MORE_TCB);
     d94:	86 e4       	ldi	r24, 0x46	; 70
    }
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <OSTimeTick>:

void OSTimeTick (void)
{
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
     d9c:	0e 94 0a 05 	call	0xa14	; 0xa14 <OSTimeTickHook>
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
     da0:	e0 91 5b 06 	lds	r30, 0x065B
     da4:	f0 91 5c 06 	lds	r31, 0x065C
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     da8:	85 85       	ldd	r24, Z+13	; 0x0d
     daa:	8f 33       	cpi	r24, 0x3F	; 63
     dac:	39 f1       	breq	.+78     	; 0xdfc <OSTimeTick+0x60>
     dae:	40 91 6b 06 	lds	r20, 0x066B
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
     db6:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
     db8:	82 85       	ldd	r24, Z+10	; 0x0a
     dba:	93 85       	ldd	r25, Z+11	; 0x0b
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	a9 f0       	breq	.+42     	; 0xdea <OSTimeTick+0x4e>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	93 87       	std	Z+11, r25	; 0x0b
     dc4:	82 87       	std	Z+10, r24	; 0x0a
     dc6:	89 2b       	or	r24, r25
     dc8:	81 f4       	brne	.+32     	; 0xdea <OSTimeTick+0x4e>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
     dca:	84 85       	ldd	r24, Z+12	; 0x0c
     dcc:	83 fd       	sbrc	r24, 3
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <OSTimeTick+0x4a>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     dd0:	81 89       	ldd	r24, Z+17	; 0x11
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     dd2:	a7 85       	ldd	r26, Z+15	; 0x0f
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	a4 59       	subi	r26, 0x94	; 148
     dd8:	b9 4f       	sbci	r27, 0xF9	; 249
     dda:	5c 91       	ld	r21, X
     ddc:	90 89       	ldd	r25, Z+16	; 0x10
     dde:	95 2b       	or	r25, r21
     de0:	9c 93       	st	X, r25
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     de2:	48 2b       	or	r20, r24
     de4:	02 c0       	rjmp	.+4      	; 0xdea <OSTimeTick+0x4e>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     de6:	33 87       	std	Z+11, r19	; 0x0b
     de8:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
     dea:	02 80       	ldd	r0, Z+2	; 0x02
     dec:	f3 81       	ldd	r31, Z+3	; 0x03
     dee:	e0 2d       	mov	r30, r0
        OS_EXIT_CRITICAL();
     df0:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     df2:	85 85       	ldd	r24, Z+13	; 0x0d
     df4:	8f 33       	cpi	r24, 0x3F	; 63
     df6:	f9 f6       	brne	.-66     	; 0xdb6 <OSTimeTick+0x1a>
     df8:	40 93 6b 06 	sts	0x066B, r20
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }
	
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
     dfc:	f8 94       	cli
    OSTime++;
     dfe:	80 91 79 06 	lds	r24, 0x0679
     e02:	90 91 7a 06 	lds	r25, 0x067A
     e06:	a0 91 7b 06 	lds	r26, 0x067B
     e0a:	b0 91 7c 06 	lds	r27, 0x067C
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	80 93 79 06 	sts	0x0679, r24
     e18:	90 93 7a 06 	sts	0x067A, r25
     e1c:	a0 93 7b 06 	sts	0x067B, r26
     e20:	b0 93 7c 06 	sts	0x067C, r27
    OS_EXIT_CRITICAL();
     e24:	78 94       	sei
     e26:	08 95       	ret

00000e28 <OSMboxAccept>:
*              == (void *)0  if the mailbox is empty or if you didn't pass the proper event pointer.
*********************************************************************************************************
*/

void *OSMboxAccept (OS_EVENT *pevent)
{
     e28:	fc 01       	movw	r30, r24
    void  *msg;


    OS_ENTER_CRITICAL();
     e2a:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
     e2c:	84 85       	ldd	r24, Z+12	; 0x0c
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	21 f0       	breq	.+8      	; 0xe3a <OSMboxAccept+0x12>
        OS_EXIT_CRITICAL();
     e32:	78 94       	sei
        return ((void *)0);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	08 95       	ret
    }
    msg = pevent->OSEventPtr; 
     e3a:	20 81       	ld	r18, Z
     e3c:	31 81       	ldd	r19, Z+1	; 0x01
    if (msg != (void *)0) {                               /* See if there is already a message         */
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	11 f0       	breq	.+4      	; 0xe48 <OSMboxAccept+0x20>
        pevent->OSEventPtr = (void *)0;                   /* Clear the mailbox                         */
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	10 82       	st	Z, r1
    }
    OS_EXIT_CRITICAL();
     e48:	78 94       	sei
    return (msg);                                         /* Return the message received (or NULL)     */
     e4a:	82 2f       	mov	r24, r18
     e4c:	93 2f       	mov	r25, r19
}
     e4e:	08 95       	ret

00000e50 <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     e54:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     e56:	c0 91 74 06 	lds	r28, 0x0674
     e5a:	d0 91 75 06 	lds	r29, 0x0675
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     e5e:	20 97       	sbiw	r28, 0x00	; 0
     e60:	31 f0       	breq	.+12     	; 0xe6e <OSMboxCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     e62:	28 81       	ld	r18, Y
     e64:	39 81       	ldd	r19, Y+1	; 0x01
     e66:	30 93 75 06 	sts	0x0675, r19
     e6a:	20 93 74 06 	sts	0x0674, r18
    }
    OS_EXIT_CRITICAL();
     e6e:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
     e70:	20 97       	sbiw	r28, 0x00	; 0
     e72:	39 f0       	breq	.+14     	; 0xe82 <OSMboxCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
     e78:	99 83       	std	Y+1, r25	; 0x01
     e7a:	88 83       	st	Y, r24
        OSEventWaitListInit(pevent);
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 af 05 	call	0xb5e	; 0xb5e <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
}
     e82:	ce 01       	movw	r24, r28
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <OSMboxPost>:
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    OS_ENTER_CRITICAL();
     e8a:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
     e8c:	fc 01       	movw	r30, r24
     e8e:	24 85       	ldd	r18, Z+12	; 0x0c
     e90:	21 30       	cpi	r18, 0x01	; 1
     e92:	19 f0       	breq	.+6      	; 0xe9a <OSMboxPost+0x10>
        OS_EXIT_CRITICAL();
     e94:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	08 95       	ret
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
     e9a:	fc 01       	movw	r30, r24
     e9c:	25 85       	ldd	r18, Z+13	; 0x0d
     e9e:	22 23       	and	r18, r18
     ea0:	41 f0       	breq	.+16     	; 0xeb2 <OSMboxPost+0x28>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
     ea2:	42 e0       	ldi	r20, 0x02	; 2
     ea4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
     ea8:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
     eaa:	0e 94 00 06 	call	0xc00	; 0xc00 <OSSched>
        return (OS_NO_ERR);
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	23 2b       	or	r18, r19
     eba:	19 f0       	breq	.+6      	; 0xec2 <OSMboxPost+0x38>
            OS_EXIT_CRITICAL();
     ebc:	78 94       	sei
            return (OS_MBOX_FULL);
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	08 95       	ret
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
     ec2:	fc 01       	movw	r30, r24
     ec4:	71 83       	std	Z+1, r23	; 0x01
     ec6:	60 83       	st	Z, r22
            OS_EXIT_CRITICAL();
     ec8:	78 94       	sei
            return (OS_NO_ERR);
     eca:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
     ecc:	08 95       	ret

00000ece <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     ed2:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
     ed4:	c0 91 74 06 	lds	r28, 0x0674
     ed8:	d0 91 75 06 	lds	r29, 0x0675
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
     edc:	20 97       	sbiw	r28, 0x00	; 0
     ede:	31 f0       	breq	.+12     	; 0xeec <OSSemCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     ee0:	28 81       	ld	r18, Y
     ee2:	39 81       	ldd	r19, Y+1	; 0x01
     ee4:	30 93 75 06 	sts	0x0675, r19
     ee8:	20 93 74 06 	sts	0x0674, r18
    }
    OS_EXIT_CRITICAL();
     eec:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
     eee:	20 97       	sbiw	r28, 0x00	; 0
     ef0:	39 f0       	breq	.+14     	; 0xf00 <OSSemCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
     ef2:	23 e0       	ldi	r18, 0x03	; 3
     ef4:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
     ef6:	9b 87       	std	Y+11, r25	; 0x0b
     ef8:	8a 87       	std	Y+10, r24	; 0x0a
        OSEventWaitListInit(pevent);
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 af 05 	call	0xb5e	; 0xb5e <OSEventWaitListInit>
    }
    return (pevent);
}
     f00:	ce 01       	movw	r24, r28
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
     f12:	8a 01       	movw	r16, r20
    OS_ENTER_CRITICAL();
     f14:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	21 f0       	breq	.+8      	; 0xf24 <OSSemPend+0x1c>
        OS_EXIT_CRITICAL();
     f1c:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	fa 01       	movw	r30, r20
     f22:	80 83       	st	Z, r24
    }
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
     f24:	8a 85       	ldd	r24, Y+10	; 0x0a
     f26:	9b 85       	ldd	r25, Y+11	; 0x0b
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	39 f0       	breq	.+14     	; 0xf3a <OSSemPend+0x32>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9b 87       	std	Y+11, r25	; 0x0b
     f30:	8a 87       	std	Y+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
     f32:	78 94       	sei
        *err = OS_NO_ERR;
     f34:	f8 01       	movw	r30, r16
     f36:	10 82       	st	Z, r1
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <OSSemPend+0x8c>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
     f3a:	80 91 76 06 	lds	r24, 0x0676
     f3e:	88 23       	and	r24, r24
     f40:	29 f0       	breq	.+10     	; 0xf4c <OSSemPend+0x44>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
     f42:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	f8 01       	movw	r30, r16
     f48:	80 83       	st	Z, r24
     f4a:	24 c0       	rjmp	.+72     	; 0xf94 <OSSemPend+0x8c>
    } else {                                          /* Otherwise, must wait until event occurs       */
        OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
     f4c:	e0 91 77 06 	lds	r30, 0x0677
     f50:	f0 91 78 06 	lds	r31, 0x0678
     f54:	84 85       	ldd	r24, Z+12	; 0x0c
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	84 87       	std	Z+12, r24	; 0x0c
        OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
     f5a:	73 87       	std	Z+11, r23	; 0x0b
     f5c:	62 87       	std	Z+10, r22	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
     f5e:	ce 01       	movw	r24, r28
     f60:	0e 94 61 05 	call	0xac2	; 0xac2 <OSEventTaskWait>
        OS_EXIT_CRITICAL();
     f64:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready         */
     f66:	0e 94 00 06 	call	0xc00	; 0xc00 <OSSched>
        OS_ENTER_CRITICAL();
     f6a:	f8 94       	cli
        if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {      /* Must have timed out if still waiting for event*/
     f6c:	e0 91 77 06 	lds	r30, 0x0677
     f70:	f0 91 78 06 	lds	r31, 0x0678
     f74:	84 85       	ldd	r24, Z+12	; 0x0c
     f76:	80 ff       	sbrs	r24, 0
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <OSSemPend+0x82>
            OSEventTO(pevent);
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 90 05 	call	0xb20	; 0xb20 <OSEventTO>
            OS_EXIT_CRITICAL();
     f80:	78 94       	sei
            *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	f8 01       	movw	r30, r16
     f86:	80 83       	st	Z, r24
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <OSSemPend+0x8c>
        } else {
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
     f8a:	17 82       	std	Z+7, r1	; 0x07
     f8c:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
     f8e:	78 94       	sei
            *err = OS_NO_ERR;
     f90:	f8 01       	movw	r30, r16
     f92:	10 82       	st	Z, r1
        }
    }
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
     f9e:	bf 92       	push	r11
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	b2 2e       	mov	r11, r18

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
     fb2:	2f e3       	ldi	r18, 0x3F	; 63
     fb4:	2b 15       	cp	r18, r11
     fb6:	08 f4       	brcc	.+2      	; 0xfba <OSTaskCreate+0x1c>
     fb8:	4f c0       	rjmp	.+158    	; 0x1058 <OSTaskCreate+0xba>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     fba:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
     fbc:	cb 2d       	mov	r28, r11
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
     fc0:	fe 01       	movw	r30, r28
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e6 5f       	subi	r30, 0xF6	; 246
     fc8:	f8 4f       	sbci	r31, 0xF8	; 248
     fca:	01 90       	ld	r0, Z+
     fcc:	f0 81       	ld	r31, Z
     fce:	e0 2d       	mov	r30, r0
     fd0:	ef 2b       	or	r30, r31
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <OSTaskCreate+0x38>
     fd4:	3e c0       	rjmp	.+124    	; 0x1052 <OSTaskCreate+0xb4>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
     fd6:	fe 01       	movw	r30, r28
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	e6 5f       	subi	r30, 0xF6	; 246
     fde:	f8 4f       	sbci	r31, 0xF8	; 248
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	31 83       	std	Z+1, r19	; 0x01
     fe6:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
     fe8:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	0e 94 be 04 	call	0x97c	; 0x97c <OSTaskStkInit>
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
     ff2:	c1 2c       	mov	r12, r1
     ff4:	d1 2c       	mov	r13, r1
     ff6:	e1 2c       	mov	r14, r1
     ff8:	f1 2c       	mov	r15, r1
     ffa:	00 e0       	ldi	r16, 0x00	; 0
     ffc:	10 e0       	ldi	r17, 0x00	; 0
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	bc 01       	movw	r22, r24
    1008:	8b 2d       	mov	r24, r11
    100a:	0e 94 70 06 	call	0xce0	; 0xce0 <OSTCBInit>
        if (err == OS_NO_ERR) {
    100e:	81 11       	cpse	r24, r1
    1010:	17 c0       	rjmp	.+46     	; 0x1040 <OSTaskCreate+0xa2>
            OS_ENTER_CRITICAL();
    1012:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
    1014:	80 91 68 06 	lds	r24, 0x0668
    1018:	8f 5f       	subi	r24, 0xFF	; 255
    101a:	80 93 68 06 	sts	0x0668, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
    101e:	cc 0f       	add	r28, r28
    1020:	dd 1f       	adc	r29, r29
    1022:	c6 5f       	subi	r28, 0xF6	; 246
    1024:	d8 4f       	sbci	r29, 0xF8	; 248
    1026:	88 81       	ld	r24, Y
    1028:	99 81       	ldd	r25, Y+1	; 0x01
    102a:	0e 94 08 05 	call	0xa10	; 0xa10 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
    102e:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
    1030:	80 91 54 06 	lds	r24, 0x0654
    1034:	88 23       	and	r24, r24
    1036:	91 f0       	breq	.+36     	; 0x105c <OSTaskCreate+0xbe>
#if 0
				DebugPulse();
#endif					
                OSSched();
    1038:	0e 94 00 06 	call	0xc00	; 0xc00 <OSSched>

#if 0
		DebugPulse();
#endif	
		
        return (err);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0f c0       	rjmp	.+30     	; 0x105e <OSTaskCreate+0xc0>
				DebugPulse();
#endif					
                OSSched();
            }
        } else {
            OS_ENTER_CRITICAL();
    1040:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    1042:	cc 0f       	add	r28, r28
    1044:	dd 1f       	adc	r29, r29
    1046:	c6 5f       	subi	r28, 0xF6	; 246
    1048:	d8 4f       	sbci	r29, 0xF8	; 248
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
    104e:	78 94       	sei
    1050:	06 c0       	rjmp	.+12     	; 0x105e <OSTaskCreate+0xc0>
		DebugPulse();
#endif	
		
        return (err);
    } else {
        OS_EXIT_CRITICAL();
    1052:	78 94       	sei
        return (OS_PRIO_EXIST);
    1054:	88 e2       	ldi	r24, 0x28	; 40
    1056:	03 c0       	rjmp	.+6      	; 0x105e <OSTaskCreate+0xc0>
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    1058:	8a e2       	ldi	r24, 0x2A	; 42
    105a:	01 c0       	rjmp	.+2      	; 0x105e <OSTaskCreate+0xc0>

#if 0
		DebugPulse();
#endif	
		
        return (err);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        OS_EXIT_CRITICAL();
        return (OS_PRIO_EXIST);
    }	
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	08 95       	ret

00001072 <OSInit>:
#if 0
	DebugPulse();
#endif	


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1072:	10 92 79 06 	sts	0x0679, r1
    1076:	10 92 7a 06 	sts	0x067A, r1
    107a:	10 92 7b 06 	sts	0x067B, r1
    107e:	10 92 7c 06 	sts	0x067C, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1082:	10 92 76 06 	sts	0x0676, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1086:	10 92 53 06 	sts	0x0653, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    108a:	10 92 68 06 	sts	0x0668, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
    108e:	10 92 54 06 	sts	0x0654, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1092:	10 92 55 06 	sts	0x0655, r1
    1096:	10 92 56 06 	sts	0x0656, r1
    109a:	10 92 57 06 	sts	0x0657, r1
    109e:	10 92 58 06 	sts	0x0658, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    10a2:	10 92 5d 06 	sts	0x065D, r1
    10a6:	10 92 5e 06 	sts	0x065E, r1
    10aa:	10 92 5f 06 	sts	0x065F, r1
    10ae:	10 92 60 06 	sts	0x0660, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    10b2:	10 92 6b 06 	sts	0x066B, r1
    10b6:	ec e6       	ldi	r30, 0x6C	; 108
    10b8:	f6 e0       	ldi	r31, 0x06	; 6
    10ba:	84 e7       	ldi	r24, 0x74	; 116
    10bc:	96 e0       	ldi	r25, 0x06	; 6
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0;
    10be:	11 92       	st	Z+, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    10c0:	e8 17       	cp	r30, r24
    10c2:	f9 07       	cpc	r31, r25
    10c4:	e1 f7       	brne	.-8      	; 0x10be <OSInit+0x4c>
        OSRdyTbl[i] = 0;
    }
                
    OSPrioCur     = 0;
    10c6:	10 92 5a 06 	sts	0x065A, r1
    OSPrioHighRdy = 0;                                           
    10ca:	10 92 59 06 	sts	0x0659, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    10ce:	10 92 6a 06 	sts	0x066A, r1
    10d2:	10 92 69 06 	sts	0x0669, r1
    OSTCBCur      = (OS_TCB *)0;
    10d6:	10 92 78 06 	sts	0x0678, r1
    10da:	10 92 77 06 	sts	0x0677, r1
    OSTCBList     = (OS_TCB *)0;
    10de:	10 92 5c 06 	sts	0x065C, r1
    10e2:	10 92 5b 06 	sts	0x065B, r1
    10e6:	ea e0       	ldi	r30, 0x0A	; 10
    10e8:	f7 e0       	ldi	r31, 0x07	; 7
    10ea:	8a e8       	ldi	r24, 0x8A	; 138
    10ec:	97 e0       	ldi	r25, 0x07	; 7
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    10ee:	11 92       	st	Z+, r1
    10f0:	11 92       	st	Z+, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;                                           
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    10f2:	e8 17       	cp	r30, r24
    10f4:	f9 07       	cpc	r31, r25
    10f6:	d9 f7       	brne	.-10     	; 0x10ee <OSInit+0x7c>
    10f8:	88 ea       	ldi	r24, 0xA8	; 168
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	2a e4       	ldi	r18, 0x4A	; 74
    10fe:	33 e0       	ldi	r19, 0x03	; 3
    1100:	fc 01       	movw	r30, r24
    1102:	70 97       	sbiw	r30, 0x10	; 16
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    1104:	91 83       	std	Z+1, r25	; 0x01
    1106:	80 83       	st	Z, r24
    1108:	42 96       	adiw	r24, 0x12	; 18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    110a:	82 17       	cp	r24, r18
    110c:	93 07       	cpc	r25, r19
    110e:	c1 f7       	brne	.-16     	; 0x1100 <OSInit+0x8e>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    1110:	10 92 3b 03 	sts	0x033B, r1
    1114:	10 92 3a 03 	sts	0x033A, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
    1118:	86 e9       	ldi	r24, 0x96	; 150
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	90 93 66 06 	sts	0x0666, r25
    1120:	80 93 65 06 	sts	0x0665, r24
    1124:	8b e8       	ldi	r24, 0x8B	; 139
    1126:	96 e0       	ldi	r25, 0x06	; 6
    1128:	29 e0       	ldi	r18, 0x09	; 9
    112a:	37 e0       	ldi	r19, 0x07	; 7
    112c:	fc 01       	movw	r30, r24
    112e:	3e 97       	sbiw	r30, 0x0e	; 14

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
    1134:	0e 96       	adiw	r24, 0x0e	; 14
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    1136:	82 17       	cp	r24, r18
    1138:	93 07       	cpc	r25, r19
    113a:	c1 f7       	brne	.-16     	; 0x112c <OSInit+0xba>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
    113c:	10 92 fc 06 	sts	0x06FC, r1
    1140:	10 92 fb 06 	sts	0x06FB, r1
    OSEventFreeList                          = &OSEventTbl[0];    
    1144:	8d e7       	ldi	r24, 0x7D	; 125
    1146:	96 e0       	ldi	r25, 0x06	; 6
    1148:	90 93 75 06 	sts	0x0675, r25
    114c:	80 93 74 06 	sts	0x0674, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE, 
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
    1150:	2f e3       	ldi	r18, 0x3F	; 63
    1152:	49 ec       	ldi	r20, 0xC9	; 201
    1154:	53 e0       	ldi	r21, 0x03	; 3
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	8b e0       	ldi	r24, 0x0B	; 11
    115c:	95 e0       	ldi	r25, 0x05	; 5
    115e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat, 
    1162:	2e e3       	ldi	r18, 0x3E	; 62
    1164:	49 e8       	ldi	r20, 0x89	; 137
    1166:	53 e0       	ldi	r21, 0x03	; 3
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	99 e0       	ldi	r25, 0x09	; 9
    1170:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTaskCreate>
    1174:	08 95       	ret

00001176 <OSTimeDly>:
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    if (ticks > 0) {                                                      /* 0 means no delay!         */
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	e1 f0       	breq	.+56     	; 0x11b2 <OSTimeDly+0x3c>
        OS_ENTER_CRITICAL();
    117a:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
    117c:	e0 91 77 06 	lds	r30, 0x0677
    1180:	f0 91 78 06 	lds	r31, 0x0678
    1184:	a7 85       	ldd	r26, Z+15	; 0x0f
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	a4 59       	subi	r26, 0x94	; 148
    118a:	b9 4f       	sbci	r27, 0xF9	; 249
    118c:	20 89       	ldd	r18, Z+16	; 0x10
    118e:	20 95       	com	r18
    1190:	3c 91       	ld	r19, X
    1192:	23 23       	and	r18, r19
    1194:	2c 93       	st	X, r18
    1196:	21 11       	cpse	r18, r1
    1198:	07 c0       	rjmp	.+14     	; 0x11a8 <OSTimeDly+0x32>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    119a:	21 89       	ldd	r18, Z+17	; 0x11
    119c:	20 95       	com	r18
    119e:	30 91 6b 06 	lds	r19, 0x066B
    11a2:	23 23       	and	r18, r19
    11a4:	20 93 6b 06 	sts	0x066B, r18
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
    11a8:	93 87       	std	Z+11, r25	; 0x0b
    11aa:	82 87       	std	Z+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
    11ac:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
    11ae:	0e 94 00 06 	call	0xc00	; 0xc00 <OSSched>
    11b2:	08 95       	ret

000011b4 <OSStatInit>:
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    OS_ENTER_CRITICAL();
    11bc:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    11be:	10 92 55 06 	sts	0x0655, r1
    11c2:	10 92 56 06 	sts	0x0656, r1
    11c6:	10 92 57 06 	sts	0x0657, r1
    11ca:	10 92 58 06 	sts	0x0658, r1
    OS_EXIT_CRITICAL();
    11ce:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    OS_ENTER_CRITICAL();
    11d8:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
    11da:	80 91 55 06 	lds	r24, 0x0655
    11de:	90 91 56 06 	lds	r25, 0x0656
    11e2:	a0 91 57 06 	lds	r26, 0x0657
    11e6:	b0 91 58 06 	lds	r27, 0x0658
    11ea:	80 93 61 06 	sts	0x0661, r24
    11ee:	90 93 62 06 	sts	0x0662, r25
    11f2:	a0 93 63 06 	sts	0x0663, r26
    11f6:	b0 93 64 06 	sts	0x0664, r27
    OSStatRdy    = TRUE;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 09 07 	sts	0x0709, r24
    OS_EXIT_CRITICAL();
    1200:	78 94       	sei
    1202:	08 95       	ret

00001204 <OSTaskStat>:
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1204:	80 91 09 07 	lds	r24, 0x0709
    1208:	81 11       	cpse	r24, r1
    120a:	08 c0       	rjmp	.+16     	; 0x121c <OSTaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    120c:	80 e9       	ldi	r24, 0x90	; 144
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1214:	80 91 09 07 	lds	r24, 0x0709
    1218:	88 23       	and	r24, r24
    121a:	c1 f3       	breq	.-16     	; 0x120c <OSTaskStat+0x8>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        if (OSIdleCtrMax > 0L) {
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    121c:	c4 e6       	ldi	r28, 0x64	; 100
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    121e:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    1220:	20 91 55 06 	lds	r18, 0x0655
    1224:	30 91 56 06 	lds	r19, 0x0656
    1228:	40 91 57 06 	lds	r20, 0x0657
    122c:	50 91 58 06 	lds	r21, 0x0658
    1230:	20 93 8a 07 	sts	0x078A, r18
    1234:	30 93 8b 07 	sts	0x078B, r19
    1238:	40 93 8c 07 	sts	0x078C, r20
    123c:	50 93 8d 07 	sts	0x078D, r21
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    1240:	10 92 55 06 	sts	0x0655, r1
    1244:	10 92 56 06 	sts	0x0656, r1
    1248:	10 92 57 06 	sts	0x0657, r1
    124c:	10 92 58 06 	sts	0x0658, r1
        OS_EXIT_CRITICAL();
    1250:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
    1252:	c0 90 61 06 	lds	r12, 0x0661
    1256:	d0 90 62 06 	lds	r13, 0x0662
    125a:	e0 90 63 06 	lds	r14, 0x0663
    125e:	f0 90 64 06 	lds	r15, 0x0664
    1262:	c1 14       	cp	r12, r1
    1264:	d1 04       	cpc	r13, r1
    1266:	e1 04       	cpc	r14, r1
    1268:	f1 04       	cpc	r15, r1
    126a:	b9 f0       	breq	.+46     	; 0x129a <OSTaskStat+0x96>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    126c:	a4 e6       	ldi	r26, 0x64	; 100
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	0e 94 48 0b 	call	0x1690	; 0x1690 <__muluhisi3>
    1274:	a7 01       	movw	r20, r14
    1276:	96 01       	movw	r18, r12
    1278:	0e 94 17 0b 	call	0x162e	; 0x162e <__udivmodsi4>
    127c:	8c 2f       	mov	r24, r28
    127e:	82 1b       	sub	r24, r18
            if (usage > 100) {
    1280:	85 36       	cpi	r24, 0x65	; 101
    1282:	1c f0       	brlt	.+6      	; 0x128a <OSTaskStat+0x86>
                OSCPUUsage = 100;
    1284:	c0 93 67 06 	sts	0x0667, r28
    1288:	0a c0       	rjmp	.+20     	; 0x129e <OSTaskStat+0x9a>
            } else if (usage < 0) {
    128a:	88 23       	and	r24, r24
    128c:	1c f4       	brge	.+6      	; 0x1294 <OSTaskStat+0x90>
                OSCPUUsage =   0;
    128e:	10 92 67 06 	sts	0x0667, r1
    1292:	05 c0       	rjmp	.+10     	; 0x129e <OSTaskStat+0x9a>
            } else {
                OSCPUUsage = usage;
    1294:	80 93 67 06 	sts	0x0667, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <OSTaskStat+0x9a>
            }
        } else {
            OSCPUUsage = 0;
    129a:	10 92 67 06 	sts	0x0667, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    129e:	0e 94 09 05 	call	0xa12	; 0xa12 <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
    12a2:	88 ec       	ldi	r24, 0xC8	; 200
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 bb 08 	call	0x1176	; 0x1176 <OSTimeDly>
    }
    12aa:	b9 cf       	rjmp	.-142    	; 0x121e <OSTaskStat+0x1a>

000012ac <__subsf3>:
    12ac:	50 58       	subi	r21, 0x80	; 128

000012ae <__addsf3>:
    12ae:	bb 27       	eor	r27, r27
    12b0:	aa 27       	eor	r26, r26
    12b2:	0e d0       	rcall	.+28     	; 0x12d0 <__addsf3x>
    12b4:	0b c1       	rjmp	.+534    	; 0x14cc <__fp_round>
    12b6:	fc d0       	rcall	.+504    	; 0x14b0 <__fp_pscA>
    12b8:	30 f0       	brcs	.+12     	; 0x12c6 <__addsf3+0x18>
    12ba:	01 d1       	rcall	.+514    	; 0x14be <__fp_pscB>
    12bc:	20 f0       	brcs	.+8      	; 0x12c6 <__addsf3+0x18>
    12be:	31 f4       	brne	.+12     	; 0x12cc <__addsf3+0x1e>
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <__addsf3+0x1a>
    12c4:	1e f4       	brtc	.+6      	; 0x12cc <__addsf3+0x1e>
    12c6:	f1 c0       	rjmp	.+482    	; 0x14aa <__fp_nan>
    12c8:	0e f4       	brtc	.+2      	; 0x12cc <__addsf3+0x1e>
    12ca:	e0 95       	com	r30
    12cc:	e7 fb       	bst	r30, 7
    12ce:	e7 c0       	rjmp	.+462    	; 0x149e <__fp_inf>

000012d0 <__addsf3x>:
    12d0:	e9 2f       	mov	r30, r25
    12d2:	0d d1       	rcall	.+538    	; 0x14ee <__fp_split3>
    12d4:	80 f3       	brcs	.-32     	; 0x12b6 <__addsf3+0x8>
    12d6:	ba 17       	cp	r27, r26
    12d8:	62 07       	cpc	r22, r18
    12da:	73 07       	cpc	r23, r19
    12dc:	84 07       	cpc	r24, r20
    12de:	95 07       	cpc	r25, r21
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <__addsf3x+0x18>
    12e2:	71 f4       	brne	.+28     	; 0x1300 <__addsf3x+0x30>
    12e4:	9e f5       	brtc	.+102    	; 0x134c <__addsf3x+0x7c>
    12e6:	25 c1       	rjmp	.+586    	; 0x1532 <__fp_zero>
    12e8:	0e f4       	brtc	.+2      	; 0x12ec <__addsf3x+0x1c>
    12ea:	e0 95       	com	r30
    12ec:	0b 2e       	mov	r0, r27
    12ee:	ba 2f       	mov	r27, r26
    12f0:	a0 2d       	mov	r26, r0
    12f2:	0b 01       	movw	r0, r22
    12f4:	b9 01       	movw	r22, r18
    12f6:	90 01       	movw	r18, r0
    12f8:	0c 01       	movw	r0, r24
    12fa:	ca 01       	movw	r24, r20
    12fc:	a0 01       	movw	r20, r0
    12fe:	11 24       	eor	r1, r1
    1300:	ff 27       	eor	r31, r31
    1302:	59 1b       	sub	r21, r25
    1304:	99 f0       	breq	.+38     	; 0x132c <__addsf3x+0x5c>
    1306:	59 3f       	cpi	r21, 0xF9	; 249
    1308:	50 f4       	brcc	.+20     	; 0x131e <__addsf3x+0x4e>
    130a:	50 3e       	cpi	r21, 0xE0	; 224
    130c:	68 f1       	brcs	.+90     	; 0x1368 <__addsf3x+0x98>
    130e:	1a 16       	cp	r1, r26
    1310:	f0 40       	sbci	r31, 0x00	; 0
    1312:	a2 2f       	mov	r26, r18
    1314:	23 2f       	mov	r18, r19
    1316:	34 2f       	mov	r19, r20
    1318:	44 27       	eor	r20, r20
    131a:	58 5f       	subi	r21, 0xF8	; 248
    131c:	f3 cf       	rjmp	.-26     	; 0x1304 <__addsf3x+0x34>
    131e:	46 95       	lsr	r20
    1320:	37 95       	ror	r19
    1322:	27 95       	ror	r18
    1324:	a7 95       	ror	r26
    1326:	f0 40       	sbci	r31, 0x00	; 0
    1328:	53 95       	inc	r21
    132a:	c9 f7       	brne	.-14     	; 0x131e <__addsf3x+0x4e>
    132c:	7e f4       	brtc	.+30     	; 0x134c <__addsf3x+0x7c>
    132e:	1f 16       	cp	r1, r31
    1330:	ba 0b       	sbc	r27, r26
    1332:	62 0b       	sbc	r22, r18
    1334:	73 0b       	sbc	r23, r19
    1336:	84 0b       	sbc	r24, r20
    1338:	ba f0       	brmi	.+46     	; 0x1368 <__addsf3x+0x98>
    133a:	91 50       	subi	r25, 0x01	; 1
    133c:	a1 f0       	breq	.+40     	; 0x1366 <__addsf3x+0x96>
    133e:	ff 0f       	add	r31, r31
    1340:	bb 1f       	adc	r27, r27
    1342:	66 1f       	adc	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	c2 f7       	brpl	.-16     	; 0x133a <__addsf3x+0x6a>
    134a:	0e c0       	rjmp	.+28     	; 0x1368 <__addsf3x+0x98>
    134c:	ba 0f       	add	r27, r26
    134e:	62 1f       	adc	r22, r18
    1350:	73 1f       	adc	r23, r19
    1352:	84 1f       	adc	r24, r20
    1354:	48 f4       	brcc	.+18     	; 0x1368 <__addsf3x+0x98>
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f7 95       	ror	r31
    1360:	9e 3f       	cpi	r25, 0xFE	; 254
    1362:	08 f0       	brcs	.+2      	; 0x1366 <__addsf3x+0x96>
    1364:	b3 cf       	rjmp	.-154    	; 0x12cc <__addsf3+0x1e>
    1366:	93 95       	inc	r25
    1368:	88 0f       	add	r24, r24
    136a:	08 f0       	brcs	.+2      	; 0x136e <__addsf3x+0x9e>
    136c:	99 27       	eor	r25, r25
    136e:	ee 0f       	add	r30, r30
    1370:	97 95       	ror	r25
    1372:	87 95       	ror	r24
    1374:	08 95       	ret

00001376 <__divsf3>:
    1376:	0c d0       	rcall	.+24     	; 0x1390 <__divsf3x>
    1378:	a9 c0       	rjmp	.+338    	; 0x14cc <__fp_round>
    137a:	a1 d0       	rcall	.+322    	; 0x14be <__fp_pscB>
    137c:	40 f0       	brcs	.+16     	; 0x138e <__divsf3+0x18>
    137e:	98 d0       	rcall	.+304    	; 0x14b0 <__fp_pscA>
    1380:	30 f0       	brcs	.+12     	; 0x138e <__divsf3+0x18>
    1382:	21 f4       	brne	.+8      	; 0x138c <__divsf3+0x16>
    1384:	5f 3f       	cpi	r21, 0xFF	; 255
    1386:	19 f0       	breq	.+6      	; 0x138e <__divsf3+0x18>
    1388:	8a c0       	rjmp	.+276    	; 0x149e <__fp_inf>
    138a:	51 11       	cpse	r21, r1
    138c:	d3 c0       	rjmp	.+422    	; 0x1534 <__fp_szero>
    138e:	8d c0       	rjmp	.+282    	; 0x14aa <__fp_nan>

00001390 <__divsf3x>:
    1390:	ae d0       	rcall	.+348    	; 0x14ee <__fp_split3>
    1392:	98 f3       	brcs	.-26     	; 0x137a <__divsf3+0x4>

00001394 <__divsf3_pse>:
    1394:	99 23       	and	r25, r25
    1396:	c9 f3       	breq	.-14     	; 0x138a <__divsf3+0x14>
    1398:	55 23       	and	r21, r21
    139a:	b1 f3       	breq	.-20     	; 0x1388 <__divsf3+0x12>
    139c:	95 1b       	sub	r25, r21
    139e:	55 0b       	sbc	r21, r21
    13a0:	bb 27       	eor	r27, r27
    13a2:	aa 27       	eor	r26, r26
    13a4:	62 17       	cp	r22, r18
    13a6:	73 07       	cpc	r23, r19
    13a8:	84 07       	cpc	r24, r20
    13aa:	38 f0       	brcs	.+14     	; 0x13ba <__divsf3_pse+0x26>
    13ac:	9f 5f       	subi	r25, 0xFF	; 255
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	22 0f       	add	r18, r18
    13b2:	33 1f       	adc	r19, r19
    13b4:	44 1f       	adc	r20, r20
    13b6:	aa 1f       	adc	r26, r26
    13b8:	a9 f3       	breq	.-22     	; 0x13a4 <__divsf3_pse+0x10>
    13ba:	33 d0       	rcall	.+102    	; 0x1422 <__divsf3_pse+0x8e>
    13bc:	0e 2e       	mov	r0, r30
    13be:	3a f0       	brmi	.+14     	; 0x13ce <__divsf3_pse+0x3a>
    13c0:	e0 e8       	ldi	r30, 0x80	; 128
    13c2:	30 d0       	rcall	.+96     	; 0x1424 <__divsf3_pse+0x90>
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	50 40       	sbci	r21, 0x00	; 0
    13c8:	e6 95       	lsr	r30
    13ca:	00 1c       	adc	r0, r0
    13cc:	ca f7       	brpl	.-14     	; 0x13c0 <__divsf3_pse+0x2c>
    13ce:	29 d0       	rcall	.+82     	; 0x1422 <__divsf3_pse+0x8e>
    13d0:	fe 2f       	mov	r31, r30
    13d2:	27 d0       	rcall	.+78     	; 0x1422 <__divsf3_pse+0x8e>
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	88 1f       	adc	r24, r24
    13da:	bb 1f       	adc	r27, r27
    13dc:	26 17       	cp	r18, r22
    13de:	37 07       	cpc	r19, r23
    13e0:	48 07       	cpc	r20, r24
    13e2:	ab 07       	cpc	r26, r27
    13e4:	b0 e8       	ldi	r27, 0x80	; 128
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__divsf3_pse+0x56>
    13e8:	bb 0b       	sbc	r27, r27
    13ea:	80 2d       	mov	r24, r0
    13ec:	bf 01       	movw	r22, r30
    13ee:	ff 27       	eor	r31, r31
    13f0:	93 58       	subi	r25, 0x83	; 131
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	2a f0       	brmi	.+10     	; 0x1400 <__divsf3_pse+0x6c>
    13f6:	9e 3f       	cpi	r25, 0xFE	; 254
    13f8:	51 05       	cpc	r21, r1
    13fa:	68 f0       	brcs	.+26     	; 0x1416 <__divsf3_pse+0x82>
    13fc:	50 c0       	rjmp	.+160    	; 0x149e <__fp_inf>
    13fe:	9a c0       	rjmp	.+308    	; 0x1534 <__fp_szero>
    1400:	5f 3f       	cpi	r21, 0xFF	; 255
    1402:	ec f3       	brlt	.-6      	; 0x13fe <__divsf3_pse+0x6a>
    1404:	98 3e       	cpi	r25, 0xE8	; 232
    1406:	dc f3       	brlt	.-10     	; 0x13fe <__divsf3_pse+0x6a>
    1408:	86 95       	lsr	r24
    140a:	77 95       	ror	r23
    140c:	67 95       	ror	r22
    140e:	b7 95       	ror	r27
    1410:	f7 95       	ror	r31
    1412:	9f 5f       	subi	r25, 0xFF	; 255
    1414:	c9 f7       	brne	.-14     	; 0x1408 <__divsf3_pse+0x74>
    1416:	88 0f       	add	r24, r24
    1418:	91 1d       	adc	r25, r1
    141a:	96 95       	lsr	r25
    141c:	87 95       	ror	r24
    141e:	97 f9       	bld	r25, 7
    1420:	08 95       	ret
    1422:	e1 e0       	ldi	r30, 0x01	; 1
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	bb 1f       	adc	r27, r27
    142c:	62 17       	cp	r22, r18
    142e:	73 07       	cpc	r23, r19
    1430:	84 07       	cpc	r24, r20
    1432:	ba 07       	cpc	r27, r26
    1434:	20 f0       	brcs	.+8      	; 0x143e <__divsf3_pse+0xaa>
    1436:	62 1b       	sub	r22, r18
    1438:	73 0b       	sbc	r23, r19
    143a:	84 0b       	sbc	r24, r20
    143c:	ba 0b       	sbc	r27, r26
    143e:	ee 1f       	adc	r30, r30
    1440:	88 f7       	brcc	.-30     	; 0x1424 <__divsf3_pse+0x90>
    1442:	e0 95       	com	r30
    1444:	08 95       	ret

00001446 <__fixunssfsi>:
    1446:	5b d0       	rcall	.+182    	; 0x14fe <__fp_splitA>
    1448:	88 f0       	brcs	.+34     	; 0x146c <__fixunssfsi+0x26>
    144a:	9f 57       	subi	r25, 0x7F	; 127
    144c:	90 f0       	brcs	.+36     	; 0x1472 <__fixunssfsi+0x2c>
    144e:	b9 2f       	mov	r27, r25
    1450:	99 27       	eor	r25, r25
    1452:	b7 51       	subi	r27, 0x17	; 23
    1454:	a0 f0       	brcs	.+40     	; 0x147e <__fixunssfsi+0x38>
    1456:	d1 f0       	breq	.+52     	; 0x148c <__fixunssfsi+0x46>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	88 1f       	adc	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	1a f0       	brmi	.+6      	; 0x1468 <__fixunssfsi+0x22>
    1462:	ba 95       	dec	r27
    1464:	c9 f7       	brne	.-14     	; 0x1458 <__fixunssfsi+0x12>
    1466:	12 c0       	rjmp	.+36     	; 0x148c <__fixunssfsi+0x46>
    1468:	b1 30       	cpi	r27, 0x01	; 1
    146a:	81 f0       	breq	.+32     	; 0x148c <__fixunssfsi+0x46>
    146c:	62 d0       	rcall	.+196    	; 0x1532 <__fp_zero>
    146e:	b1 e0       	ldi	r27, 0x01	; 1
    1470:	08 95       	ret
    1472:	5f c0       	rjmp	.+190    	; 0x1532 <__fp_zero>
    1474:	67 2f       	mov	r22, r23
    1476:	78 2f       	mov	r23, r24
    1478:	88 27       	eor	r24, r24
    147a:	b8 5f       	subi	r27, 0xF8	; 248
    147c:	39 f0       	breq	.+14     	; 0x148c <__fixunssfsi+0x46>
    147e:	b9 3f       	cpi	r27, 0xF9	; 249
    1480:	cc f3       	brlt	.-14     	; 0x1474 <__fixunssfsi+0x2e>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b3 95       	inc	r27
    148a:	d9 f7       	brne	.-10     	; 0x1482 <__fixunssfsi+0x3c>
    148c:	3e f4       	brtc	.+14     	; 0x149c <__fixunssfsi+0x56>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__fp_inf>:
    149e:	97 f9       	bld	r25, 7
    14a0:	9f 67       	ori	r25, 0x7F	; 127
    14a2:	80 e8       	ldi	r24, 0x80	; 128
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	08 95       	ret

000014aa <__fp_nan>:
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	80 ec       	ldi	r24, 0xC0	; 192
    14ae:	08 95       	ret

000014b0 <__fp_pscA>:
    14b0:	00 24       	eor	r0, r0
    14b2:	0a 94       	dec	r0
    14b4:	16 16       	cp	r1, r22
    14b6:	17 06       	cpc	r1, r23
    14b8:	18 06       	cpc	r1, r24
    14ba:	09 06       	cpc	r0, r25
    14bc:	08 95       	ret

000014be <__fp_pscB>:
    14be:	00 24       	eor	r0, r0
    14c0:	0a 94       	dec	r0
    14c2:	12 16       	cp	r1, r18
    14c4:	13 06       	cpc	r1, r19
    14c6:	14 06       	cpc	r1, r20
    14c8:	05 06       	cpc	r0, r21
    14ca:	08 95       	ret

000014cc <__fp_round>:
    14cc:	09 2e       	mov	r0, r25
    14ce:	03 94       	inc	r0
    14d0:	00 0c       	add	r0, r0
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__fp_round+0xc>
    14d4:	88 23       	and	r24, r24
    14d6:	52 f0       	brmi	.+20     	; 0x14ec <__fp_round+0x20>
    14d8:	bb 0f       	add	r27, r27
    14da:	40 f4       	brcc	.+16     	; 0x14ec <__fp_round+0x20>
    14dc:	bf 2b       	or	r27, r31
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__fp_round+0x18>
    14e0:	60 ff       	sbrs	r22, 0
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <__fp_round+0x20>
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	08 95       	ret

000014ee <__fp_split3>:
    14ee:	57 fd       	sbrc	r21, 7
    14f0:	90 58       	subi	r25, 0x80	; 128
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	59 f0       	breq	.+22     	; 0x150e <__fp_splitA+0x10>
    14f8:	5f 3f       	cpi	r21, 0xFF	; 255
    14fa:	71 f0       	breq	.+28     	; 0x1518 <__fp_splitA+0x1a>
    14fc:	47 95       	ror	r20

000014fe <__fp_splitA>:
    14fe:	88 0f       	add	r24, r24
    1500:	97 fb       	bst	r25, 7
    1502:	99 1f       	adc	r25, r25
    1504:	61 f0       	breq	.+24     	; 0x151e <__fp_splitA+0x20>
    1506:	9f 3f       	cpi	r25, 0xFF	; 255
    1508:	79 f0       	breq	.+30     	; 0x1528 <__fp_splitA+0x2a>
    150a:	87 95       	ror	r24
    150c:	08 95       	ret
    150e:	12 16       	cp	r1, r18
    1510:	13 06       	cpc	r1, r19
    1512:	14 06       	cpc	r1, r20
    1514:	55 1f       	adc	r21, r21
    1516:	f2 cf       	rjmp	.-28     	; 0x14fc <__fp_split3+0xe>
    1518:	46 95       	lsr	r20
    151a:	f1 df       	rcall	.-30     	; 0x14fe <__fp_splitA>
    151c:	08 c0       	rjmp	.+16     	; 0x152e <__fp_splitA+0x30>
    151e:	16 16       	cp	r1, r22
    1520:	17 06       	cpc	r1, r23
    1522:	18 06       	cpc	r1, r24
    1524:	99 1f       	adc	r25, r25
    1526:	f1 cf       	rjmp	.-30     	; 0x150a <__fp_splitA+0xc>
    1528:	86 95       	lsr	r24
    152a:	71 05       	cpc	r23, r1
    152c:	61 05       	cpc	r22, r1
    152e:	08 94       	sec
    1530:	08 95       	ret

00001532 <__fp_zero>:
    1532:	e8 94       	clt

00001534 <__fp_szero>:
    1534:	bb 27       	eor	r27, r27
    1536:	66 27       	eor	r22, r22
    1538:	77 27       	eor	r23, r23
    153a:	cb 01       	movw	r24, r22
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret

00001540 <__mulsf3>:
    1540:	0b d0       	rcall	.+22     	; 0x1558 <__mulsf3x>
    1542:	c4 cf       	rjmp	.-120    	; 0x14cc <__fp_round>
    1544:	b5 df       	rcall	.-150    	; 0x14b0 <__fp_pscA>
    1546:	28 f0       	brcs	.+10     	; 0x1552 <__mulsf3+0x12>
    1548:	ba df       	rcall	.-140    	; 0x14be <__fp_pscB>
    154a:	18 f0       	brcs	.+6      	; 0x1552 <__mulsf3+0x12>
    154c:	95 23       	and	r25, r21
    154e:	09 f0       	breq	.+2      	; 0x1552 <__mulsf3+0x12>
    1550:	a6 cf       	rjmp	.-180    	; 0x149e <__fp_inf>
    1552:	ab cf       	rjmp	.-170    	; 0x14aa <__fp_nan>
    1554:	11 24       	eor	r1, r1
    1556:	ee cf       	rjmp	.-36     	; 0x1534 <__fp_szero>

00001558 <__mulsf3x>:
    1558:	ca df       	rcall	.-108    	; 0x14ee <__fp_split3>
    155a:	a0 f3       	brcs	.-24     	; 0x1544 <__mulsf3+0x4>

0000155c <__mulsf3_pse>:
    155c:	95 9f       	mul	r25, r21
    155e:	d1 f3       	breq	.-12     	; 0x1554 <__mulsf3+0x14>
    1560:	95 0f       	add	r25, r21
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	55 1f       	adc	r21, r21
    1566:	62 9f       	mul	r22, r18
    1568:	f0 01       	movw	r30, r0
    156a:	72 9f       	mul	r23, r18
    156c:	bb 27       	eor	r27, r27
    156e:	f0 0d       	add	r31, r0
    1570:	b1 1d       	adc	r27, r1
    1572:	63 9f       	mul	r22, r19
    1574:	aa 27       	eor	r26, r26
    1576:	f0 0d       	add	r31, r0
    1578:	b1 1d       	adc	r27, r1
    157a:	aa 1f       	adc	r26, r26
    157c:	64 9f       	mul	r22, r20
    157e:	66 27       	eor	r22, r22
    1580:	b0 0d       	add	r27, r0
    1582:	a1 1d       	adc	r26, r1
    1584:	66 1f       	adc	r22, r22
    1586:	82 9f       	mul	r24, r18
    1588:	22 27       	eor	r18, r18
    158a:	b0 0d       	add	r27, r0
    158c:	a1 1d       	adc	r26, r1
    158e:	62 1f       	adc	r22, r18
    1590:	73 9f       	mul	r23, r19
    1592:	b0 0d       	add	r27, r0
    1594:	a1 1d       	adc	r26, r1
    1596:	62 1f       	adc	r22, r18
    1598:	83 9f       	mul	r24, r19
    159a:	a0 0d       	add	r26, r0
    159c:	61 1d       	adc	r22, r1
    159e:	22 1f       	adc	r18, r18
    15a0:	74 9f       	mul	r23, r20
    15a2:	33 27       	eor	r19, r19
    15a4:	a0 0d       	add	r26, r0
    15a6:	61 1d       	adc	r22, r1
    15a8:	23 1f       	adc	r18, r19
    15aa:	84 9f       	mul	r24, r20
    15ac:	60 0d       	add	r22, r0
    15ae:	21 1d       	adc	r18, r1
    15b0:	82 2f       	mov	r24, r18
    15b2:	76 2f       	mov	r23, r22
    15b4:	6a 2f       	mov	r22, r26
    15b6:	11 24       	eor	r1, r1
    15b8:	9f 57       	subi	r25, 0x7F	; 127
    15ba:	50 40       	sbci	r21, 0x00	; 0
    15bc:	8a f0       	brmi	.+34     	; 0x15e0 <__mulsf3_pse+0x84>
    15be:	e1 f0       	breq	.+56     	; 0x15f8 <__mulsf3_pse+0x9c>
    15c0:	88 23       	and	r24, r24
    15c2:	4a f0       	brmi	.+18     	; 0x15d6 <__mulsf3_pse+0x7a>
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	bb 1f       	adc	r27, r27
    15ca:	66 1f       	adc	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	91 50       	subi	r25, 0x01	; 1
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	a9 f7       	brne	.-22     	; 0x15c0 <__mulsf3_pse+0x64>
    15d6:	9e 3f       	cpi	r25, 0xFE	; 254
    15d8:	51 05       	cpc	r21, r1
    15da:	70 f0       	brcs	.+28     	; 0x15f8 <__mulsf3_pse+0x9c>
    15dc:	60 cf       	rjmp	.-320    	; 0x149e <__fp_inf>
    15de:	aa cf       	rjmp	.-172    	; 0x1534 <__fp_szero>
    15e0:	5f 3f       	cpi	r21, 0xFF	; 255
    15e2:	ec f3       	brlt	.-6      	; 0x15de <__mulsf3_pse+0x82>
    15e4:	98 3e       	cpi	r25, 0xE8	; 232
    15e6:	dc f3       	brlt	.-10     	; 0x15de <__mulsf3_pse+0x82>
    15e8:	86 95       	lsr	r24
    15ea:	77 95       	ror	r23
    15ec:	67 95       	ror	r22
    15ee:	b7 95       	ror	r27
    15f0:	f7 95       	ror	r31
    15f2:	e7 95       	ror	r30
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	c1 f7       	brne	.-16     	; 0x15e8 <__mulsf3_pse+0x8c>
    15f8:	fe 2b       	or	r31, r30
    15fa:	88 0f       	add	r24, r24
    15fc:	91 1d       	adc	r25, r1
    15fe:	96 95       	lsr	r25
    1600:	87 95       	ror	r24
    1602:	97 f9       	bld	r25, 7
    1604:	08 95       	ret

00001606 <__divmodhi4>:
    1606:	97 fb       	bst	r25, 7
    1608:	07 2e       	mov	r0, r23
    160a:	16 f4       	brtc	.+4      	; 0x1610 <__divmodhi4+0xa>
    160c:	00 94       	com	r0
    160e:	07 d0       	rcall	.+14     	; 0x161e <__divmodhi4_neg1>
    1610:	77 fd       	sbrc	r23, 7
    1612:	09 d0       	rcall	.+18     	; 0x1626 <__divmodhi4_neg2>
    1614:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__udivmodhi4>
    1618:	07 fc       	sbrc	r0, 7
    161a:	05 d0       	rcall	.+10     	; 0x1626 <__divmodhi4_neg2>
    161c:	3e f4       	brtc	.+14     	; 0x162c <__divmodhi4_exit>

0000161e <__divmodhi4_neg1>:
    161e:	90 95       	com	r25
    1620:	81 95       	neg	r24
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	08 95       	ret

00001626 <__divmodhi4_neg2>:
    1626:	70 95       	com	r23
    1628:	61 95       	neg	r22
    162a:	7f 4f       	sbci	r23, 0xFF	; 255

0000162c <__divmodhi4_exit>:
    162c:	08 95       	ret

0000162e <__udivmodsi4>:
    162e:	a1 e2       	ldi	r26, 0x21	; 33
    1630:	1a 2e       	mov	r1, r26
    1632:	aa 1b       	sub	r26, r26
    1634:	bb 1b       	sub	r27, r27
    1636:	fd 01       	movw	r30, r26
    1638:	0d c0       	rjmp	.+26     	; 0x1654 <__udivmodsi4_ep>

0000163a <__udivmodsi4_loop>:
    163a:	aa 1f       	adc	r26, r26
    163c:	bb 1f       	adc	r27, r27
    163e:	ee 1f       	adc	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	a2 17       	cp	r26, r18
    1644:	b3 07       	cpc	r27, r19
    1646:	e4 07       	cpc	r30, r20
    1648:	f5 07       	cpc	r31, r21
    164a:	20 f0       	brcs	.+8      	; 0x1654 <__udivmodsi4_ep>
    164c:	a2 1b       	sub	r26, r18
    164e:	b3 0b       	sbc	r27, r19
    1650:	e4 0b       	sbc	r30, r20
    1652:	f5 0b       	sbc	r31, r21

00001654 <__udivmodsi4_ep>:
    1654:	66 1f       	adc	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	1a 94       	dec	r1
    165e:	69 f7       	brne	.-38     	; 0x163a <__udivmodsi4_loop>
    1660:	60 95       	com	r22
    1662:	70 95       	com	r23
    1664:	80 95       	com	r24
    1666:	90 95       	com	r25
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	bd 01       	movw	r22, r26
    166e:	cf 01       	movw	r24, r30
    1670:	08 95       	ret

00001672 <__umulhisi3>:
    1672:	a2 9f       	mul	r26, r18
    1674:	b0 01       	movw	r22, r0
    1676:	b3 9f       	mul	r27, r19
    1678:	c0 01       	movw	r24, r0
    167a:	a3 9f       	mul	r26, r19
    167c:	70 0d       	add	r23, r0
    167e:	81 1d       	adc	r24, r1
    1680:	11 24       	eor	r1, r1
    1682:	91 1d       	adc	r25, r1
    1684:	b2 9f       	mul	r27, r18
    1686:	70 0d       	add	r23, r0
    1688:	81 1d       	adc	r24, r1
    168a:	11 24       	eor	r1, r1
    168c:	91 1d       	adc	r25, r1
    168e:	08 95       	ret

00001690 <__muluhisi3>:
    1690:	0e 94 39 0b 	call	0x1672	; 0x1672 <__umulhisi3>
    1694:	a5 9f       	mul	r26, r21
    1696:	90 0d       	add	r25, r0
    1698:	b4 9f       	mul	r27, r20
    169a:	90 0d       	add	r25, r0
    169c:	a4 9f       	mul	r26, r20
    169e:	80 0d       	add	r24, r0
    16a0:	91 1d       	adc	r25, r1
    16a2:	11 24       	eor	r1, r1
    16a4:	08 95       	ret

000016a6 <__udivmodhi4>:
    16a6:	aa 1b       	sub	r26, r26
    16a8:	bb 1b       	sub	r27, r27
    16aa:	51 e1       	ldi	r21, 0x11	; 17
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <__udivmodhi4_ep>

000016ae <__udivmodhi4_loop>:
    16ae:	aa 1f       	adc	r26, r26
    16b0:	bb 1f       	adc	r27, r27
    16b2:	a6 17       	cp	r26, r22
    16b4:	b7 07       	cpc	r27, r23
    16b6:	10 f0       	brcs	.+4      	; 0x16bc <__udivmodhi4_ep>
    16b8:	a6 1b       	sub	r26, r22
    16ba:	b7 0b       	sbc	r27, r23

000016bc <__udivmodhi4_ep>:
    16bc:	88 1f       	adc	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	5a 95       	dec	r21
    16c2:	a9 f7       	brne	.-22     	; 0x16ae <__udivmodhi4_loop>
    16c4:	80 95       	com	r24
    16c6:	90 95       	com	r25
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	08 95       	ret

000016ce <strcpy>:
    16ce:	fb 01       	movw	r30, r22
    16d0:	dc 01       	movw	r26, r24
    16d2:	01 90       	ld	r0, Z+
    16d4:	0d 92       	st	X+, r0
    16d6:	00 20       	and	r0, r0
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <strcpy+0x4>
    16da:	08 95       	ret

000016dc <_exit>:
    16dc:	f8 94       	cli

000016de <__stop_program>:
    16de:	ff cf       	rjmp	.-2      	; 0x16de <__stop_program>
