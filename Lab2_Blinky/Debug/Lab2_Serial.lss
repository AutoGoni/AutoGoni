
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00001b16  00001baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000057b  00800272  00800272  00001d1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002133  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00004083  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a17  00000000  00000000  00004840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00005258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b0  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019f6  00000000  00000000  00005f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  0000794a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e6 e1       	ldi	r30, 0x16	; 22
     17c:	fb e1       	ldi	r31, 0x1B	; 27
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	a2 37       	cpi	r26, 0x72	; 114
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	a2 e7       	ldi	r26, 0x72	; 114
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	ad 3e       	cpi	r26, 0xED	; 237
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 73 06 	call	0xce6	; 0xce6 <main>
     19e:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:
     1a6:	00 91 b3 06 	lds	r16, 0x06B3
     1aa:	03 95       	inc	r16
     1ac:	00 93 b3 06 	sts	0x06B3, r16
     1b0:	e0 91 c8 06 	lds	r30, 0x06C8
     1b4:	f0 91 c9 06 	lds	r31, 0x06C9
     1b8:	c1 91       	ld	r28, Z+
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	d1 91       	ld	r29, Z+
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
     204:	08 95       	ret

00000206 <OSCtxSw>:
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16
     24a:	e0 91 d6 06 	lds	r30, 0x06D6
     24e:	f0 91 d7 06 	lds	r31, 0x06D7
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	c1 93       	st	Z+, r28
     256:	de b7       	in	r29, 0x3e	; 62
     258:	d1 93       	st	Z+, r29
     25a:	00 91 b8 06 	lds	r16, 0x06B8
     25e:	00 93 b9 06 	sts	0x06B9, r16
     262:	e0 91 c8 06 	lds	r30, 0x06C8
     266:	f0 91 c9 06 	lds	r31, 0x06C9
     26a:	e0 93 d6 06 	sts	0x06D6, r30
     26e:	f0 93 d7 06 	sts	0x06D7, r31
     272:	c1 91       	ld	r28, Z+
     274:	cd bf       	out	0x3d, r28	; 61
     276:	d1 91       	ld	r29, Z+
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
     2c0:	00 91 b8 06 	lds	r16, 0x06B8
     2c4:	00 93 b9 06 	sts	0x06B9, r16
     2c8:	e0 91 c8 06 	lds	r30, 0x06C8
     2cc:	f0 91 c9 06 	lds	r31, 0x06C9
     2d0:	e0 93 d6 06 	sts	0x06D6, r30
     2d4:	f0 93 d7 06 	sts	0x06D7, r31
     2d8:	c1 91       	ld	r28, Z+
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	d1 91       	ld	r29, Z+
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	08 95       	ret

00000326 <OSTickISR>:
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16
     36c:	00 91 d5 06 	lds	r16, 0x06D5
     370:	03 95       	inc	r16
     372:	00 93 d5 06 	sts	0x06D5, r16
     376:	01 30       	cpi	r16, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e0 91 d6 06 	lds	r30, 0x06D6
     382:	f0 91 d7 06 	lds	r31, 0x06D7
     386:	c1 93       	st	Z+, r28
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
     38a:	0d ee       	ldi	r16, 0xED	; 237
     38c:	06 bd       	out	0x26, r16	; 38
     38e:	78 94       	sei
     390:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <OSTimeTick>
     394:	00 00       	nop
     396:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <OSIntExit>
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
     3de:	08 95       	ret

000003e0 <WatchDogReset>:
     3e0:	a8 95       	wdr
     3e2:	08 95       	ret

000003e4 <SerTxISR>:
     3e4:	08 95       	ret

000003e6 <TaskStart>:
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <OSStatInit>
     3ea:	e0 ef       	ldi	r30, 0xF0	; 240
     3ec:	f4 e0       	ldi	r31, 0x04	; 4
     3ee:	a0 e3       	ldi	r26, 0x30	; 48
     3f0:	b4 e0       	ldi	r27, 0x04	; 4
     3f2:	80 e3       	ldi	r24, 0x30	; 48
     3f4:	95 e0       	ldi	r25, 0x05	; 5

	for(i=0;i<NUM_MEAS;i++){
		measArray[i] = 0;
     3f6:	11 92       	st	Z+, r1
     3f8:	11 92       	st	Z+, r1
		passiveArray[i] = 0;
     3fa:	1d 92       	st	X+, r1
     3fc:	1d 92       	st	X+, r1
	pdata = pdata;                                         /* Prevent compiler warning                 */
	int i;
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */

	for(i=0;i<NUM_MEAS;i++){
     3fe:	e8 17       	cp	r30, r24
     400:	f9 07       	cpc	r31, r25
     402:	c9 f7       	brne	.-14     	; 0x3f6 <TaskStart+0x10>
		measArray[i] = 0;
		passiveArray[i] = 0;
	}
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	41 e3       	ldi	r20, 0x31	; 49
     408:	56 e0       	ldi	r21, 0x06	; 6
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	82 e3       	ldi	r24, 0x32	; 50
     410:	95 e0       	ldi	r25, 0x05	; 5
     412:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     416:	24 e1       	ldi	r18, 0x14	; 20
     418:	41 eb       	ldi	r20, 0xB1	; 177
     41a:	55 e0       	ldi	r21, 0x05	; 5
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	81 ed       	ldi	r24, 0xD1	; 209
     422:	95 e0       	ldi	r25, 0x05	; 5
     424:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     428:	80 e9       	ldi	r24, 0x90	; 144
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     430:	64 e0       	ldi	r22, 0x04	; 4
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	80 91 2e 04 	lds	r24, 0x042E
     438:	90 91 2f 04 	lds	r25, 0x042F
     43c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     440:	80 e9       	ldi	r24, 0x90	; 144
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     448:	69 e2       	ldi	r22, 0x29	; 41
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	80 91 2e 04 	lds	r24, 0x042E
     450:	90 91 2f 04 	lds	r25, 0x042F
     454:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     458:	2f e0       	ldi	r18, 0x0F	; 15
     45a:	4d e2       	ldi	r20, 0x2D	; 45
     45c:	54 e0       	ldi	r21, 0x04	; 4
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	8b e4       	ldi	r24, 0x4B	; 75
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     46a:	2b e0       	ldi	r18, 0x0B	; 11
     46c:	4f ee       	ldi	r20, 0xEF	; 239
     46e:	54 e0       	ldi	r21, 0x04	; 4
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	87 e2       	ldi	r24, 0x27	; 39
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     47c:	10 92 bc 06 	sts	0x06BC, r1
     480:	10 92 bd 06 	sts	0x06BD, r1
     484:	10 92 be 06 	sts	0x06BE, r1
     488:	10 92 bf 06 	sts	0x06BF, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     494:	f3 cf       	rjmp	.-26     	; 0x47c <TaskStart+0x96>

00000496 <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	a3 97       	sbiw	r28, 0x23	; 35
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	INT8U positionOutput;
	INT8U notFound = 255;
	INT16U unitsPer100Degrees = 281;
	INT16U outputAngle = 0;

	TextMessage[0]  = '\r';
     4aa:	8d e0       	ldi	r24, 0x0D	; 13
     4ac:	89 83       	std	Y+1, r24	; 0x01
	TextMessage[1]  = '\r';
     4ae:	8a 83       	std	Y+2, r24	; 0x02
	TextMessage[2]  = 'M';
     4b0:	8d e4       	ldi	r24, 0x4D	; 77
     4b2:	8b 83       	std	Y+3, r24	; 0x03
	TextMessage[3]  = 'E';
     4b4:	85 e4       	ldi	r24, 0x45	; 69
     4b6:	8c 83       	std	Y+4, r24	; 0x04
	TextMessage[4]  = 'A';
     4b8:	81 e4       	ldi	r24, 0x41	; 65
     4ba:	8d 83       	std	Y+5, r24	; 0x05
	TextMessage[5]  = 'S';
     4bc:	83 e5       	ldi	r24, 0x53	; 83
     4be:	8e 83       	std	Y+6, r24	; 0x06
	TextMessage[6]  = '#';
     4c0:	83 e2       	ldi	r24, 0x23	; 35
     4c2:	8f 83       	std	Y+7, r24	; 0x07
	TextMessage[9] = ':';
     4c4:	8a e3       	ldi	r24, 0x3A	; 58
     4c6:	8a 87       	std	Y+10, r24	; 0x0a
	TextMessage[10] = ' ';
     4c8:	80 e2       	ldi	r24, 0x20	; 32
     4ca:	8b 87       	std	Y+11, r24	; 0x0b
	TextMessage[11] = ' ';
     4cc:	8c 87       	std	Y+12, r24	; 0x0c
	TextMessage[12] = ' ';
     4ce:	8d 87       	std	Y+13, r24	; 0x0d
	TextMessage[13] = ' ';
     4d0:	8e 87       	std	Y+14, r24	; 0x0e

    for (;;) {
	TextMessage[7] = ' ';
     4d2:	68 94       	set
     4d4:	aa 24       	eor	r10, r10
     4d6:	a5 f8       	bld	r10, 5
	TextMessage[8] = ' ';

	TextMessage[14] = ' ';
	TextMessage[15] = ' ';
	TextMessage[16] = ' ';
	TextMessage[17] = (char)223;
     4d8:	0f 2e       	mov	r0, r31
     4da:	ff ed       	ldi	r31, 0xDF	; 223
     4dc:	9f 2e       	mov	r9, r31
     4de:	f0 2d       	mov	r31, r0
     4e0:	71 2c       	mov	r7, r1
     4e2:	81 2c       	mov	r8, r1
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
		
		if (rotaryInput != notFound){
			outputAngle = (rotaryInput * unitsPer100Degrees);
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f9 e1       	ldi	r31, 0x19	; 25
     4e8:	cf 2e       	mov	r12, r31
     4ea:	dd 24       	eor	r13, r13
     4ec:	d3 94       	inc	r13
     4ee:	f0 2d       	mov	r31, r0
			char* p = &TextMessage[14];
			int shifter = outputAngle;
			char const digit[] = "0123456789";
			do{ //Move to where representation ends
				++p;
				shifter = shifter/10;
     4f0:	0f 2e       	mov	r0, r31
     4f2:	fa e0       	ldi	r31, 0x0A	; 10
     4f4:	ef 2e       	mov	r14, r31
     4f6:	f1 2c       	mov	r15, r1
     4f8:	f0 2d       	mov	r31, r0
				++p;
				shifter = shifter/10;
			}while(shifter);

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp%10];
     4fa:	0f 2e       	mov	r0, r31
     4fc:	fd ec       	ldi	r31, 0xCD	; 205
     4fe:	bf 2e       	mov	r11, r31
     500:	f0 2d       	mov	r31, r0
	TextMessage[11] = ' ';
	TextMessage[12] = ' ';
	TextMessage[13] = ' ';

    for (;;) {
	TextMessage[7] = ' ';
     502:	a8 86       	std	Y+8, r10	; 0x08
	TextMessage[8] = ' ';
     504:	a9 86       	std	Y+9, r10	; 0x09

	TextMessage[14] = ' ';
     506:	af 86       	std	Y+15, r10	; 0x0f
	TextMessage[15] = ' ';
     508:	a8 8a       	std	Y+16, r10	; 0x10
	TextMessage[16] = ' ';
     50a:	a9 8a       	std	Y+17, r10	; 0x11
	TextMessage[17] = (char)223;
     50c:	9a 8a       	std	Y+18, r9	; 0x12
	TextMessage[18] = '\0';
     50e:	1b 8a       	std	Y+19, r1	; 0x13
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     510:	86 b1       	in	r24, 0x06	; 6
     512:	e9 b1       	in	r30, 0x09	; 9
     514:	e0 7f       	andi	r30, 0xF0	; 240
     516:	8f 70       	andi	r24, 0x0F	; 15
     518:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	e8 59       	subi	r30, 0x98	; 152
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	e4 91       	lpm	r30, Z
		
		if (rotaryInput != notFound){
     522:	ef 3f       	cpi	r30, 0xFF	; 255
     524:	a9 f0       	breq	.+42     	; 0x550 <AngleOutputTask+0xba>
			outputAngle = (rotaryInput * unitsPer100Degrees);
     526:	ec 9d       	mul	r30, r12
     528:	90 01       	movw	r18, r0
     52a:	ed 9d       	mul	r30, r13
     52c:	30 0d       	add	r19, r0
     52e:	11 24       	eor	r1, r1
			outputAngle = outputAngle / 100;
     530:	36 95       	lsr	r19
     532:	27 95       	ror	r18
     534:	36 95       	lsr	r19
     536:	27 95       	ror	r18
     538:	ab e7       	ldi	r26, 0x7B	; 123
     53a:	b4 e1       	ldi	r27, 0x14	; 20
     53c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     540:	8c 01       	movw	r16, r24
     542:	16 95       	lsr	r17
     544:	07 95       	ror	r16
			OnscreenAngle = outputAngle;
     546:	10 93 73 02 	sts	0x0273, r17
     54a:	00 93 72 02 	sts	0x0272, r16
     54e:	02 c0       	rjmp	.+4      	; 0x554 <AngleOutputTask+0xbe>
     550:	07 2d       	mov	r16, r7
     552:	18 2d       	mov	r17, r8
		}

/*PRINT ANGLE*/
			char* p = &TextMessage[14];
			int shifter = outputAngle;
     554:	c8 01       	movw	r24, r16
			char const digit[] = "0123456789";
     556:	2b e0       	ldi	r18, 0x0B	; 11
     558:	ee e4       	ldi	r30, 0x4E	; 78
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	de 01       	movw	r26, r28
     55e:	59 96       	adiw	r26, 0x19	; 25
     560:	01 90       	ld	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	2a 95       	dec	r18
     566:	e1 f7       	brne	.-8      	; 0x560 <AngleOutputTask+0xca>
			outputAngle = outputAngle / 100;
			OnscreenAngle = outputAngle;
		}

/*PRINT ANGLE*/
			char* p = &TextMessage[14];
     568:	9e 01       	movw	r18, r28
     56a:	21 5f       	subi	r18, 0xF1	; 241
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
			int shifter = outputAngle;
			char const digit[] = "0123456789";
			do{ //Move to where representation ends
				++p;
     56e:	2f 5f       	subi	r18, 0xFF	; 255
     570:	3f 4f       	sbci	r19, 0xFF	; 255
				shifter = shifter/10;
     572:	b7 01       	movw	r22, r14
     574:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__divmodhi4>
     578:	cb 01       	movw	r24, r22
			}while(shifter);
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	c1 f7       	brne	.-16     	; 0x56e <AngleOutputTask+0xd8>
     57e:	f9 01       	movw	r30, r18

		do{ //Move back, inserting digits as you go
			*--p = digit[outputAngle%10];
     580:	98 01       	movw	r18, r16
     582:	ad ec       	ldi	r26, 0xCD	; 205
     584:	bc ec       	ldi	r27, 0xCC	; 204
     586:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     58a:	96 95       	lsr	r25
     58c:	87 95       	ror	r24
     58e:	96 95       	lsr	r25
     590:	87 95       	ror	r24
     592:	96 95       	lsr	r25
     594:	87 95       	ror	r24
     596:	9c 01       	movw	r18, r24
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	d8 01       	movw	r26, r16
     5ae:	a8 1b       	sub	r26, r24
     5b0:	b9 0b       	sbc	r27, r25
     5b2:	89 e1       	ldi	r24, 0x19	; 25
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	8c 0f       	add	r24, r28
     5b8:	9d 1f       	adc	r25, r29
     5ba:	a8 0f       	add	r26, r24
     5bc:	b9 1f       	adc	r27, r25
     5be:	8c 91       	ld	r24, X
     5c0:	82 93       	st	-Z, r24
			outputAngle = outputAngle/10;
     5c2:	98 01       	movw	r18, r16
     5c4:	ad ec       	ldi	r26, 0xCD	; 205
     5c6:	bc ec       	ldi	r27, 0xCC	; 204
     5c8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     5cc:	8c 01       	movw	r16, r24
     5ce:	16 95       	lsr	r17
     5d0:	07 95       	ror	r16
     5d2:	16 95       	lsr	r17
     5d4:	07 95       	ror	r16
     5d6:	16 95       	lsr	r17
     5d8:	07 95       	ror	r16
		}while(outputAngle);
     5da:	01 15       	cp	r16, r1
     5dc:	11 05       	cpc	r17, r1
     5de:	81 f6       	brne	.-96     	; 0x580 <AngleOutputTask+0xea>

/*PRINT MEAS #*/
			p = &TextMessage[7];
			tmp = measIndex + 1;
     5e0:	40 91 74 02 	lds	r20, 0x0274
     5e4:	4f 5f       	subi	r20, 0xFF	; 255
			shifter = tmp;
     5e6:	84 2f       	mov	r24, r20
     5e8:	90 e0       	ldi	r25, 0x00	; 0
			*--p = digit[outputAngle%10];
			outputAngle = outputAngle/10;
		}while(outputAngle);

/*PRINT MEAS #*/
			p = &TextMessage[7];
     5ea:	9e 01       	movw	r18, r28
     5ec:	28 5f       	subi	r18, 0xF8	; 248
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
			tmp = measIndex + 1;
			shifter = tmp;
			do{ //Move to where representation ends
				++p;
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	3f 4f       	sbci	r19, 0xFF	; 255
				shifter = shifter/10;
     5f4:	b7 01       	movw	r22, r14
     5f6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__divmodhi4>
     5fa:	cb 01       	movw	r24, r22
			}while(shifter);
     5fc:	00 97       	sbiw	r24, 0x00	; 0
     5fe:	c1 f7       	brne	.-16     	; 0x5f0 <AngleOutputTask+0x15a>
     600:	f9 01       	movw	r30, r18

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp%10];
     602:	4b 9d       	mul	r20, r11
     604:	81 2d       	mov	r24, r1
     606:	11 24       	eor	r1, r1
     608:	86 95       	lsr	r24
     60a:	86 95       	lsr	r24
     60c:	86 95       	lsr	r24
     60e:	98 2f       	mov	r25, r24
     610:	99 0f       	add	r25, r25
     612:	29 2f       	mov	r18, r25
     614:	22 0f       	add	r18, r18
     616:	22 0f       	add	r18, r18
     618:	92 0f       	add	r25, r18
     61a:	49 1b       	sub	r20, r25
     61c:	a9 e1       	ldi	r26, 0x19	; 25
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ac 0f       	add	r26, r28
     622:	bd 1f       	adc	r27, r29
     624:	a4 0f       	add	r26, r20
     626:	b1 1d       	adc	r27, r1
     628:	9c 91       	ld	r25, X
     62a:	92 93       	st	-Z, r25
			tmp = tmp/10;
     62c:	48 2f       	mov	r20, r24
		}while(tmp);
     62e:	81 11       	cpse	r24, r1
     630:	e8 cf       	rjmp	.-48     	; 0x602 <AngleOutputTask+0x16c>
		
		OSMboxPost(SerialTxMBox, (void *)&TextMessage);
     632:	be 01       	movw	r22, r28
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	80 91 2e 04 	lds	r24, 0x042E
     63c:	90 91 2f 04 	lds	r25, 0x042F
     640:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>

					
		OSTimeDly(0.5*OS_TICKS_PER_SEC);	// relinquish CPU
     644:	84 e6       	ldi	r24, 0x64	; 100
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
    }	
     64c:	5a cf       	rjmp	.-332    	; 0x502 <AngleOutputTask+0x6c>

0000064e <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	ae 97       	sbiw	r28, 0x2e	; 46
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp8;
	INT8U i;
	
				char* p;
				int shifter;
				char const digit[] = "0123456789";
     662:	8b e0       	ldi	r24, 0x0B	; 11
     664:	ee e4       	ldi	r30, 0x4E	; 78
     666:	f1 e0       	ldi	r31, 0x01	; 1
     668:	de 01       	movw	r26, r28
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	01 90       	ld	r0, Z+
     66e:	0d 92       	st	X+, r0
     670:	8a 95       	dec	r24
     672:	e1 f7       	brne	.-8      	; 0x66c <TimerTask+0x1e>
	
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	char  OUTPUTBUFFER[TRANSMIT_BUFFER_SIZE];

		TextMessage[0]  = '\r';
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	8c 87       	std	Y+12, r24	; 0x0c
		TextMessage[1]  = '\n';
     678:	8a e0       	ldi	r24, 0x0A	; 10
     67a:	8d 87       	std	Y+13, r24	; 0x0d
		TextMessage[2]  = 'A';
     67c:	21 e4       	ldi	r18, 0x41	; 65
     67e:	2e 87       	std	Y+14, r18	; 0x0e
		TextMessage[3]  = 'C';
     680:	83 e4       	ldi	r24, 0x43	; 67
     682:	8f 87       	std	Y+15, r24	; 0x0f
		TextMessage[4]  = 'T';
     684:	84 e5       	ldi	r24, 0x54	; 84
     686:	88 8b       	std	Y+16, r24	; 0x10
		TextMessage[5]  = ':';
     688:	9a e3       	ldi	r25, 0x3A	; 58
     68a:	99 8b       	std	Y+17, r25	; 0x11

		TextMessage[9]  = ' ';
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	8d 8b       	std	Y+21, r24	; 0x15
		TextMessage[10]  = 'P';
     690:	30 e5       	ldi	r19, 0x50	; 80
     692:	3e 8b       	std	Y+22, r19	; 0x16
		TextMessage[11]  = 'A';
     694:	2f 8b       	std	Y+23, r18	; 0x17
		TextMessage[12]  = 'S';
     696:	23 e5       	ldi	r18, 0x53	; 83
     698:	28 8f       	std	Y+24, r18	; 0x18
		TextMessage[13]  = ':';
     69a:	99 8f       	std	Y+25, r25	; 0x19
		TextMessage[17]  = ' ';
     69c:	8d 8f       	std	Y+29, r24	; 0x1d
		TextMessage[18] = '\0';
     69e:	1e 8e       	std	Y+30, r1	; 0x1e
	OSTimeDly (0.1*OS_TICKS_PER_SEC);
     6a0:	84 e1       	ldi	r24, 0x14	; 20
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
     6a8:	8e 01       	movw	r16, r28
     6aa:	0c 5d       	subi	r16, 0xDC	; 220
     6ac:	1f 4f       	sbci	r17, 0xFF	; 255
					++p;
					shifter = shifter/10;
				}while(shifter);

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp8%10];
     6ae:	30 2e       	mov	r3, r16
     6b0:	21 2e       	mov	r2, r17
		p = &TextMessage[6];
		shifter = measArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
			shifter = shifter/10;
     6b2:	0f 2e       	mov	r0, r31
     6b4:	fa e0       	ldi	r31, 0x0A	; 10
     6b6:	af 2e       	mov	r10, r31
     6b8:	b1 2c       	mov	r11, r1
     6ba:	f0 2d       	mov	r31, r0
		TextMessage[13]  = ':';
		TextMessage[17]  = ' ';
		TextMessage[18] = '\0';
	OSTimeDly (0.1*OS_TICKS_PER_SEC);
    for (;;) {
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
     6bc:	88 e2       	ldi	r24, 0x28	; 40
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
		TextMessage[6]  = ' ';
     6c4:	80 e2       	ldi	r24, 0x20	; 32
     6c6:	8a 8b       	std	Y+18, r24	; 0x12
		TextMessage[7]  = ' ';
     6c8:	8b 8b       	std	Y+19, r24	; 0x13
		TextMessage[8]  = ' ';
     6ca:	8c 8b       	std	Y+20, r24	; 0x14
		TextMessage[14]  = ' ';
     6cc:	8a 8f       	std	Y+26, r24	; 0x1a
		TextMessage[15]  = ' ';
     6ce:	8b 8f       	std	Y+27, r24	; 0x1b
		TextMessage[16]  = ' ';
     6d0:	8c 8f       	std	Y+28, r24	; 0x1c
		
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
     6d2:	83 b1       	in	r24, 0x03	; 3
     6d4:	87 70       	andi	r24, 0x07	; 7
     6d6:	f8 2e       	mov	r15, r24
		if(ButtonsInput == TOP_BUTTON_ONLY){
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	f8 12       	cpse	r15, r24
     6dc:	0c c0       	rjmp	.+24     	; 0x6f6 <TimerTask+0xa8>
			if (measIndex < NUM_MEAS-1){
     6de:	80 91 74 02 	lds	r24, 0x0274
     6e2:	8f 31       	cpi	r24, 0x1F	; 31
     6e4:	90 f5       	brcc	.+100    	; 0x74a <TimerTask+0xfc>
				measIndex++;
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	80 93 74 02 	sts	0x0274, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     6ec:	88 e2       	ldi	r24, 0x28	; 40
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     6f4:	2a c0       	rjmp	.+84     	; 0x74a <TimerTask+0xfc>
			}
		}
		if(ButtonsInput == BOTTOM_BUTTON_ONLY){
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	f9 12       	cpse	r15, r25
     6fa:	0c c0       	rjmp	.+24     	; 0x714 <TimerTask+0xc6>
			if(measIndex > 0){
     6fc:	80 91 74 02 	lds	r24, 0x0274
     700:	88 23       	and	r24, r24
     702:	c1 f1       	breq	.+112    	; 0x774 <TimerTask+0x126>
				measIndex--;
     704:	81 50       	subi	r24, 0x01	; 1
     706:	80 93 74 02 	sts	0x0274, r24
				OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     70a:	88 e2       	ldi	r24, 0x28	; 40
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     712:	30 c0       	rjmp	.+96     	; 0x774 <TimerTask+0x126>
			}
		}
		if(ButtonsInput == MIDDLE_BUTTON_ONLY){
     714:	a4 e0       	ldi	r26, 0x04	; 4
     716:	fa 12       	cpse	r15, r26
     718:	18 c0       	rjmp	.+48     	; 0x74a <TimerTask+0xfc>
			measArray[measIndex] = OnscreenAngle;
     71a:	20 91 74 02 	lds	r18, 0x0274
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	80 91 72 02 	lds	r24, 0x0272
     724:	90 91 73 02 	lds	r25, 0x0273
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	f9 01       	movw	r30, r18
     72e:	e0 51       	subi	r30, 0x10	; 16
     730:	fb 4f       	sbci	r31, 0xFB	; 251
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24
			passiveArray[measIndex] = OnscreenAngle;
     736:	f9 01       	movw	r30, r18
     738:	e0 5d       	subi	r30, 0xD0	; 208
     73a:	fb 4f       	sbci	r31, 0xFB	; 251
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     740:	88 e2       	ldi	r24, 0x28	; 40
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     748:	2a c0       	rjmp	.+84     	; 0x79e <TimerTask+0x150>
		}
		if(ButtonsInput == TOP_TWO_BUTTONS){
     74a:	b6 e0       	ldi	r27, 0x06	; 6
     74c:	fb 12       	cpse	r15, r27
     74e:	12 c0       	rjmp	.+36     	; 0x774 <TimerTask+0x126>
			measArray[measIndex] = OnscreenAngle;
     750:	e0 91 74 02 	lds	r30, 0x0274
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	e0 51       	subi	r30, 0x10	; 16
     75c:	fb 4f       	sbci	r31, 0xFB	; 251
     75e:	80 91 72 02 	lds	r24, 0x0272
     762:	90 91 73 02 	lds	r25, 0x0273
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     76a:	88 e2       	ldi	r24, 0x28	; 40
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     772:	df c0       	rjmp	.+446    	; 0x932 <__stack+0x33>
		}
		if(ButtonsInput == BUTTOM_TWO_BUTTONS){
     774:	e5 e0       	ldi	r30, 0x05	; 5
     776:	fe 12       	cpse	r15, r30
     778:	12 c0       	rjmp	.+36     	; 0x79e <TimerTask+0x150>
			passiveArray[measIndex] = OnscreenAngle;
     77a:	e0 91 74 02 	lds	r30, 0x0274
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e0 5d       	subi	r30, 0xD0	; 208
     786:	fb 4f       	sbci	r31, 0xFB	; 251
     788:	80 91 72 02 	lds	r24, 0x0272
     78c:	90 91 73 02 	lds	r25, 0x0273
     790:	91 83       	std	Z+1, r25	; 0x01
     792:	80 83       	st	Z, r24
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
     794:	88 e2       	ldi	r24, 0x28	; 40
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     79c:	ca c0       	rjmp	.+404    	; 0x932 <__stack+0x33>
		}
		if(ButtonsInput == ALL_3_BUTTONS){
     79e:	f7 e0       	ldi	r31, 0x07	; 7
     7a0:	ff 12       	cpse	r15, r31
     7a2:	c7 c0       	rjmp	.+398    	; 0x932 <__stack+0x33>
			OSMboxPost(SerialTxMBox, &start);
     7a4:	62 e0       	ldi	r22, 0x02	; 2
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	80 91 2e 04 	lds	r24, 0x042E
     7ac:	90 91 2f 04 	lds	r25, 0x042F
     7b0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>
			OSTimeDly(1*OS_TICKS_PER_SEC);
     7b4:	88 ec       	ldi	r24, 0xC8	; 200
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     7bc:	0f 2e       	mov	r0, r31
     7be:	f0 ef       	ldi	r31, 0xF0	; 240
     7c0:	cf 2e       	mov	r12, r31
     7c2:	f4 e0       	ldi	r31, 0x04	; 4
     7c4:	df 2e       	mov	r13, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f0 e3       	ldi	r31, 0x30	; 48
     7cc:	6f 2e       	mov	r6, r31
     7ce:	f5 e0       	ldi	r31, 0x05	; 5
     7d0:	7f 2e       	mov	r7, r31
     7d2:	f0 2d       	mov	r31, r0
     7d4:	ee 24       	eor	r14, r14
     7d6:	e3 94       	inc	r14
     7d8:	f1 2c       	mov	r15, r1
			for(i=0;i<NUM_MEAS;i++){
				
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
     7da:	68 94       	set
     7dc:	88 24       	eor	r8, r8
     7de:	85 f8       	bld	r8, 5
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
     7e0:	0f 2e       	mov	r0, r31
     7e2:	fb e0       	ldi	r31, 0x0B	; 11
     7e4:	5f 2e       	mov	r5, r31
     7e6:	f0 2d       	mov	r31, r0
					++p;
					shifter = shifter/10;
				}while(shifter);

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp8%10];
     7e8:	0f 2e       	mov	r0, r31
     7ea:	fd ec       	ldi	r31, 0xCD	; 205
     7ec:	9f 2e       	mov	r9, r31
     7ee:	f0 2d       	mov	r31, r0
					tmp8 = tmp8/10;
				}while(tmp8);


		/*Print that Meas Number's angle*/
				TextMessage[10] = '=';
     7f0:	0f 2e       	mov	r0, r31
     7f2:	fd e3       	ldi	r31, 0x3D	; 61
     7f4:	4f 2e       	mov	r4, r31
     7f6:	f0 2d       	mov	r31, r0
			OSMboxPost(SerialTxMBox, &start);
			OSTimeDly(1*OS_TICKS_PER_SEC);
			for(i=0;i<NUM_MEAS;i++){
				
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
     7f8:	8b 8a       	std	Y+19, r8	; 0x13
				TextMessage[8]  = ' ';
     7fa:	8c 8a       	std	Y+20, r8	; 0x14
				TextMessage[9]  = ' ';
     7fc:	8d 8a       	std	Y+21, r8	; 0x15
				TextMessage[10] = '\0';
     7fe:	1e 8a       	std	Y+22, r1	; 0x16
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
				tmp8 = i+1;
     800:	4e 2d       	mov	r20, r14
				char const digit[] = "0123456789";
     802:	ee e4       	ldi	r30, 0x4E	; 78
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	a3 2d       	mov	r26, r3
     808:	b2 2d       	mov	r27, r2
     80a:	85 2d       	mov	r24, r5
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	8a 95       	dec	r24
     812:	e1 f7       	brne	.-8      	; 0x80c <TimerTask+0x1be>
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
				INT16U shifter = i+1;
     814:	97 01       	movw	r18, r14
				/*Print Meas Number*/
				TextMessage[7]  = ' ';
				TextMessage[8]  = ' ';
				TextMessage[9]  = ' ';
				TextMessage[10] = '\0';
				char* p = &TextMessage[7];
     816:	fe 01       	movw	r30, r28
     818:	73 96       	adiw	r30, 0x13	; 19
				INT16U shifter = i+1;
				tmp8 = i+1;
				char const digit[] = "0123456789";
				do{ //Move to where representation ends
					++p;
     81a:	31 96       	adiw	r30, 0x01	; 1
					shifter = shifter/10;
     81c:	ad ec       	ldi	r26, 0xCD	; 205
     81e:	bc ec       	ldi	r27, 0xCC	; 204
     820:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     824:	9c 01       	movw	r18, r24
     826:	36 95       	lsr	r19
     828:	27 95       	ror	r18
     82a:	36 95       	lsr	r19
     82c:	27 95       	ror	r18
     82e:	36 95       	lsr	r19
     830:	27 95       	ror	r18
				}while(shifter);
     832:	21 15       	cp	r18, r1
     834:	31 05       	cpc	r19, r1
     836:	89 f7       	brne	.-30     	; 0x81a <TimerTask+0x1cc>

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp8%10];
     838:	49 9d       	mul	r20, r9
     83a:	81 2d       	mov	r24, r1
     83c:	11 24       	eor	r1, r1
     83e:	86 95       	lsr	r24
     840:	86 95       	lsr	r24
     842:	86 95       	lsr	r24
     844:	98 2f       	mov	r25, r24
     846:	99 0f       	add	r25, r25
     848:	29 2f       	mov	r18, r25
     84a:	22 0f       	add	r18, r18
     84c:	22 0f       	add	r18, r18
     84e:	92 0f       	add	r25, r18
     850:	49 1b       	sub	r20, r25
     852:	d8 01       	movw	r26, r16
     854:	a4 0f       	add	r26, r20
     856:	b1 1d       	adc	r27, r1
     858:	9c 91       	ld	r25, X
     85a:	92 93       	st	-Z, r25
					tmp8 = tmp8/10;
     85c:	48 2f       	mov	r20, r24
				}while(tmp8);
     85e:	81 11       	cpse	r24, r1
     860:	eb cf       	rjmp	.-42     	; 0x838 <TimerTask+0x1ea>


		/*Print that Meas Number's angle*/
				TextMessage[10] = '=';
     862:	4e 8a       	std	Y+22, r4	; 0x16
				TextMessage[11] = ' ';
     864:	8f 8a       	std	Y+23, r8	; 0x17
				TextMessage[12] = ' ';
     866:	88 8e       	std	Y+24, r8	; 0x18
				TextMessage[13] = ' ';
     868:	89 8e       	std	Y+25, r8	; 0x19
				TextMessage[14] = ' ';
     86a:	8a 8e       	std	Y+26, r8	; 0x1a

				p = &TextMessage[12];
				shifter = measArray[i];
     86c:	d6 01       	movw	r26, r12
     86e:	4d 91       	ld	r20, X+
     870:	5d 91       	ld	r21, X+
     872:	6d 01       	movw	r12, r26
     874:	9a 01       	movw	r18, r20
				TextMessage[11] = ' ';
				TextMessage[12] = ' ';
				TextMessage[13] = ' ';
				TextMessage[14] = ' ';

				p = &TextMessage[12];
     876:	fe 01       	movw	r30, r28
     878:	78 96       	adiw	r30, 0x18	; 24
				shifter = measArray[i];
				tmp16 = shifter;
				do{ //Move to where representation ends
					++p;
     87a:	31 96       	adiw	r30, 0x01	; 1
					shifter = shifter/10;
     87c:	ad ec       	ldi	r26, 0xCD	; 205
     87e:	bc ec       	ldi	r27, 0xCC	; 204
     880:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     884:	9c 01       	movw	r18, r24
     886:	36 95       	lsr	r19
     888:	27 95       	ror	r18
     88a:	36 95       	lsr	r19
     88c:	27 95       	ror	r18
     88e:	36 95       	lsr	r19
     890:	27 95       	ror	r18
				}while(shifter);
     892:	21 15       	cp	r18, r1
     894:	31 05       	cpc	r19, r1
     896:	89 f7       	brne	.-30     	; 0x87a <TimerTask+0x22c>
		

				do{ //Move back, inserting digits as you go
					*--p = digit[tmp16%10];
     898:	9a 01       	movw	r18, r20
     89a:	ad ec       	ldi	r26, 0xCD	; 205
     89c:	bc ec       	ldi	r27, 0xCC	; 204
     89e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     8a2:	96 95       	lsr	r25
     8a4:	87 95       	ror	r24
     8a6:	96 95       	lsr	r25
     8a8:	87 95       	ror	r24
     8aa:	96 95       	lsr	r25
     8ac:	87 95       	ror	r24
     8ae:	9c 01       	movw	r18, r24
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	82 0f       	add	r24, r18
     8c2:	93 1f       	adc	r25, r19
     8c4:	da 01       	movw	r26, r20
     8c6:	a8 1b       	sub	r26, r24
     8c8:	b9 0b       	sbc	r27, r25
     8ca:	a0 0f       	add	r26, r16
     8cc:	b1 1f       	adc	r27, r17
     8ce:	8c 91       	ld	r24, X
     8d0:	82 93       	st	-Z, r24
					tmp16 = tmp16/10;
     8d2:	9a 01       	movw	r18, r20
     8d4:	ad ec       	ldi	r26, 0xCD	; 205
     8d6:	bc ec       	ldi	r27, 0xCC	; 204
     8d8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     8dc:	ac 01       	movw	r20, r24
     8de:	56 95       	lsr	r21
     8e0:	47 95       	ror	r20
     8e2:	56 95       	lsr	r21
     8e4:	47 95       	ror	r20
     8e6:	56 95       	lsr	r21
     8e8:	47 95       	ror	r20
				}while(tmp16);
     8ea:	41 15       	cp	r20, r1
     8ec:	51 05       	cpc	r21, r1
     8ee:	a1 f6       	brne	.-88     	; 0x898 <TimerTask+0x24a>

				TextMessage[15] = '\0';
     8f0:	1b 8e       	std	Y+27, r1	; 0x1b
				OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     8f2:	be 01       	movw	r22, r28
     8f4:	64 5f       	subi	r22, 0xF4	; 244
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	80 91 2e 04 	lds	r24, 0x042E
     8fc:	90 91 2f 04 	lds	r25, 0x042F
     900:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>
				OSTimeDly(5);
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
     90c:	bf ef       	ldi	r27, 0xFF	; 255
     90e:	eb 1a       	sub	r14, r27
     910:	fb 0a       	sbc	r15, r27
			OSTimeDly(0.2 * OS_TICKS_PER_SEC);
		}
		if(ButtonsInput == ALL_3_BUTTONS){
			OSMboxPost(SerialTxMBox, &start);
			OSTimeDly(1*OS_TICKS_PER_SEC);
			for(i=0;i<NUM_MEAS;i++){
     912:	c6 14       	cp	r12, r6
     914:	d7 04       	cpc	r13, r7
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x1b>
     918:	6f cf       	rjmp	.-290    	; 0x7f8 <TimerTask+0x1aa>
				TextMessage[15] = '\0';
				OSMboxPost(SerialTxMBox, (void*)&TextMessage);
				OSTimeDly(5);
			}
			
			OSMboxPost(SerialTxMBox, &end);
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	71 e0       	ldi	r23, 0x01	; 1
     91e:	80 91 2e 04 	lds	r24, 0x042E
     922:	90 91 2f 04 	lds	r25, 0x042F
     926:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>
			OSTimeDly(1*OS_TICKS_PER_SEC);
     92a:	88 ec       	ldi	r24, 0xC8	; 200
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>


/*Print ACTIVE*/

		p = &TextMessage[6];
		shifter = measArray[measIndex];
     932:	e0 90 74 02 	lds	r14, 0x0274
     936:	f1 2c       	mov	r15, r1
     938:	f7 01       	movw	r30, r14
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e0 51       	subi	r30, 0x10	; 16
     940:	fb 4f       	sbci	r31, 0xFB	; 251
     942:	01 90       	ld	r0, Z+
     944:	f0 81       	ld	r31, Z
     946:	e0 2d       	mov	r30, r0
     948:	cf 01       	movw	r24, r30
		}


/*Print ACTIVE*/

		p = &TextMessage[6];
     94a:	9e 01       	movw	r18, r28
     94c:	2e 5e       	subi	r18, 0xEE	; 238
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
		shifter = measArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = shifter/10;
     954:	b5 01       	movw	r22, r10
     956:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__divmodhi4>
     95a:	cb 01       	movw	r24, r22
		}while(shifter);
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	c1 f7       	brne	.-16     	; 0x950 <__stack+0x51>
     960:	a9 01       	movw	r20, r18
		

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp16%10];
     962:	9f 01       	movw	r18, r30
     964:	ad ec       	ldi	r26, 0xCD	; 205
     966:	bc ec       	ldi	r27, 0xCC	; 204
     968:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	96 95       	lsr	r25
     972:	87 95       	ror	r24
     974:	96 95       	lsr	r25
     976:	87 95       	ror	r24
     978:	9c 01       	movw	r18, r24
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	82 0f       	add	r24, r18
     98c:	93 1f       	adc	r25, r19
     98e:	df 01       	movw	r26, r30
     990:	a8 1b       	sub	r26, r24
     992:	b9 0b       	sbc	r27, r25
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	8c 0f       	add	r24, r28
     99a:	9d 1f       	adc	r25, r29
     99c:	a8 0f       	add	r26, r24
     99e:	b9 1f       	adc	r27, r25
     9a0:	8c 91       	ld	r24, X
     9a2:	da 01       	movw	r26, r20
     9a4:	8e 93       	st	-X, r24
     9a6:	ad 01       	movw	r20, r26
			tmp16 = tmp16/10;
     9a8:	9f 01       	movw	r18, r30
     9aa:	ad ec       	ldi	r26, 0xCD	; 205
     9ac:	bc ec       	ldi	r27, 0xCC	; 204
     9ae:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     9b2:	fc 01       	movw	r30, r24
     9b4:	f6 95       	lsr	r31
     9b6:	e7 95       	ror	r30
     9b8:	f6 95       	lsr	r31
     9ba:	e7 95       	ror	r30
     9bc:	f6 95       	lsr	r31
     9be:	e7 95       	ror	r30
		}while(tmp16);
     9c0:	30 97       	sbiw	r30, 0x00	; 0
     9c2:	79 f6       	brne	.-98     	; 0x962 <__stack+0x63>

/* PRINT PASSIVE*/
		p = &TextMessage[14];
		shifter = passiveArray[measIndex];
     9c4:	f7 01       	movw	r30, r14
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e0 5d       	subi	r30, 0xD0	; 208
     9cc:	fb 4f       	sbci	r31, 0xFB	; 251
     9ce:	01 90       	ld	r0, Z+
     9d0:	f0 81       	ld	r31, Z
     9d2:	e0 2d       	mov	r30, r0
     9d4:	cf 01       	movw	r24, r30
			*--p = digit[tmp16%10];
			tmp16 = tmp16/10;
		}while(tmp16);

/* PRINT PASSIVE*/
		p = &TextMessage[14];
     9d6:	9e 01       	movw	r18, r28
     9d8:	26 5e       	subi	r18, 0xE6	; 230
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
		shifter = passiveArray[measIndex];
		tmp16 = shifter;
		do{ //Move to where representation ends
			++p;
     9dc:	2f 5f       	subi	r18, 0xFF	; 255
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
			shifter = shifter/10;
     9e0:	b5 01       	movw	r22, r10
     9e2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__divmodhi4>
     9e6:	cb 01       	movw	r24, r22
		}while(shifter);
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	c1 f7       	brne	.-16     	; 0x9dc <__stack+0xdd>
     9ec:	a9 01       	movw	r20, r18
		

		do{ //Move back, inserting digits as you go
			*--p = digit[tmp16%10];
     9ee:	9f 01       	movw	r18, r30
     9f0:	ad ec       	ldi	r26, 0xCD	; 205
     9f2:	bc ec       	ldi	r27, 0xCC	; 204
     9f4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	96 95       	lsr	r25
     9fe:	87 95       	ror	r24
     a00:	96 95       	lsr	r25
     a02:	87 95       	ror	r24
     a04:	9c 01       	movw	r18, r24
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
     a1a:	df 01       	movw	r26, r30
     a1c:	a8 1b       	sub	r26, r24
     a1e:	b9 0b       	sbc	r27, r25
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	8c 0f       	add	r24, r28
     a26:	9d 1f       	adc	r25, r29
     a28:	a8 0f       	add	r26, r24
     a2a:	b9 1f       	adc	r27, r25
     a2c:	8c 91       	ld	r24, X
     a2e:	da 01       	movw	r26, r20
     a30:	8e 93       	st	-X, r24
     a32:	ad 01       	movw	r20, r26
			tmp16 = tmp16/10;
     a34:	9f 01       	movw	r18, r30
     a36:	ad ec       	ldi	r26, 0xCD	; 205
     a38:	bc ec       	ldi	r27, 0xCC	; 204
     a3a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
     a3e:	fc 01       	movw	r30, r24
     a40:	f6 95       	lsr	r31
     a42:	e7 95       	ror	r30
     a44:	f6 95       	lsr	r31
     a46:	e7 95       	ror	r30
     a48:	f6 95       	lsr	r31
     a4a:	e7 95       	ror	r30
		}while(tmp16);
     a4c:	30 97       	sbiw	r30, 0x00	; 0
     a4e:	79 f6       	brne	.-98     	; 0x9ee <__stack+0xef>
		
		
		OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     a50:	be 01       	movw	r22, r28
     a52:	64 5f       	subi	r22, 0xF4	; 244
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	80 91 2e 04 	lds	r24, 0x042E
     a5a:	90 91 2f 04 	lds	r25, 0x042F
     a5e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <OSMboxPost>

    }	
     a62:	2c ce       	rjmp	.-936    	; 0x6bc <TimerTask+0x6e>

00000a64 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	cf e3       	ldi	r28, 0x3F	; 63
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 2.4;	//in Hz
     a6c:	0f 2e       	mov	r0, r31
     a6e:	fa e9       	ldi	r31, 0x9A	; 154
     a70:	8f 2e       	mov	r8, r31
     a72:	f0 2d       	mov	r31, r0
     a74:	0f 2e       	mov	r0, r31
     a76:	f9 e9       	ldi	r31, 0x99	; 153
     a78:	9f 2e       	mov	r9, r31
     a7a:	f0 2d       	mov	r31, r0
     a7c:	0f 2e       	mov	r0, r31
     a7e:	f9 e1       	ldi	r31, 0x19	; 25
     a80:	af 2e       	mov	r10, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	68 94       	set
     a86:	bb 24       	eor	r11, r11
     a88:	b6 f8       	bld	r11, 6
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     a8a:	41 2c       	mov	r4, r1
     a8c:	51 2c       	mov	r5, r1
     a8e:	61 2c       	mov	r6, r1
     a90:	0f 2e       	mov	r0, r31
     a92:	ff e3       	ldi	r31, 0x3F	; 63
     a94:	7f 2e       	mov	r7, r31
     a96:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     a98:	0f 2e       	mov	r0, r31
     a9a:	fd ec       	ldi	r31, 0xCD	; 205
     a9c:	2f 2e       	mov	r2, r31
     a9e:	f0 2d       	mov	r31, r0
     aa0:	0f 2e       	mov	r0, r31
     aa2:	fc ec       	ldi	r31, 0xCC	; 204
     aa4:	3f 2e       	mov	r3, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	0d c0       	rjmp	.+26     	; 0xac4 <LedTask+0x60>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     aaa:	0d ec       	ldi	r16, 0xCD	; 205
     aac:	1c ec       	ldi	r17, 0xCC	; 204
     aae:	dc ec       	ldi	r29, 0xCC	; 204
     ab0:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     ab2:	81 2c       	mov	r8, r1
     ab4:	91 2c       	mov	r9, r1
     ab6:	68 94       	set
     ab8:	aa 24       	eor	r10, r10
     aba:	a7 f8       	bld	r10, 7
     abc:	0f 2e       	mov	r0, r31
     abe:	ff e3       	ldi	r31, 0x3F	; 63
     ac0:	bf 2e       	mov	r11, r31
     ac2:	f0 2d       	mov	r31, r0
	float blink_freq = 2.4;	//in Hz
	float duty_cycle = 0.5; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     ac4:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     ac6:	28 2d       	mov	r18, r8
     ac8:	39 2d       	mov	r19, r9
     aca:	4a 2d       	mov	r20, r10
     acc:	5b 2d       	mov	r21, r11
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 e8       	ldi	r24, 0x80	; 128
     ad4:	9f e3       	ldi	r25, 0x3F	; 63
     ad6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__divsf3>
     ada:	6b 01       	movw	r12, r22
     adc:	7c 01       	movw	r14, r24
     ade:	20 2f       	mov	r18, r16
     ae0:	31 2f       	mov	r19, r17
     ae2:	4d 2f       	mov	r20, r29
     ae4:	5c 2f       	mov	r21, r28
     ae6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__mulsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	48 e4       	ldi	r20, 0x48	; 72
     af0:	53 e4       	ldi	r21, 0x43	; 67
     af2:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__mulsf3>
     af6:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
     afa:	cb 01       	movw	r24, r22
     afc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     b00:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     b02:	20 2f       	mov	r18, r16
     b04:	31 2f       	mov	r19, r17
     b06:	4d 2f       	mov	r20, r29
     b08:	5c 2f       	mov	r21, r28
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 e8       	ldi	r24, 0x80	; 128
     b10:	9f e3       	ldi	r25, 0x3F	; 63
     b12:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__subsf3>
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	c7 01       	movw	r24, r14
     b1c:	b6 01       	movw	r22, r12
     b1e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__mulsf3>
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	48 e4       	ldi	r20, 0x48	; 72
     b28:	53 e4       	ldi	r21, 0x43	; 67
     b2a:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__mulsf3>
     b2e:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
     b32:	cb 01       	movw	r24, r22
     b34:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     b38:	80 91 aa 03 	lds	r24, 0x03AA
     b3c:	90 91 ab 03 	lds	r25, 0x03AB
     b40:	0e 94 2f 09 	call	0x125e	; 0x125e <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	09 f4       	brne	.+2      	; 0xb4a <LedTask+0xe6>
     b48:	bd cf       	rjmp	.-134    	; 0xac4 <LedTask+0x60>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     b4a:	fc 01       	movw	r30, r24
     b4c:	80 81       	ld	r24, Z
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	c9 f0       	breq	.+50     	; 0xb84 <LedTask+0x120>
     b52:	08 f4       	brcc	.+2      	; 0xb56 <LedTask+0xf2>
     b54:	aa cf       	rjmp	.-172    	; 0xaaa <LedTask+0x46>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	09 f0       	breq	.+2      	; 0xb5c <LedTask+0xf8>
     b5a:	b4 cf       	rjmp	.-152    	; 0xac4 <LedTask+0x60>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     b5c:	04 2d       	mov	r16, r4
     b5e:	15 2d       	mov	r17, r5
     b60:	d6 2d       	mov	r29, r6
     b62:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     b64:	0f 2e       	mov	r0, r31
     b66:	fa e9       	ldi	r31, 0x9A	; 154
     b68:	8f 2e       	mov	r8, r31
     b6a:	f0 2d       	mov	r31, r0
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f9 e9       	ldi	r31, 0x99	; 153
     b70:	9f 2e       	mov	r9, r31
     b72:	f0 2d       	mov	r31, r0
     b74:	0f 2e       	mov	r0, r31
     b76:	f9 e1       	ldi	r31, 0x19	; 25
     b78:	af 2e       	mov	r10, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	68 94       	set
     b7e:	bb 24       	eor	r11, r11
     b80:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     b82:	a0 cf       	rjmp	.-192    	; 0xac4 <LedTask+0x60>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     b84:	04 2d       	mov	r16, r4
     b86:	15 2d       	mov	r17, r5
     b88:	d6 2d       	mov	r29, r6
     b8a:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     b8c:	82 2c       	mov	r8, r2
     b8e:	93 2c       	mov	r9, r3
     b90:	0f 2e       	mov	r0, r31
     b92:	fc ec       	ldi	r31, 0xCC	; 204
     b94:	af 2e       	mov	r10, r31
     b96:	f0 2d       	mov	r31, r0
     b98:	0f 2e       	mov	r0, r31
     b9a:	fe e3       	ldi	r31, 0x3E	; 62
     b9c:	bf 2e       	mov	r11, r31
     b9e:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     ba0:	91 cf       	rjmp	.-222    	; 0xac4 <LedTask+0x60>

00000ba2 <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	69 97       	sbiw	r28, 0x19	; 25
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f1 ec       	ldi	r31, 0xC1	; 193
     bba:	cf 2e       	mov	r12, r31
     bbc:	d1 2c       	mov	r13, r1
     bbe:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     bc0:	61 2c       	mov	r6, r1
     bc2:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     bc4:	0f 2e       	mov	r0, r31
     bc6:	fe ef       	ldi	r31, 0xFE	; 254
     bc8:	af 2e       	mov	r10, r31
     bca:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     bcc:	68 94       	set
     bce:	88 24       	eor	r8, r8
     bd0:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     bd2:	0f 2e       	mov	r0, r31
     bd4:	f0 ec       	ldi	r31, 0xC0	; 192
     bd6:	9f 2e       	mov	r9, r31
     bd8:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     bda:	0f 2e       	mov	r0, r31
     bdc:	f6 ec       	ldi	r31, 0xC6	; 198
     bde:	ef 2e       	mov	r14, r31
     be0:	f1 2c       	mov	r15, r1
     be2:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (5);
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     bec:	80 91 2e 04 	lds	r24, 0x042E
     bf0:	90 91 2f 04 	lds	r25, 0x042F
     bf4:	0e 94 2f 09 	call	0x125e	; 0x125e <OSMboxAccept>
		
		if(msg != NULL){
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	09 f4       	brne	.+2      	; 0xbfe <SerialTransmitTask+0x5c>
     bfc:	6f c0       	rjmp	.+222    	; 0xcdc <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     bfe:	bc 01       	movw	r22, r24
     c00:	ce 01       	movw	r24, r28
     c02:	02 96       	adiw	r24, 0x02	; 2
     c04:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     c08:	f6 01       	movw	r30, r12
     c0a:	80 81       	ld	r24, Z
     c0c:	86 60       	ori	r24, 0x06	; 6
     c0e:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	88 23       	and	r24, r24
     c14:	09 f4       	brne	.+2      	; 0xc18 <SerialTransmitTask+0x76>
     c16:	62 c0       	rjmp	.+196    	; 0xcdc <SerialTransmitTask+0x13a>
     c18:	06 2d       	mov	r16, r6
     c1a:	17 2d       	mov	r17, r7
     c1c:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     c1e:	8d 30       	cpi	r24, 0x0D	; 13
     c20:	c9 f4       	brne	.+50     	; 0xc54 <SerialTransmitTask+0xb2>
     c22:	c8 01       	movw	r24, r16
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	e2 e0       	ldi	r30, 0x02	; 2
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	ec 0f       	add	r30, r28
     c2c:	fd 1f       	adc	r31, r29
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	20 81       	ld	r18, Z
     c34:	2d 30       	cpi	r18, 0x0D	; 13
     c36:	71 f4       	brne	.+28     	; 0xc54 <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     c38:	e2 e0       	ldi	r30, 0x02	; 2
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ec 0f       	add	r30, r28
     c3e:	fd 1f       	adc	r31, r29
     c40:	e0 0f       	add	r30, r16
     c42:	f1 1f       	adc	r31, r17
     c44:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     c46:	e2 e0       	ldi	r30, 0x02	; 2
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ec 0f       	add	r30, r28
     c4c:	fd 1f       	adc	r31, r29
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     c54:	e2 e0       	ldi	r30, 0x02	; 2
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	ec 0f       	add	r30, r28
     c5a:	fd 1f       	adc	r31, r29
     c5c:	e0 0f       	add	r30, r16
     c5e:	f1 1f       	adc	r31, r17
     c60:	80 81       	ld	r24, Z
     c62:	8d 30       	cpi	r24, 0x0D	; 13
     c64:	c9 f4       	brne	.+50     	; 0xc98 <SerialTransmitTask+0xf6>
     c66:	c8 01       	movw	r24, r16
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	e2 e0       	ldi	r30, 0x02	; 2
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	ec 0f       	add	r30, r28
     c70:	fd 1f       	adc	r31, r29
     c72:	e8 0f       	add	r30, r24
     c74:	f9 1f       	adc	r31, r25
     c76:	20 81       	ld	r18, Z
     c78:	2a 30       	cpi	r18, 0x0A	; 10
     c7a:	71 f4       	brne	.+28     	; 0xc98 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     c7c:	e2 e0       	ldi	r30, 0x02	; 2
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	ec 0f       	add	r30, r28
     c82:	fd 1f       	adc	r31, r29
     c84:	e0 0f       	add	r30, r16
     c86:	f1 1f       	adc	r31, r17
     c88:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     c8a:	e2 e0       	ldi	r30, 0x02	; 2
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	ec 0f       	add	r30, r28
     c90:	fd 1f       	adc	r31, r29
     c92:	e8 0f       	add	r30, r24
     c94:	f9 1f       	adc	r31, r25
     c96:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     c98:	ae 01       	movw	r20, r28
     c9a:	4f 5f       	subi	r20, 0xFF	; 255
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 91 30 05 	lds	r24, 0x0530
     ca6:	90 91 31 05 	lds	r25, 0x0531
     caa:	0e 94 9f 09 	call	0x133e	; 0x133e <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     cae:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     cb0:	e2 e0       	ldi	r30, 0x02	; 2
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	ec 0f       	add	r30, r28
     cb6:	fd 1f       	adc	r31, r29
     cb8:	e0 0f       	add	r30, r16
     cba:	f1 1f       	adc	r31, r17
     cbc:	80 81       	ld	r24, Z
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     cc2:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     cc4:	b3 94       	inc	r11
     cc6:	0b 2d       	mov	r16, r11
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	e2 e0       	ldi	r30, 0x02	; 2
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	ec 0f       	add	r30, r28
     cd0:	fd 1f       	adc	r31, r29
     cd2:	e0 0f       	add	r30, r16
     cd4:	f1 1f       	adc	r31, r17
     cd6:	80 81       	ld	r24, Z
     cd8:	81 11       	cpse	r24, r1
     cda:	a1 cf       	rjmp	.-190    	; 0xc1e <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     cdc:	f6 01       	movw	r30, r12
     cde:	80 81       	ld	r24, Z
     ce0:	89 7f       	andi	r24, 0xF9	; 249
     ce2:	80 83       	st	Z, r24
	}
     ce4:	7f cf       	rjmp	.-258    	; 0xbe4 <SerialTransmitTask+0x42>

00000ce6 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     ce6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     cea:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OSInit>
	
	USART_Init();
     cee:	0e 94 cd 06 	call	0xd9a	; 0xd9a <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 43 09 	call	0x1286	; 0x1286 <OSMboxCreate>
     cfa:	90 93 ab 03 	sts	0x03AB, r25
     cfe:	80 93 aa 03 	sts	0x03AA, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 43 09 	call	0x1286	; 0x1286 <OSMboxCreate>
     d0a:	90 93 2f 04 	sts	0x042F, r25
     d0e:	80 93 2e 04 	sts	0x042E, r24
	SerialTxSem = OSSemCreate(1);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 82 09 	call	0x1304	; 0x1304 <OSSemCreate>
     d1a:	90 93 31 05 	sts	0x0531, r25
     d1e:	80 93 30 05 	sts	0x0530, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	41 eb       	ldi	r20, 0xB1	; 177
     d26:	56 e0       	ldi	r21, 0x06	; 6
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	83 ef       	ldi	r24, 0xF3	; 243
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     d34:	0e 94 5e 08 	call	0x10bc	; 0x10bc <OSStart>
     d38:	ff cf       	rjmp	.-2      	; 0xd38 <main+0x52>

00000d3a <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     d3a:	f8 94       	cli
	WatchDogReset();
     d3c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     d40:	84 b7       	in	r24, 0x34	; 52
     d42:	87 7f       	andi	r24, 0xF7	; 247
     d44:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     d46:	e0 e6       	ldi	r30, 0x60	; 96
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 61       	ori	r24, 0x18	; 24
     d4e:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     d50:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     d52:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     d54:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     d56:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     d58:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     d5a:	87 b1       	in	r24, 0x07	; 7
     d5c:	80 7f       	andi	r24, 0xF0	; 240
     d5e:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     d60:	8a b1       	in	r24, 0x0a	; 10
     d62:	8f 70       	andi	r24, 0x0F	; 15
     d64:	8a b9       	out	0x0a, r24	; 10
	
	// END TEAM ROTARY
	
	//BUTTON
	
	DDRB |= _BV(DDB0); //B0 as input
     d66:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(DDB1); //B1 as input
     d68:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(DDB2); //B2 as input
     d6a:	22 9a       	sbi	0x04, 2	; 4
	// END BUTTON
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     d70:	8d e0       	ldi	r24, 0x0D	; 13
     d72:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     d74:	82 e1       	ldi	r24, 0x12	; 18
     d76:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     d78:	ee e6       	ldi	r30, 0x6E	; 110
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     d82:	e4 e6       	ldi	r30, 0x64	; 100
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8f 7d       	andi	r24, 0xDF	; 223
     d8a:	80 83       	st	Z, r24


/* setup USART here  */	

	UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     d8c:	e1 ec       	ldi	r30, 0xC1	; 193
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	89 7f       	andi	r24, 0xF9	; 249
     d94:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     d96:	78 94       	sei
     d98:	08 95       	ret

00000d9a <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     d9a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     d9e:	87 e6       	ldi	r24, 0x67	; 103
     da0:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     da4:	88 e1       	ldi	r24, 0x18	; 24
     da6:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     daa:	8e e0       	ldi	r24, 0x0E	; 14
     dac:	80 93 c2 00 	sts	0x00C2, r24
     db0:	08 95       	ret

00000db2 <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     db2:	fa 01       	movw	r30, r20
     db4:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     de2:	31 97       	sbiw	r30, 0x01	; 1
     de4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     de6:	31 97       	sbiw	r30, 0x01	; 1
     de8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     dee:	31 97       	sbiw	r30, 0x01	; 1
     df0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     df2:	31 97       	sbiw	r30, 0x01	; 1
     df4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     e06:	31 97       	sbiw	r30, 0x01	; 1
     e08:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     e22:	31 97       	sbiw	r30, 0x01	; 1
     e24:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     e2e:	31 97       	sbiw	r30, 0x01	; 1
     e30:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     e40:	ca 01       	movw	r24, r20
     e42:	83 97       	sbiw	r24, 0x23	; 35
     e44:	08 95       	ret

00000e46 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     e46:	08 95       	ret

00000e48 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     e48:	08 95       	ret

00000e4a <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     e4a:	08 95       	ret

00000e4c <OSTaskIdle>:
     e4c:	f8 94       	cli
     e4e:	78 94       	sei
     e50:	fd cf       	rjmp	.-6      	; 0xe4c <OSTaskIdle>

00000e52 <OSEventTaskRdy>:
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	fc 01       	movw	r30, r24
     e5c:	05 85       	ldd	r16, Z+13	; 0x0d
     e5e:	e0 2f       	mov	r30, r16
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	e6 59       	subi	r30, 0x96	; 150
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	10 81       	ld	r17, Z
     e68:	21 2f       	mov	r18, r17
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	d9 01       	movw	r26, r18
     e6e:	a6 59       	subi	r26, 0x96	; 150
     e70:	bd 4f       	sbci	r27, 0xFD	; 253
     e72:	dc 91       	ld	r29, X
     e74:	fc 01       	movw	r30, r24
     e76:	e2 0f       	add	r30, r18
     e78:	f3 1f       	adc	r31, r19
     e7a:	52 81       	ldd	r21, Z+2	; 0x02
     e7c:	a5 2f       	mov	r26, r21
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	a6 59       	subi	r26, 0x96	; 150
     e82:	be 4f       	sbci	r27, 0xFE	; 254
     e84:	cc 91       	ld	r28, X
     e86:	ac 2f       	mov	r26, r28
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	a6 59       	subi	r26, 0x96	; 150
     e8c:	bd 4f       	sbci	r27, 0xFD	; 253
     e8e:	ac 91       	ld	r26, X
     e90:	11 0f       	add	r17, r17
     e92:	11 0f       	add	r17, r17
     e94:	11 0f       	add	r17, r17
     e96:	c1 0f       	add	r28, r17
     e98:	ba 2f       	mov	r27, r26
     e9a:	b0 95       	com	r27
     e9c:	5b 23       	and	r21, r27
     e9e:	52 83       	std	Z+2, r21	; 0x02
     ea0:	51 11       	cpse	r21, r1
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <OSEventTaskRdy+0x5c>
     ea4:	5d 2f       	mov	r21, r29
     ea6:	50 95       	com	r21
     ea8:	05 23       	and	r16, r21
     eaa:	fc 01       	movw	r30, r24
     eac:	05 87       	std	Z+13, r16	; 0x0d
     eae:	ec 2f       	mov	r30, r28
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	e7 59       	subi	r30, 0x97	; 151
     eb8:	f8 4f       	sbci	r31, 0xF8	; 248
     eba:	01 90       	ld	r0, Z+
     ebc:	f0 81       	ld	r31, Z
     ebe:	e0 2d       	mov	r30, r0
     ec0:	13 86       	std	Z+11, r1	; 0x0b
     ec2:	12 86       	std	Z+10, r1	; 0x0a
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	71 87       	std	Z+9, r23	; 0x09
     eca:	60 87       	std	Z+8, r22	; 0x08
     ecc:	40 95       	com	r20
     ece:	84 85       	ldd	r24, Z+12	; 0x0c
     ed0:	48 23       	and	r20, r24
     ed2:	44 87       	std	Z+12, r20	; 0x0c
     ed4:	41 11       	cpse	r20, r1
     ed6:	0b c0       	rjmp	.+22     	; 0xeee <OSEventTaskRdy+0x9c>
     ed8:	80 91 ca 06 	lds	r24, 0x06CA
     edc:	d8 2b       	or	r29, r24
     ede:	d0 93 ca 06 	sts	0x06CA, r29
     ee2:	f9 01       	movw	r30, r18
     ee4:	e5 53       	subi	r30, 0x35	; 53
     ee6:	f9 4f       	sbci	r31, 0xF9	; 249
     ee8:	80 81       	ld	r24, Z
     eea:	a8 2b       	or	r26, r24
     eec:	a0 83       	st	Z, r26
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <OSEventTaskWait>:
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	e0 91 d6 06 	lds	r30, 0x06D6
     f00:	f0 91 d7 06 	lds	r31, 0x06D7
     f04:	97 83       	std	Z+7, r25	; 0x07
     f06:	86 83       	std	Z+6, r24	; 0x06
     f08:	a7 85       	ldd	r26, Z+15	; 0x0f
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	20 89       	ldd	r18, Z+16	; 0x10
     f0e:	ed 01       	movw	r28, r26
     f10:	c5 53       	subi	r28, 0x35	; 53
     f12:	d9 4f       	sbci	r29, 0xF9	; 249
     f14:	42 2f       	mov	r20, r18
     f16:	40 95       	com	r20
     f18:	38 81       	ld	r19, Y
     f1a:	34 23       	and	r19, r20
     f1c:	38 83       	st	Y, r19
     f1e:	31 11       	cpse	r19, r1
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <OSEventTaskWait+0x38>
     f22:	31 89       	ldd	r19, Z+17	; 0x11
     f24:	30 95       	com	r19
     f26:	40 91 ca 06 	lds	r20, 0x06CA
     f2a:	34 23       	and	r19, r20
     f2c:	30 93 ca 06 	sts	0x06CA, r19
     f30:	a8 0f       	add	r26, r24
     f32:	b9 1f       	adc	r27, r25
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	3c 91       	ld	r19, X
     f38:	12 97       	sbiw	r26, 0x02	; 2
     f3a:	23 2b       	or	r18, r19
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	2c 93       	st	X, r18
     f40:	dc 01       	movw	r26, r24
     f42:	1d 96       	adiw	r26, 0x0d	; 13
     f44:	3c 91       	ld	r19, X
     f46:	1d 97       	sbiw	r26, 0x0d	; 13
     f48:	21 89       	ldd	r18, Z+17	; 0x11
     f4a:	23 2b       	or	r18, r19
     f4c:	1d 96       	adiw	r26, 0x0d	; 13
     f4e:	2c 93       	st	X, r18
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <OSEventTO>:
     f56:	e0 91 d6 06 	lds	r30, 0x06D6
     f5a:	f0 91 d7 06 	lds	r31, 0x06D7
     f5e:	27 85       	ldd	r18, Z+15	; 0x0f
     f60:	dc 01       	movw	r26, r24
     f62:	a2 0f       	add	r26, r18
     f64:	b1 1d       	adc	r27, r1
     f66:	20 89       	ldd	r18, Z+16	; 0x10
     f68:	20 95       	com	r18
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	3c 91       	ld	r19, X
     f6e:	12 97       	sbiw	r26, 0x02	; 2
     f70:	23 23       	and	r18, r19
     f72:	12 96       	adiw	r26, 0x02	; 2
     f74:	2c 93       	st	X, r18
     f76:	21 11       	cpse	r18, r1
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <OSEventTO+0x36>
     f7a:	21 89       	ldd	r18, Z+17	; 0x11
     f7c:	20 95       	com	r18
     f7e:	dc 01       	movw	r26, r24
     f80:	1d 96       	adiw	r26, 0x0d	; 13
     f82:	3c 91       	ld	r19, X
     f84:	1d 97       	sbiw	r26, 0x0d	; 13
     f86:	23 23       	and	r18, r19
     f88:	1d 96       	adiw	r26, 0x0d	; 13
     f8a:	2c 93       	st	X, r18
     f8c:	14 86       	std	Z+12, r1	; 0x0c
     f8e:	17 82       	std	Z+7, r1	; 0x07
     f90:	16 82       	std	Z+6, r1	; 0x06
     f92:	08 95       	ret

00000f94 <OSEventWaitListInit>:
     f94:	fc 01       	movw	r30, r24
     f96:	15 86       	std	Z+13, r1	; 0x0d
     f98:	32 96       	adiw	r30, 0x02	; 2
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	11 92       	st	Z+, r1
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	88 30       	cpi	r24, 0x08	; 8
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <OSEventWaitListInit+0x8>
     fa4:	08 95       	ret

00000fa6 <OSIntExit>:
     fa6:	f8 94       	cli
     fa8:	80 91 d5 06 	lds	r24, 0x06D5
     fac:	81 50       	subi	r24, 0x01	; 1
     fae:	80 93 d5 06 	sts	0x06D5, r24
     fb2:	90 91 b2 06 	lds	r25, 0x06B2
     fb6:	89 2b       	or	r24, r25
     fb8:	e1 f5       	brne	.+120    	; 0x1032 <OSIntExit+0x8c>
     fba:	e0 91 ca 06 	lds	r30, 0x06CA
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	e6 59       	subi	r30, 0x96	; 150
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	80 81       	ld	r24, Z
     fc6:	80 93 a9 03 	sts	0x03A9, r24
     fca:	e8 2f       	mov	r30, r24
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	e5 53       	subi	r30, 0x35	; 53
     fd0:	f9 4f       	sbci	r31, 0xF9	; 249
     fd2:	e0 81       	ld	r30, Z
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	e6 59       	subi	r30, 0x96	; 150
     fd8:	fe 4f       	sbci	r31, 0xFE	; 254
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	88 0f       	add	r24, r24
     fe0:	90 81       	ld	r25, Z
     fe2:	89 0f       	add	r24, r25
     fe4:	80 93 b8 06 	sts	0x06B8, r24
     fe8:	90 91 b9 06 	lds	r25, 0x06B9
     fec:	89 17       	cp	r24, r25
     fee:	09 f1       	breq	.+66     	; 0x1032 <OSIntExit+0x8c>
     ff0:	e8 2f       	mov	r30, r24
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e7 59       	subi	r30, 0x97	; 151
     ffa:	f8 4f       	sbci	r31, 0xF8	; 248
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	90 93 c9 06 	sts	0x06C9, r25
    1004:	80 93 c8 06 	sts	0x06C8, r24
    1008:	80 91 bc 06 	lds	r24, 0x06BC
    100c:	90 91 bd 06 	lds	r25, 0x06BD
    1010:	a0 91 be 06 	lds	r26, 0x06BE
    1014:	b0 91 bf 06 	lds	r27, 0x06BF
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	a1 1d       	adc	r26, r1
    101c:	b1 1d       	adc	r27, r1
    101e:	80 93 bc 06 	sts	0x06BC, r24
    1022:	90 93 bd 06 	sts	0x06BD, r25
    1026:	a0 93 be 06 	sts	0x06BE, r26
    102a:	b0 93 bf 06 	sts	0x06BF, r27
    102e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
    1032:	78 94       	sei
    1034:	08 95       	ret

00001036 <OSSched>:
    1036:	f8 94       	cli
    1038:	90 91 d5 06 	lds	r25, 0x06D5
    103c:	80 91 b2 06 	lds	r24, 0x06B2
    1040:	89 2b       	or	r24, r25
    1042:	d1 f5       	brne	.+116    	; 0x10b8 <OSSched+0x82>
    1044:	e0 91 ca 06 	lds	r30, 0x06CA
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	e6 59       	subi	r30, 0x96	; 150
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	80 81       	ld	r24, Z
    1050:	e8 2f       	mov	r30, r24
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e5 53       	subi	r30, 0x35	; 53
    1056:	f9 4f       	sbci	r31, 0xF9	; 249
    1058:	e0 81       	ld	r30, Z
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e6 59       	subi	r30, 0x96	; 150
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	88 0f       	add	r24, r24
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	90 81       	ld	r25, Z
    1068:	e8 2f       	mov	r30, r24
    106a:	e9 0f       	add	r30, r25
    106c:	e0 93 b8 06 	sts	0x06B8, r30
    1070:	80 91 b9 06 	lds	r24, 0x06B9
    1074:	e8 17       	cp	r30, r24
    1076:	01 f1       	breq	.+64     	; 0x10b8 <OSSched+0x82>
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	e7 59       	subi	r30, 0x97	; 151
    1080:	f8 4f       	sbci	r31, 0xF8	; 248
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	90 93 c9 06 	sts	0x06C9, r25
    108a:	80 93 c8 06 	sts	0x06C8, r24
    108e:	80 91 bc 06 	lds	r24, 0x06BC
    1092:	90 91 bd 06 	lds	r25, 0x06BD
    1096:	a0 91 be 06 	lds	r26, 0x06BE
    109a:	b0 91 bf 06 	lds	r27, 0x06BF
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	a1 1d       	adc	r26, r1
    10a2:	b1 1d       	adc	r27, r1
    10a4:	80 93 bc 06 	sts	0x06BC, r24
    10a8:	90 93 bd 06 	sts	0x06BD, r25
    10ac:	a0 93 be 06 	sts	0x06BE, r26
    10b0:	b0 93 bf 06 	sts	0x06BF, r27
    10b4:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
    10b8:	78 94       	sei
    10ba:	08 95       	ret

000010bc <OSStart>:
    10bc:	80 91 b3 06 	lds	r24, 0x06B3
    10c0:	81 11       	cpse	r24, r1
    10c2:	26 c0       	rjmp	.+76     	; 0x1110 <OSStart+0x54>
    10c4:	e0 91 ca 06 	lds	r30, 0x06CA
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	e6 59       	subi	r30, 0x96	; 150
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	e0 81       	ld	r30, Z
    10d0:	ae 2f       	mov	r26, r30
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	a5 53       	subi	r26, 0x35	; 53
    10d6:	b9 4f       	sbci	r27, 0xF9	; 249
    10d8:	ac 91       	ld	r26, X
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	a6 59       	subi	r26, 0x96	; 150
    10de:	be 4f       	sbci	r27, 0xFE	; 254
    10e0:	ee 0f       	add	r30, r30
    10e2:	ee 0f       	add	r30, r30
    10e4:	ee 0f       	add	r30, r30
    10e6:	8c 91       	ld	r24, X
    10e8:	e8 0f       	add	r30, r24
    10ea:	e0 93 b8 06 	sts	0x06B8, r30
    10ee:	e0 93 b9 06 	sts	0x06B9, r30
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	e7 59       	subi	r30, 0x97	; 151
    10fa:	f8 4f       	sbci	r31, 0xF8	; 248
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	90 93 c9 06 	sts	0x06C9, r25
    1104:	80 93 c8 06 	sts	0x06C8, r24
    1108:	90 93 d7 06 	sts	0x06D7, r25
    110c:	80 93 d6 06 	sts	0x06D6, r24
    1110:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
    1114:	08 95       	ret

00001116 <OSTCBInit>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	f8 94       	cli
    111c:	e0 91 c4 06 	lds	r30, 0x06C4
    1120:	f0 91 c5 06 	lds	r31, 0x06C5
    1124:	30 97       	sbiw	r30, 0x00	; 0
    1126:	09 f4       	brne	.+2      	; 0x112a <OSTCBInit+0x14>
    1128:	4f c0       	rjmp	.+158    	; 0x11c8 <OSTCBInit+0xb2>
    112a:	22 81       	ldd	r18, Z+2	; 0x02
    112c:	33 81       	ldd	r19, Z+3	; 0x03
    112e:	30 93 c5 06 	sts	0x06C5, r19
    1132:	20 93 c4 06 	sts	0x06C4, r18
    1136:	78 94       	sei
    1138:	71 83       	std	Z+1, r23	; 0x01
    113a:	60 83       	st	Z, r22
    113c:	85 87       	std	Z+13, r24	; 0x0d
    113e:	14 86       	std	Z+12, r1	; 0x0c
    1140:	13 86       	std	Z+11, r1	; 0x0b
    1142:	12 86       	std	Z+10, r1	; 0x0a
    1144:	c8 2f       	mov	r28, r24
    1146:	c6 95       	lsr	r28
    1148:	c6 95       	lsr	r28
    114a:	c6 95       	lsr	r28
    114c:	c7 87       	std	Z+15, r28	; 0x0f
    114e:	d0 e0       	ldi	r29, 0x00	; 0
    1150:	c6 59       	subi	r28, 0x96	; 150
    1152:	dd 4f       	sbci	r29, 0xFD	; 253
    1154:	98 81       	ld	r25, Y
    1156:	91 8b       	std	Z+17, r25	; 0x11
    1158:	c8 2f       	mov	r28, r24
    115a:	c7 70       	andi	r28, 0x07	; 7
    115c:	c6 87       	std	Z+14, r28	; 0x0e
    115e:	d0 e0       	ldi	r29, 0x00	; 0
    1160:	c6 59       	subi	r28, 0x96	; 150
    1162:	dd 4f       	sbci	r29, 0xFD	; 253
    1164:	98 81       	ld	r25, Y
    1166:	90 8b       	std	Z+16, r25	; 0x10
    1168:	17 82       	std	Z+7, r1	; 0x07
    116a:	16 82       	std	Z+6, r1	; 0x06
    116c:	11 86       	std	Z+9, r1	; 0x09
    116e:	10 86       	std	Z+8, r1	; 0x08
    1170:	f8 94       	cli
    1172:	a8 2f       	mov	r26, r24
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	aa 0f       	add	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	a7 59       	subi	r26, 0x97	; 151
    117c:	b8 4f       	sbci	r27, 0xF8	; 248
    117e:	ed 93       	st	X+, r30
    1180:	fc 93       	st	X, r31
    1182:	a0 91 ba 06 	lds	r26, 0x06BA
    1186:	b0 91 bb 06 	lds	r27, 0x06BB
    118a:	b3 83       	std	Z+3, r27	; 0x03
    118c:	a2 83       	std	Z+2, r26	; 0x02
    118e:	15 82       	std	Z+5, r1	; 0x05
    1190:	14 82       	std	Z+4, r1	; 0x04
    1192:	10 97       	sbiw	r26, 0x00	; 0
    1194:	21 f0       	breq	.+8      	; 0x119e <OSTCBInit+0x88>
    1196:	15 96       	adiw	r26, 0x05	; 5
    1198:	fc 93       	st	X, r31
    119a:	ee 93       	st	-X, r30
    119c:	14 97       	sbiw	r26, 0x04	; 4
    119e:	f0 93 bb 06 	sts	0x06BB, r31
    11a2:	e0 93 ba 06 	sts	0x06BA, r30
    11a6:	90 91 ca 06 	lds	r25, 0x06CA
    11aa:	81 89       	ldd	r24, Z+17	; 0x11
    11ac:	89 2b       	or	r24, r25
    11ae:	80 93 ca 06 	sts	0x06CA, r24
    11b2:	a7 85       	ldd	r26, Z+15	; 0x0f
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	a5 53       	subi	r26, 0x35	; 53
    11b8:	b9 4f       	sbci	r27, 0xF9	; 249
    11ba:	9c 91       	ld	r25, X
    11bc:	80 89       	ldd	r24, Z+16	; 0x10
    11be:	89 2b       	or	r24, r25
    11c0:	8c 93       	st	X, r24
    11c2:	78 94       	sei
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <OSTCBInit+0xb6>
    11c8:	78 94       	sei
    11ca:	86 e4       	ldi	r24, 0x46	; 70
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <OSTimeTick>:
    11d2:	0e 94 25 07 	call	0xe4a	; 0xe4a <OSTimeTickHook>
    11d6:	e0 91 ba 06 	lds	r30, 0x06BA
    11da:	f0 91 bb 06 	lds	r31, 0x06BB
    11de:	85 85       	ldd	r24, Z+13	; 0x0d
    11e0:	8f 33       	cpi	r24, 0x3F	; 63
    11e2:	39 f1       	breq	.+78     	; 0x1232 <OSTimeTick+0x60>
    11e4:	40 91 ca 06 	lds	r20, 0x06CA
    11e8:	21 e0       	ldi	r18, 0x01	; 1
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	f8 94       	cli
    11ee:	82 85       	ldd	r24, Z+10	; 0x0a
    11f0:	93 85       	ldd	r25, Z+11	; 0x0b
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	a9 f0       	breq	.+42     	; 0x1220 <OSTimeTick+0x4e>
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	93 87       	std	Z+11, r25	; 0x0b
    11fa:	82 87       	std	Z+10, r24	; 0x0a
    11fc:	89 2b       	or	r24, r25
    11fe:	81 f4       	brne	.+32     	; 0x1220 <OSTimeTick+0x4e>
    1200:	84 85       	ldd	r24, Z+12	; 0x0c
    1202:	83 fd       	sbrc	r24, 3
    1204:	0b c0       	rjmp	.+22     	; 0x121c <OSTimeTick+0x4a>
    1206:	81 89       	ldd	r24, Z+17	; 0x11
    1208:	a7 85       	ldd	r26, Z+15	; 0x0f
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	a5 53       	subi	r26, 0x35	; 53
    120e:	b9 4f       	sbci	r27, 0xF9	; 249
    1210:	5c 91       	ld	r21, X
    1212:	90 89       	ldd	r25, Z+16	; 0x10
    1214:	95 2b       	or	r25, r21
    1216:	9c 93       	st	X, r25
    1218:	48 2b       	or	r20, r24
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <OSTimeTick+0x4e>
    121c:	33 87       	std	Z+11, r19	; 0x0b
    121e:	22 87       	std	Z+10, r18	; 0x0a
    1220:	02 80       	ldd	r0, Z+2	; 0x02
    1222:	f3 81       	ldd	r31, Z+3	; 0x03
    1224:	e0 2d       	mov	r30, r0
    1226:	78 94       	sei
    1228:	85 85       	ldd	r24, Z+13	; 0x0d
    122a:	8f 33       	cpi	r24, 0x3F	; 63
    122c:	f9 f6       	brne	.-66     	; 0x11ec <OSTimeTick+0x1a>
    122e:	40 93 ca 06 	sts	0x06CA, r20
    1232:	f8 94       	cli
    1234:	80 91 d8 06 	lds	r24, 0x06D8
    1238:	90 91 d9 06 	lds	r25, 0x06D9
    123c:	a0 91 da 06 	lds	r26, 0x06DA
    1240:	b0 91 db 06 	lds	r27, 0x06DB
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	a1 1d       	adc	r26, r1
    1248:	b1 1d       	adc	r27, r1
    124a:	80 93 d8 06 	sts	0x06D8, r24
    124e:	90 93 d9 06 	sts	0x06D9, r25
    1252:	a0 93 da 06 	sts	0x06DA, r26
    1256:	b0 93 db 06 	sts	0x06DB, r27
    125a:	78 94       	sei
    125c:	08 95       	ret

0000125e <OSMboxAccept>:
    125e:	fc 01       	movw	r30, r24
    1260:	f8 94       	cli
    1262:	84 85       	ldd	r24, Z+12	; 0x0c
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	21 f0       	breq	.+8      	; 0x1270 <OSMboxAccept+0x12>
    1268:	78 94       	sei
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	08 95       	ret
    1270:	20 81       	ld	r18, Z
    1272:	31 81       	ldd	r19, Z+1	; 0x01
    1274:	21 15       	cp	r18, r1
    1276:	31 05       	cpc	r19, r1
    1278:	11 f0       	breq	.+4      	; 0x127e <OSMboxAccept+0x20>
    127a:	11 82       	std	Z+1, r1	; 0x01
    127c:	10 82       	st	Z, r1
    127e:	78 94       	sei
    1280:	82 2f       	mov	r24, r18
    1282:	93 2f       	mov	r25, r19
    1284:	08 95       	ret

00001286 <OSMboxCreate>:
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	f8 94       	cli
    128c:	c0 91 d3 06 	lds	r28, 0x06D3
    1290:	d0 91 d4 06 	lds	r29, 0x06D4
    1294:	20 97       	sbiw	r28, 0x00	; 0
    1296:	31 f0       	breq	.+12     	; 0x12a4 <OSMboxCreate+0x1e>
    1298:	28 81       	ld	r18, Y
    129a:	39 81       	ldd	r19, Y+1	; 0x01
    129c:	30 93 d4 06 	sts	0x06D4, r19
    12a0:	20 93 d3 06 	sts	0x06D3, r18
    12a4:	78 94       	sei
    12a6:	20 97       	sbiw	r28, 0x00	; 0
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <OSMboxCreate+0x32>
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	2c 87       	std	Y+12, r18	; 0x0c
    12ae:	99 83       	std	Y+1, r25	; 0x01
    12b0:	88 83       	st	Y, r24
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 ca 07 	call	0xf94	; 0xf94 <OSEventWaitListInit>
    12b8:	ce 01       	movw	r24, r28
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <OSMboxPost>:
    12c0:	f8 94       	cli
    12c2:	fc 01       	movw	r30, r24
    12c4:	24 85       	ldd	r18, Z+12	; 0x0c
    12c6:	21 30       	cpi	r18, 0x01	; 1
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <OSMboxPost+0x10>
    12ca:	78 94       	sei
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	08 95       	ret
    12d0:	fc 01       	movw	r30, r24
    12d2:	25 85       	ldd	r18, Z+13	; 0x0d
    12d4:	22 23       	and	r18, r18
    12d6:	41 f0       	breq	.+16     	; 0x12e8 <OSMboxPost+0x28>
    12d8:	42 e0       	ldi	r20, 0x02	; 2
    12da:	0e 94 29 07 	call	0xe52	; 0xe52 <OSEventTaskRdy>
    12de:	78 94       	sei
    12e0:	0e 94 1b 08 	call	0x1036	; 0x1036 <OSSched>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	08 95       	ret
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 81       	ld	r18, Z
    12ec:	31 81       	ldd	r19, Z+1	; 0x01
    12ee:	23 2b       	or	r18, r19
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <OSMboxPost+0x38>
    12f2:	78 94       	sei
    12f4:	84 e1       	ldi	r24, 0x14	; 20
    12f6:	08 95       	ret
    12f8:	fc 01       	movw	r30, r24
    12fa:	71 83       	std	Z+1, r23	; 0x01
    12fc:	60 83       	st	Z, r22
    12fe:	78 94       	sei
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret

00001304 <OSSemCreate>:
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	f8 94       	cli
    130a:	c0 91 d3 06 	lds	r28, 0x06D3
    130e:	d0 91 d4 06 	lds	r29, 0x06D4
    1312:	20 97       	sbiw	r28, 0x00	; 0
    1314:	31 f0       	breq	.+12     	; 0x1322 <OSSemCreate+0x1e>
    1316:	28 81       	ld	r18, Y
    1318:	39 81       	ldd	r19, Y+1	; 0x01
    131a:	30 93 d4 06 	sts	0x06D4, r19
    131e:	20 93 d3 06 	sts	0x06D3, r18
    1322:	78 94       	sei
    1324:	20 97       	sbiw	r28, 0x00	; 0
    1326:	39 f0       	breq	.+14     	; 0x1336 <OSSemCreate+0x32>
    1328:	23 e0       	ldi	r18, 0x03	; 3
    132a:	2c 87       	std	Y+12, r18	; 0x0c
    132c:	9b 87       	std	Y+11, r25	; 0x0b
    132e:	8a 87       	std	Y+10, r24	; 0x0a
    1330:	ce 01       	movw	r24, r28
    1332:	0e 94 ca 07 	call	0xf94	; 0xf94 <OSEventWaitListInit>
    1336:	ce 01       	movw	r24, r28
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <OSSemPend>:
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	ec 01       	movw	r28, r24
    1348:	8a 01       	movw	r16, r20
    134a:	f8 94       	cli
    134c:	8c 85       	ldd	r24, Y+12	; 0x0c
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	21 f0       	breq	.+8      	; 0x135a <OSSemPend+0x1c>
    1352:	78 94       	sei
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	fa 01       	movw	r30, r20
    1358:	80 83       	st	Z, r24
    135a:	8a 85       	ldd	r24, Y+10	; 0x0a
    135c:	9b 85       	ldd	r25, Y+11	; 0x0b
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	39 f0       	breq	.+14     	; 0x1370 <OSSemPend+0x32>
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9b 87       	std	Y+11, r25	; 0x0b
    1366:	8a 87       	std	Y+10, r24	; 0x0a
    1368:	78 94       	sei
    136a:	f8 01       	movw	r30, r16
    136c:	10 82       	st	Z, r1
    136e:	2d c0       	rjmp	.+90     	; 0x13ca <OSSemPend+0x8c>
    1370:	80 91 d5 06 	lds	r24, 0x06D5
    1374:	88 23       	and	r24, r24
    1376:	29 f0       	breq	.+10     	; 0x1382 <OSSemPend+0x44>
    1378:	78 94       	sei
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	f8 01       	movw	r30, r16
    137e:	80 83       	st	Z, r24
    1380:	24 c0       	rjmp	.+72     	; 0x13ca <OSSemPend+0x8c>
    1382:	e0 91 d6 06 	lds	r30, 0x06D6
    1386:	f0 91 d7 06 	lds	r31, 0x06D7
    138a:	84 85       	ldd	r24, Z+12	; 0x0c
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	84 87       	std	Z+12, r24	; 0x0c
    1390:	73 87       	std	Z+11, r23	; 0x0b
    1392:	62 87       	std	Z+10, r22	; 0x0a
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 7c 07 	call	0xef8	; 0xef8 <OSEventTaskWait>
    139a:	78 94       	sei
    139c:	0e 94 1b 08 	call	0x1036	; 0x1036 <OSSched>
    13a0:	f8 94       	cli
    13a2:	e0 91 d6 06 	lds	r30, 0x06D6
    13a6:	f0 91 d7 06 	lds	r31, 0x06D7
    13aa:	84 85       	ldd	r24, Z+12	; 0x0c
    13ac:	80 ff       	sbrs	r24, 0
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <OSSemPend+0x82>
    13b0:	ce 01       	movw	r24, r28
    13b2:	0e 94 ab 07 	call	0xf56	; 0xf56 <OSEventTO>
    13b6:	78 94       	sei
    13b8:	8a e0       	ldi	r24, 0x0A	; 10
    13ba:	f8 01       	movw	r30, r16
    13bc:	80 83       	st	Z, r24
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <OSSemPend+0x8c>
    13c0:	17 82       	std	Z+7, r1	; 0x07
    13c2:	16 82       	std	Z+6, r1	; 0x06
    13c4:	78 94       	sei
    13c6:	f8 01       	movw	r30, r16
    13c8:	10 82       	st	Z, r1
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret

000013d4 <OSTaskCreate>:
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	b2 2e       	mov	r11, r18
    13e8:	2f e3       	ldi	r18, 0x3F	; 63
    13ea:	2b 15       	cp	r18, r11
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <OSTaskCreate+0x1c>
    13ee:	4f c0       	rjmp	.+158    	; 0x148e <OSTaskCreate+0xba>
    13f0:	f8 94       	cli
    13f2:	cb 2d       	mov	r28, r11
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	fe 01       	movw	r30, r28
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	e7 59       	subi	r30, 0x97	; 151
    13fe:	f8 4f       	sbci	r31, 0xF8	; 248
    1400:	01 90       	ld	r0, Z+
    1402:	f0 81       	ld	r31, Z
    1404:	e0 2d       	mov	r30, r0
    1406:	ef 2b       	or	r30, r31
    1408:	09 f0       	breq	.+2      	; 0x140c <OSTaskCreate+0x38>
    140a:	3e c0       	rjmp	.+124    	; 0x1488 <OSTaskCreate+0xb4>
    140c:	fe 01       	movw	r30, r28
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	e7 59       	subi	r30, 0x97	; 151
    1414:	f8 4f       	sbci	r31, 0xF8	; 248
    1416:	21 e0       	ldi	r18, 0x01	; 1
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	31 83       	std	Z+1, r19	; 0x01
    141c:	20 83       	st	Z, r18
    141e:	78 94       	sei
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <OSTaskStkInit>
    1428:	c1 2c       	mov	r12, r1
    142a:	d1 2c       	mov	r13, r1
    142c:	e1 2c       	mov	r14, r1
    142e:	f1 2c       	mov	r15, r1
    1430:	00 e0       	ldi	r16, 0x00	; 0
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	bc 01       	movw	r22, r24
    143e:	8b 2d       	mov	r24, r11
    1440:	0e 94 8b 08 	call	0x1116	; 0x1116 <OSTCBInit>
    1444:	81 11       	cpse	r24, r1
    1446:	17 c0       	rjmp	.+46     	; 0x1476 <OSTaskCreate+0xa2>
    1448:	f8 94       	cli
    144a:	80 91 c7 06 	lds	r24, 0x06C7
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 c7 06 	sts	0x06C7, r24
    1454:	cc 0f       	add	r28, r28
    1456:	dd 1f       	adc	r29, r29
    1458:	c7 59       	subi	r28, 0x97	; 151
    145a:	d8 4f       	sbci	r29, 0xF8	; 248
    145c:	88 81       	ld	r24, Y
    145e:	99 81       	ldd	r25, Y+1	; 0x01
    1460:	0e 94 23 07 	call	0xe46	; 0xe46 <OSTaskCreateHook>
    1464:	78 94       	sei
    1466:	80 91 b3 06 	lds	r24, 0x06B3
    146a:	88 23       	and	r24, r24
    146c:	91 f0       	breq	.+36     	; 0x1492 <OSTaskCreate+0xbe>
    146e:	0e 94 1b 08 	call	0x1036	; 0x1036 <OSSched>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <OSTaskCreate+0xc0>
    1476:	f8 94       	cli
    1478:	cc 0f       	add	r28, r28
    147a:	dd 1f       	adc	r29, r29
    147c:	c7 59       	subi	r28, 0x97	; 151
    147e:	d8 4f       	sbci	r29, 0xF8	; 248
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	18 82       	st	Y, r1
    1484:	78 94       	sei
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <OSTaskCreate+0xc0>
    1488:	78 94       	sei
    148a:	88 e2       	ldi	r24, 0x28	; 40
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <OSTaskCreate+0xc0>
    148e:	8a e2       	ldi	r24, 0x2A	; 42
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <OSTaskCreate+0xc0>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	0f 91       	pop	r16
    149c:	ff 90       	pop	r15
    149e:	ef 90       	pop	r14
    14a0:	df 90       	pop	r13
    14a2:	cf 90       	pop	r12
    14a4:	bf 90       	pop	r11
    14a6:	08 95       	ret

000014a8 <OSInit>:
    14a8:	10 92 d8 06 	sts	0x06D8, r1
    14ac:	10 92 d9 06 	sts	0x06D9, r1
    14b0:	10 92 da 06 	sts	0x06DA, r1
    14b4:	10 92 db 06 	sts	0x06DB, r1
    14b8:	10 92 d5 06 	sts	0x06D5, r1
    14bc:	10 92 b2 06 	sts	0x06B2, r1
    14c0:	10 92 c7 06 	sts	0x06C7, r1
    14c4:	10 92 b3 06 	sts	0x06B3, r1
    14c8:	10 92 b4 06 	sts	0x06B4, r1
    14cc:	10 92 b5 06 	sts	0x06B5, r1
    14d0:	10 92 b6 06 	sts	0x06B6, r1
    14d4:	10 92 b7 06 	sts	0x06B7, r1
    14d8:	10 92 bc 06 	sts	0x06BC, r1
    14dc:	10 92 bd 06 	sts	0x06BD, r1
    14e0:	10 92 be 06 	sts	0x06BE, r1
    14e4:	10 92 bf 06 	sts	0x06BF, r1
    14e8:	10 92 ca 06 	sts	0x06CA, r1
    14ec:	eb ec       	ldi	r30, 0xCB	; 203
    14ee:	f6 e0       	ldi	r31, 0x06	; 6
    14f0:	83 ed       	ldi	r24, 0xD3	; 211
    14f2:	96 e0       	ldi	r25, 0x06	; 6
    14f4:	11 92       	st	Z+, r1
    14f6:	e8 17       	cp	r30, r24
    14f8:	f9 07       	cpc	r31, r25
    14fa:	e1 f7       	brne	.-8      	; 0x14f4 <OSInit+0x4c>
    14fc:	10 92 b9 06 	sts	0x06B9, r1
    1500:	10 92 b8 06 	sts	0x06B8, r1
    1504:	10 92 c9 06 	sts	0x06C9, r1
    1508:	10 92 c8 06 	sts	0x06C8, r1
    150c:	10 92 d7 06 	sts	0x06D7, r1
    1510:	10 92 d6 06 	sts	0x06D6, r1
    1514:	10 92 bb 06 	sts	0x06BB, r1
    1518:	10 92 ba 06 	sts	0x06BA, r1
    151c:	e9 e6       	ldi	r30, 0x69	; 105
    151e:	f7 e0       	ldi	r31, 0x07	; 7
    1520:	89 ee       	ldi	r24, 0xE9	; 233
    1522:	97 e0       	ldi	r25, 0x07	; 7
    1524:	11 92       	st	Z+, r1
    1526:	11 92       	st	Z+, r1
    1528:	e8 17       	cp	r30, r24
    152a:	f9 07       	cpc	r31, r25
    152c:	d9 f7       	brne	.-10     	; 0x1524 <OSInit+0x7c>
    152e:	87 e8       	ldi	r24, 0x87	; 135
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	29 e2       	ldi	r18, 0x29	; 41
    1534:	33 e0       	ldi	r19, 0x03	; 3
    1536:	fc 01       	movw	r30, r24
    1538:	70 97       	sbiw	r30, 0x10	; 16
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	42 96       	adiw	r24, 0x12	; 18
    1540:	82 17       	cp	r24, r18
    1542:	93 07       	cpc	r25, r19
    1544:	c1 f7       	brne	.-16     	; 0x1536 <OSInit+0x8e>
    1546:	10 92 1a 03 	sts	0x031A, r1
    154a:	10 92 19 03 	sts	0x0319, r1
    154e:	85 e7       	ldi	r24, 0x75	; 117
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	90 93 c5 06 	sts	0x06C5, r25
    1556:	80 93 c4 06 	sts	0x06C4, r24
    155a:	8a ee       	ldi	r24, 0xEA	; 234
    155c:	96 e0       	ldi	r25, 0x06	; 6
    155e:	28 e6       	ldi	r18, 0x68	; 104
    1560:	37 e0       	ldi	r19, 0x07	; 7
    1562:	fc 01       	movw	r30, r24
    1564:	3e 97       	sbiw	r30, 0x0e	; 14
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
    156a:	0e 96       	adiw	r24, 0x0e	; 14
    156c:	82 17       	cp	r24, r18
    156e:	93 07       	cpc	r25, r19
    1570:	c1 f7       	brne	.-16     	; 0x1562 <OSInit+0xba>
    1572:	10 92 5b 07 	sts	0x075B, r1
    1576:	10 92 5a 07 	sts	0x075A, r1
    157a:	8c ed       	ldi	r24, 0xDC	; 220
    157c:	96 e0       	ldi	r25, 0x06	; 6
    157e:	90 93 d4 06 	sts	0x06D4, r25
    1582:	80 93 d3 06 	sts	0x06D3, r24
    1586:	2f e3       	ldi	r18, 0x3F	; 63
    1588:	48 ea       	ldi	r20, 0xA8	; 168
    158a:	53 e0       	ldi	r21, 0x03	; 3
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	86 e2       	ldi	r24, 0x26	; 38
    1592:	97 e0       	ldi	r25, 0x07	; 7
    1594:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
    1598:	2e e3       	ldi	r18, 0x3E	; 62
    159a:	48 e6       	ldi	r20, 0x68	; 104
    159c:	53 e0       	ldi	r21, 0x03	; 3
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	8d e1       	ldi	r24, 0x1D	; 29
    15a4:	9b e0       	ldi	r25, 0x0B	; 11
    15a6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <OSTaskCreate>
    15aa:	08 95       	ret

000015ac <OSTimeDly>:
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	e1 f0       	breq	.+56     	; 0x15e8 <OSTimeDly+0x3c>
    15b0:	f8 94       	cli
    15b2:	e0 91 d6 06 	lds	r30, 0x06D6
    15b6:	f0 91 d7 06 	lds	r31, 0x06D7
    15ba:	a7 85       	ldd	r26, Z+15	; 0x0f
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	a5 53       	subi	r26, 0x35	; 53
    15c0:	b9 4f       	sbci	r27, 0xF9	; 249
    15c2:	20 89       	ldd	r18, Z+16	; 0x10
    15c4:	20 95       	com	r18
    15c6:	3c 91       	ld	r19, X
    15c8:	23 23       	and	r18, r19
    15ca:	2c 93       	st	X, r18
    15cc:	21 11       	cpse	r18, r1
    15ce:	07 c0       	rjmp	.+14     	; 0x15de <OSTimeDly+0x32>
    15d0:	21 89       	ldd	r18, Z+17	; 0x11
    15d2:	20 95       	com	r18
    15d4:	30 91 ca 06 	lds	r19, 0x06CA
    15d8:	23 23       	and	r18, r19
    15da:	20 93 ca 06 	sts	0x06CA, r18
    15de:	93 87       	std	Z+11, r25	; 0x0b
    15e0:	82 87       	std	Z+10, r24	; 0x0a
    15e2:	78 94       	sei
    15e4:	0e 94 1b 08 	call	0x1036	; 0x1036 <OSSched>
    15e8:	08 95       	ret

000015ea <OSStatInit>:
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
    15f2:	f8 94       	cli
    15f4:	10 92 b4 06 	sts	0x06B4, r1
    15f8:	10 92 b5 06 	sts	0x06B5, r1
    15fc:	10 92 b6 06 	sts	0x06B6, r1
    1600:	10 92 b7 06 	sts	0x06B7, r1
    1604:	78 94       	sei
    1606:	88 ec       	ldi	r24, 0xC8	; 200
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
    160e:	f8 94       	cli
    1610:	80 91 b4 06 	lds	r24, 0x06B4
    1614:	90 91 b5 06 	lds	r25, 0x06B5
    1618:	a0 91 b6 06 	lds	r26, 0x06B6
    161c:	b0 91 b7 06 	lds	r27, 0x06B7
    1620:	80 93 c0 06 	sts	0x06C0, r24
    1624:	90 93 c1 06 	sts	0x06C1, r25
    1628:	a0 93 c2 06 	sts	0x06C2, r26
    162c:	b0 93 c3 06 	sts	0x06C3, r27
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	80 93 68 07 	sts	0x0768, r24
    1636:	78 94       	sei
    1638:	08 95       	ret

0000163a <OSTaskStat>:
    163a:	80 91 68 07 	lds	r24, 0x0768
    163e:	81 11       	cpse	r24, r1
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <OSTaskStat+0x18>
    1642:	80 e9       	ldi	r24, 0x90	; 144
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
    164a:	80 91 68 07 	lds	r24, 0x0768
    164e:	88 23       	and	r24, r24
    1650:	c1 f3       	breq	.-16     	; 0x1642 <OSTaskStat+0x8>
    1652:	c4 e6       	ldi	r28, 0x64	; 100
    1654:	f8 94       	cli
    1656:	20 91 b4 06 	lds	r18, 0x06B4
    165a:	30 91 b5 06 	lds	r19, 0x06B5
    165e:	40 91 b6 06 	lds	r20, 0x06B6
    1662:	50 91 b7 06 	lds	r21, 0x06B7
    1666:	20 93 e9 07 	sts	0x07E9, r18
    166a:	30 93 ea 07 	sts	0x07EA, r19
    166e:	40 93 eb 07 	sts	0x07EB, r20
    1672:	50 93 ec 07 	sts	0x07EC, r21
    1676:	10 92 b4 06 	sts	0x06B4, r1
    167a:	10 92 b5 06 	sts	0x06B5, r1
    167e:	10 92 b6 06 	sts	0x06B6, r1
    1682:	10 92 b7 06 	sts	0x06B7, r1
    1686:	78 94       	sei
    1688:	c0 90 c0 06 	lds	r12, 0x06C0
    168c:	d0 90 c1 06 	lds	r13, 0x06C1
    1690:	e0 90 c2 06 	lds	r14, 0x06C2
    1694:	f0 90 c3 06 	lds	r15, 0x06C3
    1698:	c1 14       	cp	r12, r1
    169a:	d1 04       	cpc	r13, r1
    169c:	e1 04       	cpc	r14, r1
    169e:	f1 04       	cpc	r15, r1
    16a0:	b9 f0       	breq	.+46     	; 0x16d0 <OSTaskStat+0x96>
    16a2:	a4 e6       	ldi	r26, 0x64	; 100
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__muluhisi3>
    16aa:	a7 01       	movw	r20, r14
    16ac:	96 01       	movw	r18, r12
    16ae:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__udivmodsi4>
    16b2:	8c 2f       	mov	r24, r28
    16b4:	82 1b       	sub	r24, r18
    16b6:	85 36       	cpi	r24, 0x65	; 101
    16b8:	1c f0       	brlt	.+6      	; 0x16c0 <OSTaskStat+0x86>
    16ba:	c0 93 c6 06 	sts	0x06C6, r28
    16be:	0a c0       	rjmp	.+20     	; 0x16d4 <OSTaskStat+0x9a>
    16c0:	88 23       	and	r24, r24
    16c2:	1c f4       	brge	.+6      	; 0x16ca <OSTaskStat+0x90>
    16c4:	10 92 c6 06 	sts	0x06C6, r1
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <OSTaskStat+0x9a>
    16ca:	80 93 c6 06 	sts	0x06C6, r24
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <OSTaskStat+0x9a>
    16d0:	10 92 c6 06 	sts	0x06C6, r1
    16d4:	0e 94 24 07 	call	0xe48	; 0xe48 <OSTaskStatHook>
    16d8:	88 ec       	ldi	r24, 0xC8	; 200
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <OSTimeDly>
    16e0:	b9 cf       	rjmp	.-142    	; 0x1654 <OSTaskStat+0x1a>

000016e2 <__subsf3>:
    16e2:	50 58       	subi	r21, 0x80	; 128

000016e4 <__addsf3>:
    16e4:	bb 27       	eor	r27, r27
    16e6:	aa 27       	eor	r26, r26
    16e8:	0e d0       	rcall	.+28     	; 0x1706 <__addsf3x>
    16ea:	0b c1       	rjmp	.+534    	; 0x1902 <__fp_round>
    16ec:	fc d0       	rcall	.+504    	; 0x18e6 <__fp_pscA>
    16ee:	30 f0       	brcs	.+12     	; 0x16fc <__addsf3+0x18>
    16f0:	01 d1       	rcall	.+514    	; 0x18f4 <__fp_pscB>
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <__addsf3+0x18>
    16f4:	31 f4       	brne	.+12     	; 0x1702 <__addsf3+0x1e>
    16f6:	9f 3f       	cpi	r25, 0xFF	; 255
    16f8:	11 f4       	brne	.+4      	; 0x16fe <__addsf3+0x1a>
    16fa:	1e f4       	brtc	.+6      	; 0x1702 <__addsf3+0x1e>
    16fc:	f1 c0       	rjmp	.+482    	; 0x18e0 <__fp_nan>
    16fe:	0e f4       	brtc	.+2      	; 0x1702 <__addsf3+0x1e>
    1700:	e0 95       	com	r30
    1702:	e7 fb       	bst	r30, 7
    1704:	e7 c0       	rjmp	.+462    	; 0x18d4 <__fp_inf>

00001706 <__addsf3x>:
    1706:	e9 2f       	mov	r30, r25
    1708:	0d d1       	rcall	.+538    	; 0x1924 <__fp_split3>
    170a:	80 f3       	brcs	.-32     	; 0x16ec <__addsf3+0x8>
    170c:	ba 17       	cp	r27, r26
    170e:	62 07       	cpc	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	95 07       	cpc	r25, r21
    1716:	18 f0       	brcs	.+6      	; 0x171e <__addsf3x+0x18>
    1718:	71 f4       	brne	.+28     	; 0x1736 <__addsf3x+0x30>
    171a:	9e f5       	brtc	.+102    	; 0x1782 <__addsf3x+0x7c>
    171c:	25 c1       	rjmp	.+586    	; 0x1968 <__fp_zero>
    171e:	0e f4       	brtc	.+2      	; 0x1722 <__addsf3x+0x1c>
    1720:	e0 95       	com	r30
    1722:	0b 2e       	mov	r0, r27
    1724:	ba 2f       	mov	r27, r26
    1726:	a0 2d       	mov	r26, r0
    1728:	0b 01       	movw	r0, r22
    172a:	b9 01       	movw	r22, r18
    172c:	90 01       	movw	r18, r0
    172e:	0c 01       	movw	r0, r24
    1730:	ca 01       	movw	r24, r20
    1732:	a0 01       	movw	r20, r0
    1734:	11 24       	eor	r1, r1
    1736:	ff 27       	eor	r31, r31
    1738:	59 1b       	sub	r21, r25
    173a:	99 f0       	breq	.+38     	; 0x1762 <__addsf3x+0x5c>
    173c:	59 3f       	cpi	r21, 0xF9	; 249
    173e:	50 f4       	brcc	.+20     	; 0x1754 <__addsf3x+0x4e>
    1740:	50 3e       	cpi	r21, 0xE0	; 224
    1742:	68 f1       	brcs	.+90     	; 0x179e <__addsf3x+0x98>
    1744:	1a 16       	cp	r1, r26
    1746:	f0 40       	sbci	r31, 0x00	; 0
    1748:	a2 2f       	mov	r26, r18
    174a:	23 2f       	mov	r18, r19
    174c:	34 2f       	mov	r19, r20
    174e:	44 27       	eor	r20, r20
    1750:	58 5f       	subi	r21, 0xF8	; 248
    1752:	f3 cf       	rjmp	.-26     	; 0x173a <__addsf3x+0x34>
    1754:	46 95       	lsr	r20
    1756:	37 95       	ror	r19
    1758:	27 95       	ror	r18
    175a:	a7 95       	ror	r26
    175c:	f0 40       	sbci	r31, 0x00	; 0
    175e:	53 95       	inc	r21
    1760:	c9 f7       	brne	.-14     	; 0x1754 <__addsf3x+0x4e>
    1762:	7e f4       	brtc	.+30     	; 0x1782 <__addsf3x+0x7c>
    1764:	1f 16       	cp	r1, r31
    1766:	ba 0b       	sbc	r27, r26
    1768:	62 0b       	sbc	r22, r18
    176a:	73 0b       	sbc	r23, r19
    176c:	84 0b       	sbc	r24, r20
    176e:	ba f0       	brmi	.+46     	; 0x179e <__addsf3x+0x98>
    1770:	91 50       	subi	r25, 0x01	; 1
    1772:	a1 f0       	breq	.+40     	; 0x179c <__addsf3x+0x96>
    1774:	ff 0f       	add	r31, r31
    1776:	bb 1f       	adc	r27, r27
    1778:	66 1f       	adc	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	c2 f7       	brpl	.-16     	; 0x1770 <__addsf3x+0x6a>
    1780:	0e c0       	rjmp	.+28     	; 0x179e <__addsf3x+0x98>
    1782:	ba 0f       	add	r27, r26
    1784:	62 1f       	adc	r22, r18
    1786:	73 1f       	adc	r23, r19
    1788:	84 1f       	adc	r24, r20
    178a:	48 f4       	brcc	.+18     	; 0x179e <__addsf3x+0x98>
    178c:	87 95       	ror	r24
    178e:	77 95       	ror	r23
    1790:	67 95       	ror	r22
    1792:	b7 95       	ror	r27
    1794:	f7 95       	ror	r31
    1796:	9e 3f       	cpi	r25, 0xFE	; 254
    1798:	08 f0       	brcs	.+2      	; 0x179c <__addsf3x+0x96>
    179a:	b3 cf       	rjmp	.-154    	; 0x1702 <__addsf3+0x1e>
    179c:	93 95       	inc	r25
    179e:	88 0f       	add	r24, r24
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <__addsf3x+0x9e>
    17a2:	99 27       	eor	r25, r25
    17a4:	ee 0f       	add	r30, r30
    17a6:	97 95       	ror	r25
    17a8:	87 95       	ror	r24
    17aa:	08 95       	ret

000017ac <__divsf3>:
    17ac:	0c d0       	rcall	.+24     	; 0x17c6 <__divsf3x>
    17ae:	a9 c0       	rjmp	.+338    	; 0x1902 <__fp_round>
    17b0:	a1 d0       	rcall	.+322    	; 0x18f4 <__fp_pscB>
    17b2:	40 f0       	brcs	.+16     	; 0x17c4 <__divsf3+0x18>
    17b4:	98 d0       	rcall	.+304    	; 0x18e6 <__fp_pscA>
    17b6:	30 f0       	brcs	.+12     	; 0x17c4 <__divsf3+0x18>
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <__divsf3+0x16>
    17ba:	5f 3f       	cpi	r21, 0xFF	; 255
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <__divsf3+0x18>
    17be:	8a c0       	rjmp	.+276    	; 0x18d4 <__fp_inf>
    17c0:	51 11       	cpse	r21, r1
    17c2:	d3 c0       	rjmp	.+422    	; 0x196a <__fp_szero>
    17c4:	8d c0       	rjmp	.+282    	; 0x18e0 <__fp_nan>

000017c6 <__divsf3x>:
    17c6:	ae d0       	rcall	.+348    	; 0x1924 <__fp_split3>
    17c8:	98 f3       	brcs	.-26     	; 0x17b0 <__divsf3+0x4>

000017ca <__divsf3_pse>:
    17ca:	99 23       	and	r25, r25
    17cc:	c9 f3       	breq	.-14     	; 0x17c0 <__divsf3+0x14>
    17ce:	55 23       	and	r21, r21
    17d0:	b1 f3       	breq	.-20     	; 0x17be <__divsf3+0x12>
    17d2:	95 1b       	sub	r25, r21
    17d4:	55 0b       	sbc	r21, r21
    17d6:	bb 27       	eor	r27, r27
    17d8:	aa 27       	eor	r26, r26
    17da:	62 17       	cp	r22, r18
    17dc:	73 07       	cpc	r23, r19
    17de:	84 07       	cpc	r24, r20
    17e0:	38 f0       	brcs	.+14     	; 0x17f0 <__divsf3_pse+0x26>
    17e2:	9f 5f       	subi	r25, 0xFF	; 255
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	44 1f       	adc	r20, r20
    17ec:	aa 1f       	adc	r26, r26
    17ee:	a9 f3       	breq	.-22     	; 0x17da <__divsf3_pse+0x10>
    17f0:	33 d0       	rcall	.+102    	; 0x1858 <__divsf3_pse+0x8e>
    17f2:	0e 2e       	mov	r0, r30
    17f4:	3a f0       	brmi	.+14     	; 0x1804 <__divsf3_pse+0x3a>
    17f6:	e0 e8       	ldi	r30, 0x80	; 128
    17f8:	30 d0       	rcall	.+96     	; 0x185a <__divsf3_pse+0x90>
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	e6 95       	lsr	r30
    1800:	00 1c       	adc	r0, r0
    1802:	ca f7       	brpl	.-14     	; 0x17f6 <__divsf3_pse+0x2c>
    1804:	29 d0       	rcall	.+82     	; 0x1858 <__divsf3_pse+0x8e>
    1806:	fe 2f       	mov	r31, r30
    1808:	27 d0       	rcall	.+78     	; 0x1858 <__divsf3_pse+0x8e>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	88 1f       	adc	r24, r24
    1810:	bb 1f       	adc	r27, r27
    1812:	26 17       	cp	r18, r22
    1814:	37 07       	cpc	r19, r23
    1816:	48 07       	cpc	r20, r24
    1818:	ab 07       	cpc	r26, r27
    181a:	b0 e8       	ldi	r27, 0x80	; 128
    181c:	09 f0       	breq	.+2      	; 0x1820 <__divsf3_pse+0x56>
    181e:	bb 0b       	sbc	r27, r27
    1820:	80 2d       	mov	r24, r0
    1822:	bf 01       	movw	r22, r30
    1824:	ff 27       	eor	r31, r31
    1826:	93 58       	subi	r25, 0x83	; 131
    1828:	5f 4f       	sbci	r21, 0xFF	; 255
    182a:	2a f0       	brmi	.+10     	; 0x1836 <__divsf3_pse+0x6c>
    182c:	9e 3f       	cpi	r25, 0xFE	; 254
    182e:	51 05       	cpc	r21, r1
    1830:	68 f0       	brcs	.+26     	; 0x184c <__divsf3_pse+0x82>
    1832:	50 c0       	rjmp	.+160    	; 0x18d4 <__fp_inf>
    1834:	9a c0       	rjmp	.+308    	; 0x196a <__fp_szero>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	ec f3       	brlt	.-6      	; 0x1834 <__divsf3_pse+0x6a>
    183a:	98 3e       	cpi	r25, 0xE8	; 232
    183c:	dc f3       	brlt	.-10     	; 0x1834 <__divsf3_pse+0x6a>
    183e:	86 95       	lsr	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	f7 95       	ror	r31
    1848:	9f 5f       	subi	r25, 0xFF	; 255
    184a:	c9 f7       	brne	.-14     	; 0x183e <__divsf3_pse+0x74>
    184c:	88 0f       	add	r24, r24
    184e:	91 1d       	adc	r25, r1
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret
    1858:	e1 e0       	ldi	r30, 0x01	; 1
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	bb 1f       	adc	r27, r27
    1862:	62 17       	cp	r22, r18
    1864:	73 07       	cpc	r23, r19
    1866:	84 07       	cpc	r24, r20
    1868:	ba 07       	cpc	r27, r26
    186a:	20 f0       	brcs	.+8      	; 0x1874 <__divsf3_pse+0xaa>
    186c:	62 1b       	sub	r22, r18
    186e:	73 0b       	sbc	r23, r19
    1870:	84 0b       	sbc	r24, r20
    1872:	ba 0b       	sbc	r27, r26
    1874:	ee 1f       	adc	r30, r30
    1876:	88 f7       	brcc	.-30     	; 0x185a <__divsf3_pse+0x90>
    1878:	e0 95       	com	r30
    187a:	08 95       	ret

0000187c <__fixunssfsi>:
    187c:	5b d0       	rcall	.+182    	; 0x1934 <__fp_splitA>
    187e:	88 f0       	brcs	.+34     	; 0x18a2 <__fixunssfsi+0x26>
    1880:	9f 57       	subi	r25, 0x7F	; 127
    1882:	90 f0       	brcs	.+36     	; 0x18a8 <__fixunssfsi+0x2c>
    1884:	b9 2f       	mov	r27, r25
    1886:	99 27       	eor	r25, r25
    1888:	b7 51       	subi	r27, 0x17	; 23
    188a:	a0 f0       	brcs	.+40     	; 0x18b4 <__fixunssfsi+0x38>
    188c:	d1 f0       	breq	.+52     	; 0x18c2 <__fixunssfsi+0x46>
    188e:	66 0f       	add	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	1a f0       	brmi	.+6      	; 0x189e <__fixunssfsi+0x22>
    1898:	ba 95       	dec	r27
    189a:	c9 f7       	brne	.-14     	; 0x188e <__fixunssfsi+0x12>
    189c:	12 c0       	rjmp	.+36     	; 0x18c2 <__fixunssfsi+0x46>
    189e:	b1 30       	cpi	r27, 0x01	; 1
    18a0:	81 f0       	breq	.+32     	; 0x18c2 <__fixunssfsi+0x46>
    18a2:	62 d0       	rcall	.+196    	; 0x1968 <__fp_zero>
    18a4:	b1 e0       	ldi	r27, 0x01	; 1
    18a6:	08 95       	ret
    18a8:	5f c0       	rjmp	.+190    	; 0x1968 <__fp_zero>
    18aa:	67 2f       	mov	r22, r23
    18ac:	78 2f       	mov	r23, r24
    18ae:	88 27       	eor	r24, r24
    18b0:	b8 5f       	subi	r27, 0xF8	; 248
    18b2:	39 f0       	breq	.+14     	; 0x18c2 <__fixunssfsi+0x46>
    18b4:	b9 3f       	cpi	r27, 0xF9	; 249
    18b6:	cc f3       	brlt	.-14     	; 0x18aa <__fixunssfsi+0x2e>
    18b8:	86 95       	lsr	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	b3 95       	inc	r27
    18c0:	d9 f7       	brne	.-10     	; 0x18b8 <__fixunssfsi+0x3c>
    18c2:	3e f4       	brtc	.+14     	; 0x18d2 <__fixunssfsi+0x56>
    18c4:	90 95       	com	r25
    18c6:	80 95       	com	r24
    18c8:	70 95       	com	r23
    18ca:	61 95       	neg	r22
    18cc:	7f 4f       	sbci	r23, 0xFF	; 255
    18ce:	8f 4f       	sbci	r24, 0xFF	; 255
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	08 95       	ret

000018d4 <__fp_inf>:
    18d4:	97 f9       	bld	r25, 7
    18d6:	9f 67       	ori	r25, 0x7F	; 127
    18d8:	80 e8       	ldi	r24, 0x80	; 128
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	08 95       	ret

000018e0 <__fp_nan>:
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
    18e2:	80 ec       	ldi	r24, 0xC0	; 192
    18e4:	08 95       	ret

000018e6 <__fp_pscA>:
    18e6:	00 24       	eor	r0, r0
    18e8:	0a 94       	dec	r0
    18ea:	16 16       	cp	r1, r22
    18ec:	17 06       	cpc	r1, r23
    18ee:	18 06       	cpc	r1, r24
    18f0:	09 06       	cpc	r0, r25
    18f2:	08 95       	ret

000018f4 <__fp_pscB>:
    18f4:	00 24       	eor	r0, r0
    18f6:	0a 94       	dec	r0
    18f8:	12 16       	cp	r1, r18
    18fa:	13 06       	cpc	r1, r19
    18fc:	14 06       	cpc	r1, r20
    18fe:	05 06       	cpc	r0, r21
    1900:	08 95       	ret

00001902 <__fp_round>:
    1902:	09 2e       	mov	r0, r25
    1904:	03 94       	inc	r0
    1906:	00 0c       	add	r0, r0
    1908:	11 f4       	brne	.+4      	; 0x190e <__fp_round+0xc>
    190a:	88 23       	and	r24, r24
    190c:	52 f0       	brmi	.+20     	; 0x1922 <__fp_round+0x20>
    190e:	bb 0f       	add	r27, r27
    1910:	40 f4       	brcc	.+16     	; 0x1922 <__fp_round+0x20>
    1912:	bf 2b       	or	r27, r31
    1914:	11 f4       	brne	.+4      	; 0x191a <__fp_round+0x18>
    1916:	60 ff       	sbrs	r22, 0
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <__fp_round+0x20>
    191a:	6f 5f       	subi	r22, 0xFF	; 255
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	08 95       	ret

00001924 <__fp_split3>:
    1924:	57 fd       	sbrc	r21, 7
    1926:	90 58       	subi	r25, 0x80	; 128
    1928:	44 0f       	add	r20, r20
    192a:	55 1f       	adc	r21, r21
    192c:	59 f0       	breq	.+22     	; 0x1944 <__fp_splitA+0x10>
    192e:	5f 3f       	cpi	r21, 0xFF	; 255
    1930:	71 f0       	breq	.+28     	; 0x194e <__fp_splitA+0x1a>
    1932:	47 95       	ror	r20

00001934 <__fp_splitA>:
    1934:	88 0f       	add	r24, r24
    1936:	97 fb       	bst	r25, 7
    1938:	99 1f       	adc	r25, r25
    193a:	61 f0       	breq	.+24     	; 0x1954 <__fp_splitA+0x20>
    193c:	9f 3f       	cpi	r25, 0xFF	; 255
    193e:	79 f0       	breq	.+30     	; 0x195e <__fp_splitA+0x2a>
    1940:	87 95       	ror	r24
    1942:	08 95       	ret
    1944:	12 16       	cp	r1, r18
    1946:	13 06       	cpc	r1, r19
    1948:	14 06       	cpc	r1, r20
    194a:	55 1f       	adc	r21, r21
    194c:	f2 cf       	rjmp	.-28     	; 0x1932 <__fp_split3+0xe>
    194e:	46 95       	lsr	r20
    1950:	f1 df       	rcall	.-30     	; 0x1934 <__fp_splitA>
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <__fp_splitA+0x30>
    1954:	16 16       	cp	r1, r22
    1956:	17 06       	cpc	r1, r23
    1958:	18 06       	cpc	r1, r24
    195a:	99 1f       	adc	r25, r25
    195c:	f1 cf       	rjmp	.-30     	; 0x1940 <__fp_splitA+0xc>
    195e:	86 95       	lsr	r24
    1960:	71 05       	cpc	r23, r1
    1962:	61 05       	cpc	r22, r1
    1964:	08 94       	sec
    1966:	08 95       	ret

00001968 <__fp_zero>:
    1968:	e8 94       	clt

0000196a <__fp_szero>:
    196a:	bb 27       	eor	r27, r27
    196c:	66 27       	eor	r22, r22
    196e:	77 27       	eor	r23, r23
    1970:	cb 01       	movw	r24, r22
    1972:	97 f9       	bld	r25, 7
    1974:	08 95       	ret

00001976 <__mulsf3>:
    1976:	0b d0       	rcall	.+22     	; 0x198e <__mulsf3x>
    1978:	c4 cf       	rjmp	.-120    	; 0x1902 <__fp_round>
    197a:	b5 df       	rcall	.-150    	; 0x18e6 <__fp_pscA>
    197c:	28 f0       	brcs	.+10     	; 0x1988 <__mulsf3+0x12>
    197e:	ba df       	rcall	.-140    	; 0x18f4 <__fp_pscB>
    1980:	18 f0       	brcs	.+6      	; 0x1988 <__mulsf3+0x12>
    1982:	95 23       	and	r25, r21
    1984:	09 f0       	breq	.+2      	; 0x1988 <__mulsf3+0x12>
    1986:	a6 cf       	rjmp	.-180    	; 0x18d4 <__fp_inf>
    1988:	ab cf       	rjmp	.-170    	; 0x18e0 <__fp_nan>
    198a:	11 24       	eor	r1, r1
    198c:	ee cf       	rjmp	.-36     	; 0x196a <__fp_szero>

0000198e <__mulsf3x>:
    198e:	ca df       	rcall	.-108    	; 0x1924 <__fp_split3>
    1990:	a0 f3       	brcs	.-24     	; 0x197a <__mulsf3+0x4>

00001992 <__mulsf3_pse>:
    1992:	95 9f       	mul	r25, r21
    1994:	d1 f3       	breq	.-12     	; 0x198a <__mulsf3+0x14>
    1996:	95 0f       	add	r25, r21
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	55 1f       	adc	r21, r21
    199c:	62 9f       	mul	r22, r18
    199e:	f0 01       	movw	r30, r0
    19a0:	72 9f       	mul	r23, r18
    19a2:	bb 27       	eor	r27, r27
    19a4:	f0 0d       	add	r31, r0
    19a6:	b1 1d       	adc	r27, r1
    19a8:	63 9f       	mul	r22, r19
    19aa:	aa 27       	eor	r26, r26
    19ac:	f0 0d       	add	r31, r0
    19ae:	b1 1d       	adc	r27, r1
    19b0:	aa 1f       	adc	r26, r26
    19b2:	64 9f       	mul	r22, r20
    19b4:	66 27       	eor	r22, r22
    19b6:	b0 0d       	add	r27, r0
    19b8:	a1 1d       	adc	r26, r1
    19ba:	66 1f       	adc	r22, r22
    19bc:	82 9f       	mul	r24, r18
    19be:	22 27       	eor	r18, r18
    19c0:	b0 0d       	add	r27, r0
    19c2:	a1 1d       	adc	r26, r1
    19c4:	62 1f       	adc	r22, r18
    19c6:	73 9f       	mul	r23, r19
    19c8:	b0 0d       	add	r27, r0
    19ca:	a1 1d       	adc	r26, r1
    19cc:	62 1f       	adc	r22, r18
    19ce:	83 9f       	mul	r24, r19
    19d0:	a0 0d       	add	r26, r0
    19d2:	61 1d       	adc	r22, r1
    19d4:	22 1f       	adc	r18, r18
    19d6:	74 9f       	mul	r23, r20
    19d8:	33 27       	eor	r19, r19
    19da:	a0 0d       	add	r26, r0
    19dc:	61 1d       	adc	r22, r1
    19de:	23 1f       	adc	r18, r19
    19e0:	84 9f       	mul	r24, r20
    19e2:	60 0d       	add	r22, r0
    19e4:	21 1d       	adc	r18, r1
    19e6:	82 2f       	mov	r24, r18
    19e8:	76 2f       	mov	r23, r22
    19ea:	6a 2f       	mov	r22, r26
    19ec:	11 24       	eor	r1, r1
    19ee:	9f 57       	subi	r25, 0x7F	; 127
    19f0:	50 40       	sbci	r21, 0x00	; 0
    19f2:	8a f0       	brmi	.+34     	; 0x1a16 <__mulsf3_pse+0x84>
    19f4:	e1 f0       	breq	.+56     	; 0x1a2e <__mulsf3_pse+0x9c>
    19f6:	88 23       	and	r24, r24
    19f8:	4a f0       	brmi	.+18     	; 0x1a0c <__mulsf3_pse+0x7a>
    19fa:	ee 0f       	add	r30, r30
    19fc:	ff 1f       	adc	r31, r31
    19fe:	bb 1f       	adc	r27, r27
    1a00:	66 1f       	adc	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	91 50       	subi	r25, 0x01	; 1
    1a08:	50 40       	sbci	r21, 0x00	; 0
    1a0a:	a9 f7       	brne	.-22     	; 0x19f6 <__mulsf3_pse+0x64>
    1a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0e:	51 05       	cpc	r21, r1
    1a10:	70 f0       	brcs	.+28     	; 0x1a2e <__mulsf3_pse+0x9c>
    1a12:	60 cf       	rjmp	.-320    	; 0x18d4 <__fp_inf>
    1a14:	aa cf       	rjmp	.-172    	; 0x196a <__fp_szero>
    1a16:	5f 3f       	cpi	r21, 0xFF	; 255
    1a18:	ec f3       	brlt	.-6      	; 0x1a14 <__mulsf3_pse+0x82>
    1a1a:	98 3e       	cpi	r25, 0xE8	; 232
    1a1c:	dc f3       	brlt	.-10     	; 0x1a14 <__mulsf3_pse+0x82>
    1a1e:	86 95       	lsr	r24
    1a20:	77 95       	ror	r23
    1a22:	67 95       	ror	r22
    1a24:	b7 95       	ror	r27
    1a26:	f7 95       	ror	r31
    1a28:	e7 95       	ror	r30
    1a2a:	9f 5f       	subi	r25, 0xFF	; 255
    1a2c:	c1 f7       	brne	.-16     	; 0x1a1e <__mulsf3_pse+0x8c>
    1a2e:	fe 2b       	or	r31, r30
    1a30:	88 0f       	add	r24, r24
    1a32:	91 1d       	adc	r25, r1
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	97 f9       	bld	r25, 7
    1a3a:	08 95       	ret

00001a3c <__divmodhi4>:
    1a3c:	97 fb       	bst	r25, 7
    1a3e:	07 2e       	mov	r0, r23
    1a40:	16 f4       	brtc	.+4      	; 0x1a46 <__divmodhi4+0xa>
    1a42:	00 94       	com	r0
    1a44:	07 d0       	rcall	.+14     	; 0x1a54 <__divmodhi4_neg1>
    1a46:	77 fd       	sbrc	r23, 7
    1a48:	09 d0       	rcall	.+18     	; 0x1a5c <__divmodhi4_neg2>
    1a4a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__udivmodhi4>
    1a4e:	07 fc       	sbrc	r0, 7
    1a50:	05 d0       	rcall	.+10     	; 0x1a5c <__divmodhi4_neg2>
    1a52:	3e f4       	brtc	.+14     	; 0x1a62 <__divmodhi4_exit>

00001a54 <__divmodhi4_neg1>:
    1a54:	90 95       	com	r25
    1a56:	81 95       	neg	r24
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	08 95       	ret

00001a5c <__divmodhi4_neg2>:
    1a5c:	70 95       	com	r23
    1a5e:	61 95       	neg	r22
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255

00001a62 <__divmodhi4_exit>:
    1a62:	08 95       	ret

00001a64 <__udivmodsi4>:
    1a64:	a1 e2       	ldi	r26, 0x21	; 33
    1a66:	1a 2e       	mov	r1, r26
    1a68:	aa 1b       	sub	r26, r26
    1a6a:	bb 1b       	sub	r27, r27
    1a6c:	fd 01       	movw	r30, r26
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <__udivmodsi4_ep>

00001a70 <__udivmodsi4_loop>:
    1a70:	aa 1f       	adc	r26, r26
    1a72:	bb 1f       	adc	r27, r27
    1a74:	ee 1f       	adc	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	a2 17       	cp	r26, r18
    1a7a:	b3 07       	cpc	r27, r19
    1a7c:	e4 07       	cpc	r30, r20
    1a7e:	f5 07       	cpc	r31, r21
    1a80:	20 f0       	brcs	.+8      	; 0x1a8a <__udivmodsi4_ep>
    1a82:	a2 1b       	sub	r26, r18
    1a84:	b3 0b       	sbc	r27, r19
    1a86:	e4 0b       	sbc	r30, r20
    1a88:	f5 0b       	sbc	r31, r21

00001a8a <__udivmodsi4_ep>:
    1a8a:	66 1f       	adc	r22, r22
    1a8c:	77 1f       	adc	r23, r23
    1a8e:	88 1f       	adc	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	1a 94       	dec	r1
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <__udivmodsi4_loop>
    1a96:	60 95       	com	r22
    1a98:	70 95       	com	r23
    1a9a:	80 95       	com	r24
    1a9c:	90 95       	com	r25
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	bd 01       	movw	r22, r26
    1aa4:	cf 01       	movw	r24, r30
    1aa6:	08 95       	ret

00001aa8 <__umulhisi3>:
    1aa8:	a2 9f       	mul	r26, r18
    1aaa:	b0 01       	movw	r22, r0
    1aac:	b3 9f       	mul	r27, r19
    1aae:	c0 01       	movw	r24, r0
    1ab0:	a3 9f       	mul	r26, r19
    1ab2:	70 0d       	add	r23, r0
    1ab4:	81 1d       	adc	r24, r1
    1ab6:	11 24       	eor	r1, r1
    1ab8:	91 1d       	adc	r25, r1
    1aba:	b2 9f       	mul	r27, r18
    1abc:	70 0d       	add	r23, r0
    1abe:	81 1d       	adc	r24, r1
    1ac0:	11 24       	eor	r1, r1
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	08 95       	ret

00001ac6 <__muluhisi3>:
    1ac6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__umulhisi3>
    1aca:	a5 9f       	mul	r26, r21
    1acc:	90 0d       	add	r25, r0
    1ace:	b4 9f       	mul	r27, r20
    1ad0:	90 0d       	add	r25, r0
    1ad2:	a4 9f       	mul	r26, r20
    1ad4:	80 0d       	add	r24, r0
    1ad6:	91 1d       	adc	r25, r1
    1ad8:	11 24       	eor	r1, r1
    1ada:	08 95       	ret

00001adc <__udivmodhi4>:
    1adc:	aa 1b       	sub	r26, r26
    1ade:	bb 1b       	sub	r27, r27
    1ae0:	51 e1       	ldi	r21, 0x11	; 17
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <__udivmodhi4_ep>

00001ae4 <__udivmodhi4_loop>:
    1ae4:	aa 1f       	adc	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	a6 17       	cp	r26, r22
    1aea:	b7 07       	cpc	r27, r23
    1aec:	10 f0       	brcs	.+4      	; 0x1af2 <__udivmodhi4_ep>
    1aee:	a6 1b       	sub	r26, r22
    1af0:	b7 0b       	sbc	r27, r23

00001af2 <__udivmodhi4_ep>:
    1af2:	88 1f       	adc	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	5a 95       	dec	r21
    1af8:	a9 f7       	brne	.-22     	; 0x1ae4 <__udivmodhi4_loop>
    1afa:	80 95       	com	r24
    1afc:	90 95       	com	r25
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	08 95       	ret

00001b04 <strcpy>:
    1b04:	fb 01       	movw	r30, r22
    1b06:	dc 01       	movw	r26, r24
    1b08:	01 90       	ld	r0, Z+
    1b0a:	0d 92       	st	X+, r0
    1b0c:	00 20       	and	r0, r0
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <strcpy+0x4>
    1b10:	08 95       	ret

00001b12 <_exit>:
    1b12:	f8 94       	cli

00001b14 <__stop_program>:
    1b14:	ff cf       	rjmp	.-2      	; 0x1b14 <__stop_program>
