
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00001670  00001704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001670  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f8  0080023e  0080023e  00001842  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001878  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f90  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076d  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093b  00000000  00000000  00004175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00004ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000822  00000000  00000000  00004efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000168f  00000000  00000000  0000571e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00006dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e0 e7       	ldi	r30, 0x70	; 112
     17c:	f6 e1       	ldi	r31, 0x16	; 22
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	ae 33       	cpi	r26, 0x3E	; 62
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	ae e3       	ldi	r26, 0x3E	; 62
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a6 33       	cpi	r26, 0x36	; 54
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 28 04 	call	0x850	; 0x850 <main>
     19e:	0c 94 36 0b 	jmp	0x166c	; 0x166c <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:

OSStartHighRdy: 
#if OS_TASK_SW_HOOK_EN > 0
	        call    OSTaskSwHook                ; Invoke user defined context switch hook
#endif
                lds     R16,OSRunning               ; Indicate that we are multitasking
     1a6:	00 91 fc 05 	lds	r16, 0x05FC
                inc     R16                         ;
     1aa:	03 95       	inc	r16
                sts     OSRunning,R16               ;
     1ac:	00 93 fc 05 	sts	0x05FC, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     1b0:	e0 91 11 06 	lds	r30, 0x0611
                lds     R31,OSTCBHighRdy+1          ; ready to run
     1b4:	f0 91 12 06 	lds	r31, 0x0612

                ld      R28,Z+                      ; Load stack L pointer
     1b8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     1ba:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     1bc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     1be:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Pop the status register
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Pop all registers
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
                ret                                 ; Start task
     204:	08 95       	ret

00000206 <OSCtxSw>:
;                                                R0
;                                                PCH
;                                                PCL                                     (High memory)
;********************************************************************************************************

OSCtxSw:        PUSHRS                              ; Save current tasks context
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
                PUSHSREG                            ; Save SREG
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16

                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     24a:	e0 91 1f 06 	lds	r30, 0x061F
                lds     R31,OSTCBCur+1              ;
     24e:	f0 91 20 06 	lds	r31, 0x0620

                in      r28,_SFR_IO_ADDR(SPL)
     252:	cd b7       	in	r28, 0x3d	; 61
                st      Z+,R28                      ; Save Y (R29:R28) pointer
     254:	c1 93       	st	Z+, r28
                in      r29,_SFR_IO_ADDR(SPH)
     256:	de b7       	in	r29, 0x3e	; 62
                st      Z+,R29                      ;
     258:	d1 93       	st	Z+, r29

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif

                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     25a:	00 91 01 06 	lds	r16, 0x0601
                sts     OSPrioCur,R16
     25e:	00 93 02 06 	sts	0x0602, r16

                lds     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
     262:	e0 91 11 06 	lds	r30, 0x0611
                lds     R31,OSTCBHighRdy+1          ; ready to run
     266:	f0 91 12 06 	lds	r31, 0x0612
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     26a:	e0 93 1f 06 	sts	0x061F, r30
                sts     OSTCBCur+1,R31              ;
     26e:	f0 93 20 06 	sts	0x0620, r31

                ld      R28,Z+                      ; Restore Y pointer
     272:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     274:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     276:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     278:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
                ret
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
;*********************************************************************************************************

#if OS_TASK_SW_HOOK_EN > 0
                call    OSTaskSwHook                ; Call user defined task switch hook
#endif
                lds     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
     2c0:	00 91 01 06 	lds	r16, 0x0601
                sts     OSPrioCur,R16               ;
     2c4:	00 93 02 06 	sts	0x0602, r16

                lds     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
     2c8:	e0 91 11 06 	lds	r30, 0x0611
                lds     R31,OSTCBHighRdy+1          ;
     2cc:	f0 91 12 06 	lds	r31, 0x0612
                sts     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
     2d0:	e0 93 1f 06 	sts	0x061F, r30
                sts     OSTCBCur+1,R31              ;
     2d4:	f0 93 20 06 	sts	0x0620, r31

                ld      R28,Z+                      ; Restore Y pointer
     2d8:	c1 91       	ld	r28, Z+
                out     _SFR_IO_ADDR(SPL),R28
     2da:	cd bf       	out	0x3d, r28	; 61
                ld      R29,Z+                      ;
     2dc:	d1 91       	ld	r29, Z+
                out     _SFR_IO_ADDR(SPH),R29
     2de:	de bf       	out	0x3e, r29	; 62

                POPSREG                             ; Restore the status register
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
                ret
     324:	08 95       	ret

00000326 <OSTickISR>:
; won't get vectored.
;
;********************************************************************************************************
.global TIMER0_OVF_vect
TIMER0_OVF_vect:
OSTickISR:      PUSHRS                              ; Save all registers
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
                PUSHSREGISR                         ; Save SREG with I bit set!
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16

                lds     R16,OSIntNesting            ; Notify uC/OS-II of ISR
     36c:	00 91 1e 06 	lds	r16, 0x061E
                inc     R16                         ;
     370:	03 95       	inc	r16
                sts     OSIntNesting,R16            ;
     372:	00 93 1e 06 	sts	0x061E, r16
; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
;*********************************************************************************************************
#if 1
                cpi     R16,0x01
     376:	01 30       	cpi	r16, 0x01	; 1
                brne    _not_first_int
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>

                in      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
     37a:	cd b7       	in	r28, 0x3d	; 61
                in      R29,_SFR_IO_ADDR(SPH)
     37c:	de b7       	in	r29, 0x3e	; 62
                lds     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
     37e:	e0 91 1f 06 	lds	r30, 0x061F
                lds     R31,OSTCBCur+1              ;
     382:	f0 91 20 06 	lds	r31, 0x0620
                st      Z+,R28                      ; Save Y pointer
     386:	c1 93       	st	Z+, r28
                st      Z+,R29                      ;
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
_not_first_int:
#endif
                ldi     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
     38a:	0d ee       	ldi	r16, 0xED	; 237
                                                    ; Reload timer to overflow at a rate of OS_TICKS_PER_SEC
                out     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR clock
     38c:	06 bd       	out	0x26, r16	; 38
	
                sei                                 ; Enable interrupts
     38e:	78 94       	sei
                
                call    OSTimeTick                  ; Call uC/OS-IIs tick updating function
     390:	0e 94 96 06 	call	0xd2c	; 0xd2c <OSTimeTick>
                nop
     394:	00 00       	nop
                call    OSIntExit                   ; Notify uC/OS-II about end of ISR
     396:	0e 94 80 05 	call	0xb00	; 0xb00 <OSIntExit>

                POPSREG
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
                POPRS                               ; Restore all registers and status register
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
                ret                                 ; Note: RET instead of RETI
     3de:	08 95       	ret

000003e0 <WatchDogReset>:



.global WatchDogReset
WatchDogReset:
				wdr									; tickle the watchdog timer
     3e0:	a8 95       	wdr
				ret
     3e2:	08 95       	ret

000003e4 <SerTxISR>:

.global USART_TX_vect							   ; Transmit Complete Interrupt
USART_TX_vect:
SerTxISR:      
.extern PostTxCompleteSem
			   ret
     3e4:	08 95       	ret

000003e6 <TaskStart>:
	char *threeDollarSign = "$$$";
	char *baudString = "U,38400,N";
	char *sys_on_str = "\r\nuCOS ON\r\n---\r\n";			//helps see when the system turns on
	pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 a2 08 	call	0x1144	; 0x1144 <OSStatInit>
	
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     3ea:	2b e0       	ldi	r18, 0x0B	; 11
     3ec:	48 e7       	ldi	r20, 0x78	; 120
     3ee:	54 e0       	ldi	r21, 0x04	; 4
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	84 ec       	ldi	r24, 0xC4	; 196
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     3fc:	2a e0       	ldi	r18, 0x0A	; 10
     3fe:	4a e7       	ldi	r20, 0x7A	; 122
     400:	55 e0       	ldi	r21, 0x05	; 5
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	86 e3       	ldi	r24, 0x36	; 54
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     40e:	2f e0       	ldi	r18, 0x0F	; 15
     410:	46 ef       	ldi	r20, 0xF6	; 246
     412:	53 e0       	ldi	r21, 0x03	; 3
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	86 e4       	ldi	r24, 0x46	; 70
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     420:	24 e1       	ldi	r18, 0x14	; 20
     422:	4a ef       	ldi	r20, 0xFA	; 250
     424:	54 e0       	ldi	r21, 0x04	; 4
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	8f ec       	ldi	r24, 0xCF	; 207
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
	
	OSMboxPost(SerialTxMBox, (void *)threeDollarSign); //enter command mode
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	80 91 f7 03 	lds	r24, 0x03F7
     43a:	90 91 f8 03 	lds	r25, 0x03F8
     43e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     442:	80 e9       	ldi	r24, 0x90	; 144
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)baudString); //set baud to 38400
     44a:	64 e0       	ldi	r22, 0x04	; 4
     44c:	71 e0       	ldi	r23, 0x01	; 1
     44e:	80 91 f7 03 	lds	r24, 0x03F7
     452:	90 91 f8 03 	lds	r25, 0x03F8
     456:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     45a:	80 e9       	ldi	r24, 0x90	; 144
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     462:	6e e0       	ldi	r22, 0x0E	; 14
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	80 91 f7 03 	lds	r24, 0x03F7
     46a:	90 91 f8 03 	lds	r25, 0x03F8
     46e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     472:	10 92 05 06 	sts	0x0605, r1
     476:	10 92 06 06 	sts	0x0606, r1
     47a:	10 92 07 06 	sts	0x0607, r1
     47e:	10 92 08 06 	sts	0x0608, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     482:	88 ec       	ldi	r24, 0xC8	; 200
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
     48a:	f3 cf       	rjmp	.-26     	; 0x472 <TaskStart+0x8c>

0000048c <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	68 97       	sbiw	r28, 0x18	; 24
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
			CommRxBuff[digitCounter] = '\r';
			CommRxBuff[digitCounter + 1] = '\n';
			
			while (digitCounter >= 0)
			{
				CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fa e0       	ldi	r31, 0x0A	; 10
     4a4:	ef 2e       	mov	r14, r31
     4a6:	f1 2c       	mov	r15, r1
     4a8:	f0 2d       	mov	r31, r0
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     4aa:	0f 2e       	mov	r0, r31
     4ac:	fd e0       	ldi	r31, 0x0D	; 13
     4ae:	cf 2e       	mov	r12, r31
     4b0:	f0 2d       	mov	r31, r0
			CommRxBuff[digitCounter + 1] = '\n';
     4b2:	0f 2e       	mov	r0, r31
     4b4:	fa e0       	ldi	r31, 0x0A	; 10
     4b6:	df 2e       	mov	r13, r31
     4b8:	f0 2d       	mov	r31, r0
		}
		else
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
     4ba:	a1 2c       	mov	r10, r1
     4bc:	b1 2c       	mov	r11, r1
		//}
		*/
		
		if (rotaryInput == 0)
		{
			CommRxBuff[0] = '0';
     4be:	0f 2e       	mov	r0, r31
     4c0:	f0 e3       	ldi	r31, 0x30	; 48
     4c2:	9f 2e       	mov	r9, r31
     4c4:	f0 2d       	mov	r31, r0
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     4c6:	86 b1       	in	r24, 0x06	; 6
     4c8:	e9 b1       	in	r30, 0x09	; 9
     4ca:	e0 7f       	andi	r30, 0xF0	; 240
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]); 
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e8 59       	subi	r30, 0x98	; 152
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	e4 91       	lpm	r30, Z
		//{
			//rotaryInput = 0;
		//}
		*/
		
		if (rotaryInput == 0)
     4d8:	e1 11       	cpse	r30, r1
     4da:	0d c0       	rjmp	.+26     	; 0x4f6 <AngleOutputTask+0x6a>
		{
			CommRxBuff[0] = '0';
     4dc:	99 82       	std	Y+1, r9	; 0x01
			CommRxBuff[1] = '\r';
     4de:	ca 82       	std	Y+2, r12	; 0x02
			CommRxBuff[2] = '\n';
     4e0:	db 82       	std	Y+3, r13	; 0x03
			OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	80 91 f7 03 	lds	r24, 0x03F7
     4ec:	90 91 f8 03 	lds	r25, 0x03F8
     4f0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
     4f4:	39 c0       	rjmp	.+114    	; 0x568 <AngleOutputTask+0xdc>
		}
		else
		{
			tempInt = rotaryInput;
     4f6:	2e 2f       	mov	r18, r30
     4f8:	30 e0       	ldi	r19, 0x00	; 0
			
			digitCounter = 0;
			
			while(tempInt != 0)
     4fa:	21 15       	cp	r18, r1
     4fc:	31 05       	cpc	r19, r1
     4fe:	c9 f1       	breq	.+114    	; 0x572 <AngleOutputTask+0xe6>
			CommRxBuff[2] = '\n';
			OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
		}
		else
		{
			tempInt = rotaryInput;
     500:	c9 01       	movw	r24, r18
			
			digitCounter = 0;
     502:	0a 2d       	mov	r16, r10
     504:	1b 2d       	mov	r17, r11
			
			while(tempInt != 0)
			{
				digitCounter++;
     506:	f8 01       	movw	r30, r16
     508:	31 96       	adiw	r30, 0x01	; 1
				tempInt = tempInt / 10;
     50a:	b7 01       	movw	r22, r14
     50c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divmodhi4>
     510:	cb 01       	movw	r24, r22
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
			
			while(tempInt != 0)
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	11 f0       	breq	.+4      	; 0x51a <AngleOutputTask+0x8e>
			{
				digitCounter++;
     516:	8f 01       	movw	r16, r30
     518:	f6 cf       	rjmp	.-20     	; 0x506 <AngleOutputTask+0x7a>
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     51a:	a1 e0       	ldi	r26, 0x01	; 1
     51c:	b0 e0       	ldi	r27, 0x00	; 0
     51e:	ac 0f       	add	r26, r28
     520:	bd 1f       	adc	r27, r29
     522:	ae 0f       	add	r26, r30
     524:	bf 1f       	adc	r27, r31
     526:	cc 92       	st	X, r12
			CommRxBuff[digitCounter + 1] = '\n';
     528:	a3 e0       	ldi	r26, 0x03	; 3
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ac 0f       	add	r26, r28
     52e:	bd 1f       	adc	r27, r29
     530:	a0 0f       	add	r26, r16
     532:	b1 1f       	adc	r27, r17
     534:	dc 92       	st	X, r13
			
			while (digitCounter >= 0)
     536:	ff 23       	and	r31, r31
     538:	04 f5       	brge	.+64     	; 0x57a <AngleOutputTask+0xee>
     53a:	0d c0       	rjmp	.+26     	; 0x556 <AngleOutputTask+0xca>
			{
				CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     53c:	31 97       	sbiw	r30, 0x01	; 1
     53e:	c9 01       	movw	r24, r18
     540:	b7 01       	movw	r22, r14
     542:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divmodhi4>
     546:	80 5d       	subi	r24, 0xD0	; 208
     548:	d8 01       	movw	r26, r16
     54a:	8e 93       	st	-X, r24
     54c:	8d 01       	movw	r16, r26
				digitCounter--;
				tempInt = tempInt / 10;
     54e:	26 2f       	mov	r18, r22
     550:	37 2f       	mov	r19, r23
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
			CommRxBuff[digitCounter + 1] = '\n';
			
			while (digitCounter >= 0)
     552:	ff 23       	and	r31, r31
     554:	9c f7       	brge	.-26     	; 0x53c <AngleOutputTask+0xb0>
			}
			// END Turn number value into serial ^
			
			if(CommRxBuff)
			{
				OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	80 91 f7 03 	lds	r24, 0x03F7
     560:	90 91 f8 03 	lds	r25, 0x03F8
     564:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
			}
		}
					
		OSTimeDly(OS_TICKS_PER_SEC);	// relinquish CPU
     568:	88 ec       	ldi	r24, 0xC8	; 200
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
    }	
     570:	aa cf       	rjmp	.-172    	; 0x4c6 <AngleOutputTask+0x3a>
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     572:	c9 82       	std	Y+1, r12	; 0x01
			CommRxBuff[digitCounter + 1] = '\n';
     574:	da 82       	std	Y+2, r13	; 0x02
		}
		else
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
     576:	ea 2d       	mov	r30, r10
     578:	fb 2d       	mov	r31, r11
     57a:	01 e0       	ldi	r16, 0x01	; 1
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	0c 0f       	add	r16, r28
     580:	1d 1f       	adc	r17, r29
     582:	0e 0f       	add	r16, r30
     584:	1f 1f       	adc	r17, r31
     586:	da cf       	rjmp	.-76     	; 0x53c <AngleOutputTask+0xb0>

00000588 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	69 97       	sbiw	r28, 0x19	; 25
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
     59c:	68 94       	set
     59e:	ee 24       	eor	r14, r14
     5a0:	e1 f8       	bld	r14, 1
		OSMboxPost(LedMBox, (void *)&tmp);
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "[Hi]\n\r");
     5a2:	17 e0       	ldi	r17, 0x07	; 7
		OSMboxPost(SerialTxMBox, (void *)TextMessage);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
     5a4:	ff 24       	eor	r15, r15
     5a6:	f3 94       	inc	r15
		OSMboxPost(LedMBox, (void *)&tmp);	
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "[Med]\n\r");
     5a8:	08 e0       	ldi	r16, 0x08	; 8
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
     5aa:	80 ed       	ldi	r24, 0xD0	; 208
     5ac:	97 e0       	ldi	r25, 0x07	; 7
     5ae:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
     5b2:	e9 82       	std	Y+1, r14	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     5b4:	be 01       	movw	r22, r28
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	80 91 73 03 	lds	r24, 0x0373
     5be:	90 91 74 03 	lds	r25, 0x0374
     5c2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "[Hi]\n\r");
     5c6:	ef e1       	ldi	r30, 0x1F	; 31
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	de 01       	movw	r26, r28
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	81 2f       	mov	r24, r17
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	8a 95       	dec	r24
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <TimerTask+0x48>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     5d8:	be 01       	movw	r22, r28
     5da:	6e 5f       	subi	r22, 0xFE	; 254
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	80 91 f7 03 	lds	r24, 0x03F7
     5e2:	90 91 f8 03 	lds	r25, 0x03F8
     5e6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
     5ea:	80 ed       	ldi	r24, 0xD0	; 208
     5ec:	97 e0       	ldi	r25, 0x07	; 7
     5ee:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
     5f2:	f9 82       	std	Y+1, r15	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	80 91 73 03 	lds	r24, 0x0373
     5fe:	90 91 74 03 	lds	r25, 0x0374
     602:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "[Med]\n\r");
     606:	e6 e2       	ldi	r30, 0x26	; 38
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	de 01       	movw	r26, r28
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	80 2f       	mov	r24, r16
     610:	01 90       	ld	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <TimerTask+0x88>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     618:	be 01       	movw	r22, r28
     61a:	6e 5f       	subi	r22, 0xFE	; 254
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	80 91 f7 03 	lds	r24, 0x03F7
     622:	90 91 f8 03 	lds	r25, 0x03F8
     626:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
     62a:	80 ed       	ldi	r24, 0xD0	; 208
     62c:	97 e0       	ldi	r25, 0x07	; 7
     62e:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
     632:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	80 91 73 03 	lds	r24, 0x0373
     63e:	90 91 74 03 	lds	r25, 0x0374
     642:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
		//strcpy(TextMessage, "NO ERR STATE\n\r");
		strcpy(TextMessage, "[No]\n\r");
     646:	ee e2       	ldi	r30, 0x2E	; 46
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	de 01       	movw	r26, r28
     64c:	12 96       	adiw	r26, 0x02	; 2
     64e:	81 2f       	mov	r24, r17
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	8a 95       	dec	r24
     656:	e1 f7       	brne	.-8      	; 0x650 <TimerTask+0xc8>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     658:	be 01       	movw	r22, r28
     65a:	6e 5f       	subi	r22, 0xFE	; 254
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	80 91 f7 03 	lds	r24, 0x03F7
     662:	90 91 f8 03 	lds	r25, 0x03F8
     666:	0e 94 0d 07 	call	0xe1a	; 0xe1a <OSMboxPost>
     66a:	9f cf       	rjmp	.-194    	; 0x5aa <TimerTask+0x22>

0000066c <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     66c:	0d ec       	ldi	r16, 0xCD	; 205
     66e:	1c ec       	ldi	r17, 0xCC	; 204
     670:	dc ec       	ldi	r29, 0xCC	; 204
     672:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     674:	81 2c       	mov	r8, r1
     676:	91 2c       	mov	r9, r1
     678:	68 94       	set
     67a:	aa 24       	eor	r10, r10
     67c:	a7 f8       	bld	r10, 7
     67e:	0f 2e       	mov	r0, r31
     680:	ff e3       	ldi	r31, 0x3F	; 63
     682:	bf 2e       	mov	r11, r31
     684:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     686:	41 2c       	mov	r4, r1
     688:	51 2c       	mov	r5, r1
     68a:	61 2c       	mov	r6, r1
     68c:	0f 2e       	mov	r0, r31
     68e:	ff e3       	ldi	r31, 0x3F	; 63
     690:	7f 2e       	mov	r7, r31
     692:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     694:	0f 2e       	mov	r0, r31
     696:	fd ec       	ldi	r31, 0xCD	; 205
     698:	2f 2e       	mov	r2, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	0f 2e       	mov	r0, r31
     69e:	fc ec       	ldi	r31, 0xCC	; 204
     6a0:	3f 2e       	mov	r3, r31
     6a2:	f0 2d       	mov	r31, r0
     6a4:	0d c0       	rjmp	.+26     	; 0x6c0 <LedTask+0x54>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     6a6:	0d ec       	ldi	r16, 0xCD	; 205
     6a8:	1c ec       	ldi	r17, 0xCC	; 204
     6aa:	dc ec       	ldi	r29, 0xCC	; 204
     6ac:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     6ae:	81 2c       	mov	r8, r1
     6b0:	91 2c       	mov	r9, r1
     6b2:	68 94       	set
     6b4:	aa 24       	eor	r10, r10
     6b6:	a7 f8       	bld	r10, 7
     6b8:	0f 2e       	mov	r0, r31
     6ba:	ff e3       	ldi	r31, 0x3F	; 63
     6bc:	bf 2e       	mov	r11, r31
     6be:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     6c0:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6c2:	28 2d       	mov	r18, r8
     6c4:	39 2d       	mov	r19, r9
     6c6:	4a 2d       	mov	r20, r10
     6c8:	5b 2d       	mov	r21, r11
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	9f e3       	ldi	r25, 0x3F	; 63
     6d2:	0e 94 83 09 	call	0x1306	; 0x1306 <__divsf3>
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	20 2f       	mov	r18, r16
     6dc:	31 2f       	mov	r19, r17
     6de:	4d 2f       	mov	r20, r29
     6e0:	5c 2f       	mov	r21, r28
     6e2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__mulsf3>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	48 e4       	ldi	r20, 0x48	; 72
     6ec:	53 e4       	ldi	r21, 0x43	; 67
     6ee:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__mulsf3>
     6f2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixunssfsi>
     6f6:	cb 01       	movw	r24, r22
     6f8:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     6fc:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6fe:	20 2f       	mov	r18, r16
     700:	31 2f       	mov	r19, r17
     702:	4d 2f       	mov	r20, r29
     704:	5c 2f       	mov	r21, r28
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e8       	ldi	r24, 0x80	; 128
     70c:	9f e3       	ldi	r25, 0x3F	; 63
     70e:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__mulsf3>
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	48 e4       	ldi	r20, 0x48	; 72
     724:	53 e4       	ldi	r21, 0x43	; 67
     726:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__mulsf3>
     72a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fixunssfsi>
     72e:	cb 01       	movw	r24, r22
     730:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     734:	80 91 73 03 	lds	r24, 0x0373
     738:	90 91 74 03 	lds	r25, 0x0374
     73c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	09 f4       	brne	.+2      	; 0x746 <LedTask+0xda>
     744:	bd cf       	rjmp	.-134    	; 0x6c0 <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	c9 f0       	breq	.+50     	; 0x780 <LedTask+0x114>
     74e:	08 f4       	brcc	.+2      	; 0x752 <LedTask+0xe6>
     750:	aa cf       	rjmp	.-172    	; 0x6a6 <LedTask+0x3a>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	09 f0       	breq	.+2      	; 0x758 <LedTask+0xec>
     756:	b4 cf       	rjmp	.-152    	; 0x6c0 <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     758:	04 2d       	mov	r16, r4
     75a:	15 2d       	mov	r17, r5
     75c:	d6 2d       	mov	r29, r6
     75e:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     760:	0f 2e       	mov	r0, r31
     762:	fa e9       	ldi	r31, 0x9A	; 154
     764:	8f 2e       	mov	r8, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	f9 e9       	ldi	r31, 0x99	; 153
     76c:	9f 2e       	mov	r9, r31
     76e:	f0 2d       	mov	r31, r0
     770:	0f 2e       	mov	r0, r31
     772:	f9 e1       	ldi	r31, 0x19	; 25
     774:	af 2e       	mov	r10, r31
     776:	f0 2d       	mov	r31, r0
     778:	68 94       	set
     77a:	bb 24       	eor	r11, r11
     77c:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     77e:	a0 cf       	rjmp	.-192    	; 0x6c0 <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     780:	04 2d       	mov	r16, r4
     782:	15 2d       	mov	r17, r5
     784:	d6 2d       	mov	r29, r6
     786:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     788:	82 2c       	mov	r8, r2
     78a:	93 2c       	mov	r9, r3
     78c:	0f 2e       	mov	r0, r31
     78e:	fc ec       	ldi	r31, 0xCC	; 204
     790:	af 2e       	mov	r10, r31
     792:	f0 2d       	mov	r31, r0
     794:	0f 2e       	mov	r0, r31
     796:	fe e3       	ldi	r31, 0x3E	; 62
     798:	bf 2e       	mov	r11, r31
     79a:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     79c:	91 cf       	rjmp	.-222    	; 0x6c0 <LedTask+0x54>

0000079e <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	69 97       	sbiw	r28, 0x19	; 25
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f1 ec       	ldi	r31, 0xC1	; 193
     7b6:	cf 2e       	mov	r12, r31
     7b8:	d1 2c       	mov	r13, r1
     7ba:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7bc:	81 2c       	mov	r8, r1
     7be:	91 2c       	mov	r9, r1
     7c0:	a1 2c       	mov	r10, r1
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f6 ec       	ldi	r31, 0xC6	; 198
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f1 2c       	mov	r15, r1
     7ca:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
     7cc:	88 ec       	ldi	r24, 0xC8	; 200
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     7d4:	80 91 f7 03 	lds	r24, 0x03F7
     7d8:	90 91 f8 03 	lds	r25, 0x03F8
     7dc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <OSMboxAccept>
		
		if(msg != NULL){
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	89 f1       	breq	.+98     	; 0x846 <SerialTransmitTask+0xa8>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     7e4:	bc 01       	movw	r22, r24
     7e6:	ce 01       	movw	r24, r28
     7e8:	02 96       	adiw	r24, 0x02	; 2
     7ea:	0e 94 2f 0b 	call	0x165e	; 0x165e <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     7ee:	f6 01       	movw	r30, r12
     7f0:	80 81       	ld	r24, Z
     7f2:	86 60       	ori	r24, 0x06	; 6
     7f4:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	88 23       	and	r24, r24
     7fa:	29 f1       	breq	.+74     	; 0x846 <SerialTransmitTask+0xa8>
     7fc:	08 2d       	mov	r16, r8
     7fe:	19 2d       	mov	r17, r9
     800:	ba 2c       	mov	r11, r10
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     802:	ae 01       	movw	r20, r28
     804:	4f 5f       	subi	r20, 0xFF	; 255
     806:	5f 4f       	sbci	r21, 0xFF	; 255
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	80 91 79 04 	lds	r24, 0x0479
     810:	90 91 7a 04 	lds	r25, 0x047A
     814:	0e 94 4c 07 	call	0xe98	; 0xe98 <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     818:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     81a:	e2 e0       	ldi	r30, 0x02	; 2
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	ec 0f       	add	r30, r28
     820:	fd 1f       	adc	r31, r29
     822:	e0 0f       	add	r30, r16
     824:	f1 1f       	adc	r31, r17
     826:	80 81       	ld	r24, Z
     828:	f7 01       	movw	r30, r14
     82a:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     82c:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     82e:	b3 94       	inc	r11
     830:	0b 2d       	mov	r16, r11
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	e2 e0       	ldi	r30, 0x02	; 2
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ec 0f       	add	r30, r28
     83a:	fd 1f       	adc	r31, r29
     83c:	e0 0f       	add	r30, r16
     83e:	f1 1f       	adc	r31, r17
     840:	80 81       	ld	r24, Z
     842:	81 11       	cpse	r24, r1
     844:	de cf       	rjmp	.-68     	; 0x802 <SerialTransmitTask+0x64>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     846:	f6 01       	movw	r30, r12
     848:	80 81       	ld	r24, Z
     84a:	89 7f       	andi	r24, 0xF9	; 249
     84c:	80 83       	st	Z, r24
	}
     84e:	be cf       	rjmp	.-132    	; 0x7cc <SerialTransmitTask+0x2e>

00000850 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     850:	0e 94 52 04 	call	0x8a4	; 0x8a4 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     854:	0e 94 01 08 	call	0x1002	; 0x1002 <OSInit>
	
	USART_Init();
     858:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSMboxCreate>
     864:	90 93 74 03 	sts	0x0374, r25
     868:	80 93 73 03 	sts	0x0373, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSMboxCreate>
     874:	90 93 f8 03 	sts	0x03F8, r25
     878:	80 93 f7 03 	sts	0x03F7, r24
	SerialTxSem = OSSemCreate(1);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 2f 07 	call	0xe5e	; 0xe5e <OSSemCreate>
     884:	90 93 7a 04 	sts	0x047A, r25
     888:	80 93 79 04 	sts	0x0479, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	4a ef       	ldi	r20, 0xFA	; 250
     890:	55 e0       	ldi	r21, 0x05	; 5
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	83 ef       	ldi	r24, 0xF3	; 243
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     89e:	0e 94 0b 06 	call	0xc16	; 0xc16 <OSStart>
     8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <main+0x52>

000008a4 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     8a4:	f8 94       	cli
	WatchDogReset();
     8a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     8aa:	84 b7       	in	r24, 0x34	; 52
     8ac:	87 7f       	andi	r24, 0xF7	; 247
     8ae:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     8b0:	e0 e6       	ldi	r30, 0x60	; 96
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	88 61       	ori	r24, 0x18	; 24
     8b8:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     8ba:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     8bc:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     8be:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     8c0:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     8c2:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     8c4:	87 b1       	in	r24, 0x07	; 7
     8c6:	80 7f       	andi	r24, 0xF0	; 240
     8c8:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     8ca:	8a b1       	in	r24, 0x0a	; 10
     8cc:	8f 70       	andi	r24, 0x0F	; 15
     8ce:	8a b9       	out	0x0a, r24	; 10
	// END TEAM ROTARY
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     8d4:	8d e0       	ldi	r24, 0x0D	; 13
     8d6:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     8d8:	82 e1       	ldi	r24, 0x12	; 18
     8da:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     8dc:	ee e6       	ldi	r30, 0x6E	; 110
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	81 60       	ori	r24, 0x01	; 1
     8e4:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     8e6:	e4 e6       	ldi	r30, 0x64	; 100
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     8f0:	78 94       	sei
     8f2:	08 95       	ret

000008f4 <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     8f4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     8f8:	89 e1       	ldi	r24, 0x19	; 25
     8fa:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     8fe:	88 e1       	ldi	r24, 0x18	; 24
     900:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     904:	8e e0       	ldi	r24, 0x0E	; 14
     906:	80 93 c2 00 	sts	0x00C2, r24
     90a:	08 95       	ret

0000090c <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     90c:	fa 01       	movw	r30, r20
     90e:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     910:	31 97       	sbiw	r30, 0x01	; 1
     912:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     928:	31 97       	sbiw	r30, 0x01	; 1
     92a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     93c:	31 97       	sbiw	r30, 0x01	; 1
     93e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     950:	31 97       	sbiw	r30, 0x01	; 1
     952:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     968:	31 97       	sbiw	r30, 0x01	; 1
     96a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     980:	31 97       	sbiw	r30, 0x01	; 1
     982:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	80 e8       	ldi	r24, 0x80	; 128
     998:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     99a:	ca 01       	movw	r24, r20
     99c:	83 97       	sbiw	r24, 0x23	; 35
     99e:	08 95       	ret

000009a0 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     9a0:	08 95       	ret

000009a2 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     9a2:	08 95       	ret

000009a4 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     9a4:	08 95       	ret

000009a6 <OSTaskIdle>:

void OSTaskIdle (void *pdata)
{
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    for (;;) {
        OS_ENTER_CRITICAL();
     9a6:	f8 94       	cli
        OSIdleCtr++;
        OS_EXIT_CRITICAL();
     9a8:	78 94       	sei
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <OSTaskIdle>

000009ac <OSEventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
{
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
    INT8U   bitx;
    INT8U   bity;
    INT8U   prio;


    y    = OSUnMapTbl[pevent->OSEventGrp];            /* Find highest prio. task waiting for message   */
     9b4:	fc 01       	movw	r30, r24
     9b6:	05 85       	ldd	r16, Z+13	; 0x0d
     9b8:	e0 2f       	mov	r30, r16
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	eb 5c       	subi	r30, 0xCB	; 203
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	10 81       	ld	r17, Z
    bity = OSMapTbl[y];
     9c2:	21 2f       	mov	r18, r17
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	d9 01       	movw	r26, r18
     9c8:	ab 5c       	subi	r26, 0xCB	; 203
     9ca:	bd 4f       	sbci	r27, 0xFD	; 253
     9cc:	dc 91       	ld	r29, X
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     9ce:	fc 01       	movw	r30, r24
     9d0:	e2 0f       	add	r30, r18
     9d2:	f3 1f       	adc	r31, r19
     9d4:	52 81       	ldd	r21, Z+2	; 0x02
     9d6:	a5 2f       	mov	r26, r21
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	ab 5c       	subi	r26, 0xCB	; 203
     9dc:	be 4f       	sbci	r27, 0xFE	; 254
     9de:	cc 91       	ld	r28, X
    bitx = OSMapTbl[x];
     9e0:	ac 2f       	mov	r26, r28
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	ab 5c       	subi	r26, 0xCB	; 203
     9e6:	bd 4f       	sbci	r27, 0xFD	; 253
     9e8:	ac 91       	ld	r26, X
    prio = (INT8U)((y << 3) + x);                     /* Find priority of task getting the msg         */
     9ea:	11 0f       	add	r17, r17
     9ec:	11 0f       	add	r17, r17
     9ee:	11 0f       	add	r17, r17
     9f0:	c1 0f       	add	r28, r17
    if ((pevent->OSEventTbl[y] &= ~bitx) == 0) {      /* Remove this task from the waiting list        */
     9f2:	ba 2f       	mov	r27, r26
     9f4:	b0 95       	com	r27
     9f6:	5b 23       	and	r21, r27
     9f8:	52 83       	std	Z+2, r21	; 0x02
     9fa:	51 11       	cpse	r21, r1
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <OSEventTaskRdy+0x5c>
        pevent->OSEventGrp &= ~bity;
     9fe:	5d 2f       	mov	r21, r29
     a00:	50 95       	com	r21
     a02:	05 23       	and	r16, r21
     a04:	fc 01       	movw	r30, r24
     a06:	05 87       	std	Z+13, r16	; 0x0d
    }
    ptcb                 =  OSTCBPrioTbl[prio];       /* Point to this task's OS_TCB                   */
     a08:	ec 2f       	mov	r30, r28
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 54       	subi	r30, 0x4E	; 78
     a12:	f9 4f       	sbci	r31, 0xF9	; 249
     a14:	01 90       	ld	r0, Z+
     a16:	f0 81       	ld	r31, Z
     a18:	e0 2d       	mov	r30, r0
    ptcb->OSTCBDly       =  0;                        /* Prevent OSTimeTick() from readying task       */
     a1a:	13 86       	std	Z+11, r1	; 0x0b
     a1c:	12 86       	std	Z+10, r1	; 0x0a
    ptcb->OSTCBEventPtr  = (OS_EVENT *)0;             /* Unlink ECB from this task                     */
     a1e:	17 82       	std	Z+7, r1	; 0x07
     a20:	16 82       	std	Z+6, r1	; 0x06
#if (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN
    ptcb->OSTCBMsg       = msg;                       /* Send message directly to waiting task         */
     a22:	71 87       	std	Z+9, r23	; 0x09
     a24:	60 87       	std	Z+8, r22	; 0x08
#else
    msg                  = msg;                       /* Prevent compiler warning if not used          */    
#endif    
    ptcb->OSTCBStat     &= ~msk;                      /* Clear bit associated with event type          */
     a26:	40 95       	com	r20
     a28:	84 85       	ldd	r24, Z+12	; 0x0c
     a2a:	48 23       	and	r20, r24
     a2c:	44 87       	std	Z+12, r20	; 0x0c
    if (ptcb->OSTCBStat == OS_STAT_RDY) {             /* See if task is ready (could be susp'd)        */
     a2e:	41 11       	cpse	r20, r1
     a30:	0b c0       	rjmp	.+22     	; 0xa48 <OSEventTaskRdy+0x9c>
        OSRdyGrp        |=  bity;                     /* Put task in the ready to run list             */
     a32:	80 91 13 06 	lds	r24, 0x0613
     a36:	d8 2b       	or	r29, r24
     a38:	d0 93 13 06 	sts	0x0613, r29
        OSRdyTbl[y]     |=  bitx;
     a3c:	f9 01       	movw	r30, r18
     a3e:	ec 5e       	subi	r30, 0xEC	; 236
     a40:	f9 4f       	sbci	r31, 0xF9	; 249
     a42:	80 81       	ld	r24, Z
     a44:	a8 2b       	or	r26, r24
     a46:	a0 83       	st	Z, r26
    }
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <OSEventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTaskWait (OS_EVENT *pevent)
{
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
    OSTCBCur->OSTCBEventPtr = pevent;            /* Store pointer to event control block in TCB        */
     a56:	e0 91 1f 06 	lds	r30, 0x061F
     a5a:	f0 91 20 06 	lds	r31, 0x0620
     a5e:	97 83       	std	Z+7, r25	; 0x07
     a60:	86 83       	std	Z+6, r24	; 0x06
    if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {      /* Task no longer ready      */
     a62:	a7 85       	ldd	r26, Z+15	; 0x0f
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	20 89       	ldd	r18, Z+16	; 0x10
     a68:	ed 01       	movw	r28, r26
     a6a:	cc 5e       	subi	r28, 0xEC	; 236
     a6c:	d9 4f       	sbci	r29, 0xF9	; 249
     a6e:	42 2f       	mov	r20, r18
     a70:	40 95       	com	r20
     a72:	38 81       	ld	r19, Y
     a74:	34 23       	and	r19, r20
     a76:	38 83       	st	Y, r19
     a78:	31 11       	cpse	r19, r1
     a7a:	07 c0       	rjmp	.+14     	; 0xa8a <OSEventTaskWait+0x38>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
     a7c:	31 89       	ldd	r19, Z+17	; 0x11
     a7e:	30 95       	com	r19
     a80:	40 91 13 06 	lds	r20, 0x0613
     a84:	34 23       	and	r19, r20
     a86:	30 93 13 06 	sts	0x0613, r19
    }
    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting list  */
     a8a:	a8 0f       	add	r26, r24
     a8c:	b9 1f       	adc	r27, r25
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	3c 91       	ld	r19, X
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	23 2b       	or	r18, r19
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	2c 93       	st	X, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     a9a:	dc 01       	movw	r26, r24
     a9c:	1d 96       	adiw	r26, 0x0d	; 13
     a9e:	3c 91       	ld	r19, X
     aa0:	1d 97       	sbiw	r26, 0x0d	; 13
     aa2:	21 89       	ldd	r18, Z+17	; 0x11
     aa4:	23 2b       	or	r18, r19
     aa6:	1d 96       	adiw	r26, 0x0d	; 13
     aa8:	2c 93       	st	X, r18
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <OSEventTO>:
*********************************************************************************************************
*/
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventTO (OS_EVENT *pevent)
{
    if ((pevent->OSEventTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {
     ab0:	e0 91 1f 06 	lds	r30, 0x061F
     ab4:	f0 91 20 06 	lds	r31, 0x0620
     ab8:	27 85       	ldd	r18, Z+15	; 0x0f
     aba:	dc 01       	movw	r26, r24
     abc:	a2 0f       	add	r26, r18
     abe:	b1 1d       	adc	r27, r1
     ac0:	20 89       	ldd	r18, Z+16	; 0x10
     ac2:	20 95       	com	r18
     ac4:	12 96       	adiw	r26, 0x02	; 2
     ac6:	3c 91       	ld	r19, X
     ac8:	12 97       	sbiw	r26, 0x02	; 2
     aca:	23 23       	and	r18, r19
     acc:	12 96       	adiw	r26, 0x02	; 2
     ace:	2c 93       	st	X, r18
     ad0:	21 11       	cpse	r18, r1
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <OSEventTO+0x36>
        pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
     ad4:	21 89       	ldd	r18, Z+17	; 0x11
     ad6:	20 95       	com	r18
     ad8:	dc 01       	movw	r26, r24
     ada:	1d 96       	adiw	r26, 0x0d	; 13
     adc:	3c 91       	ld	r19, X
     ade:	1d 97       	sbiw	r26, 0x0d	; 13
     ae0:	23 23       	and	r18, r19
     ae2:	1d 96       	adiw	r26, 0x0d	; 13
     ae4:	2c 93       	st	X, r18
    }
    OSTCBCur->OSTCBStat     = OS_STAT_RDY;       /* Set status to ready                                */
     ae6:	14 86       	std	Z+12, r1	; 0x0c
    OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /* No longer waiting for event                        */
     ae8:	17 82       	std	Z+7, r1	; 0x07
     aea:	16 82       	std	Z+6, r1	; 0x06
     aec:	08 95       	ret

00000aee <OSEventWaitListInit>:
#if  (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_MBOX_EN || OS_SEM_EN
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
     aee:	fc 01       	movw	r30, r24
     af0:	15 86       	std	Z+13, r1	; 0x0d
     af2:	32 96       	adiw	r30, 0x02	; 2
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     af4:	80 e0       	ldi	r24, 0x00	; 0
        pevent->OSEventTbl[i] = 0x00;
     af6:	11 92       	st	Z+, r1
void  OSEventWaitListInit (OS_EVENT *pevent)
{
    INT8U i;
    
    pevent->OSEventGrp = 0x00;                   /* No task waiting on event                           */
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	88 30       	cpi	r24, 0x08	; 8
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <OSEventWaitListInit+0x8>
        pevent->OSEventTbl[i] = 0x00;
    }
}
     afe:	08 95       	ret

00000b00 <OSIntExit>:
*********************************************************************************************************
*/

void OSIntExit (void)
{
    OS_ENTER_CRITICAL();
     b00:	f8 94       	cli
    if ((--OSIntNesting | OSLockNesting) == 0) { /* Reschedule only if all ISRs completed & not locked */
     b02:	80 91 1e 06 	lds	r24, 0x061E
     b06:	81 50       	subi	r24, 0x01	; 1
     b08:	80 93 1e 06 	sts	0x061E, r24
     b0c:	90 91 fb 05 	lds	r25, 0x05FB
     b10:	89 2b       	or	r24, r25
     b12:	e1 f5       	brne	.+120    	; 0xb8c <OSIntExit+0x8c>
        OSIntExitY    = OSUnMapTbl[OSRdyGrp];
     b14:	e0 91 13 06 	lds	r30, 0x0613
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	eb 5c       	subi	r30, 0xCB	; 203
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	80 81       	ld	r24, Z
     b20:	80 93 72 03 	sts	0x0372, r24
        OSPrioHighRdy = (INT8U)((OSIntExitY << 3) + OSUnMapTbl[OSRdyTbl[OSIntExitY]]);
     b24:	e8 2f       	mov	r30, r24
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ec 5e       	subi	r30, 0xEC	; 236
     b2a:	f9 4f       	sbci	r31, 0xF9	; 249
     b2c:	e0 81       	ld	r30, Z
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	eb 5c       	subi	r30, 0xCB	; 203
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	88 0f       	add	r24, r24
     b36:	88 0f       	add	r24, r24
     b38:	88 0f       	add	r24, r24
     b3a:	90 81       	ld	r25, Z
     b3c:	89 0f       	add	r24, r25
     b3e:	80 93 01 06 	sts	0x0601, r24
        if (OSPrioHighRdy != OSPrioCur) {        /* No context switch if current task is highest ready */
     b42:	90 91 02 06 	lds	r25, 0x0602
     b46:	89 17       	cp	r24, r25
     b48:	09 f1       	breq	.+66     	; 0xb8c <OSIntExit+0x8c>
            OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     b4a:	e8 2f       	mov	r30, r24
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	ee 54       	subi	r30, 0x4E	; 78
     b54:	f9 4f       	sbci	r31, 0xF9	; 249
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	90 93 12 06 	sts	0x0612, r25
     b5e:	80 93 11 06 	sts	0x0611, r24
            OSCtxSwCtr++;                        /* Keep track of the number of context switches       */
     b62:	80 91 05 06 	lds	r24, 0x0605
     b66:	90 91 06 06 	lds	r25, 0x0606
     b6a:	a0 91 07 06 	lds	r26, 0x0607
     b6e:	b0 91 08 06 	lds	r27, 0x0608
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	a1 1d       	adc	r26, r1
     b76:	b1 1d       	adc	r27, r1
     b78:	80 93 05 06 	sts	0x0605, r24
     b7c:	90 93 06 06 	sts	0x0606, r25
     b80:	a0 93 07 06 	sts	0x0607, r26
     b84:	b0 93 08 06 	sts	0x0608, r27
            OSIntCtxSw();                        /* Perform interrupt level context switch             */
     b88:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
        }
    }
    OS_EXIT_CRITICAL();
     b8c:	78 94       	sei
     b8e:	08 95       	ret

00000b90 <OSSched>:
void OSSched (void)
{
    INT8U y;


    OS_ENTER_CRITICAL();
     b90:	f8 94       	cli
    if ((OSLockNesting | OSIntNesting) == 0) {   /* Task scheduling must be enabled and not ISR level  */
     b92:	90 91 1e 06 	lds	r25, 0x061E
     b96:	80 91 fb 05 	lds	r24, 0x05FB
     b9a:	89 2b       	or	r24, r25
     b9c:	d1 f5       	brne	.+116    	; 0xc12 <OSSched+0x82>
        y             = OSUnMapTbl[OSRdyGrp];    /* Get pointer to highest priority task ready to run  */
     b9e:	e0 91 13 06 	lds	r30, 0x0613
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	eb 5c       	subi	r30, 0xCB	; 203
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	80 81       	ld	r24, Z
        OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
     baa:	e8 2f       	mov	r30, r24
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ec 5e       	subi	r30, 0xEC	; 236
     bb0:	f9 4f       	sbci	r31, 0xF9	; 249
     bb2:	e0 81       	ld	r30, Z
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	eb 5c       	subi	r30, 0xCB	; 203
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	88 0f       	add	r24, r24
     bbc:	88 0f       	add	r24, r24
     bbe:	88 0f       	add	r24, r24
     bc0:	90 81       	ld	r25, Z
     bc2:	e8 2f       	mov	r30, r24
     bc4:	e9 0f       	add	r30, r25
     bc6:	e0 93 01 06 	sts	0x0601, r30
        if (OSPrioHighRdy != OSPrioCur) {         /* No context switch if current task is highest ready */
     bca:	80 91 02 06 	lds	r24, 0x0602
     bce:	e8 17       	cp	r30, r24
     bd0:	01 f1       	breq	.+64     	; 0xc12 <OSSched+0x82>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	ee 54       	subi	r30, 0x4E	; 78
     bda:	f9 4f       	sbci	r31, 0xF9	; 249
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	90 93 12 06 	sts	0x0612, r25
     be4:	80 93 11 06 	sts	0x0611, r24
            OSCtxSwCtr++;                        /* Increment context switch counter                   */
     be8:	80 91 05 06 	lds	r24, 0x0605
     bec:	90 91 06 06 	lds	r25, 0x0606
     bf0:	a0 91 07 06 	lds	r26, 0x0607
     bf4:	b0 91 08 06 	lds	r27, 0x0608
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	a1 1d       	adc	r26, r1
     bfc:	b1 1d       	adc	r27, r1
     bfe:	80 93 05 06 	sts	0x0605, r24
     c02:	90 93 06 06 	sts	0x0606, r25
     c06:	a0 93 07 06 	sts	0x0607, r26
     c0a:	b0 93 08 06 	sts	0x0608, r27
#if 1
			//DebugPulse ();
#endif	
			
#if 1			
            OS_TASK_SW();                        /* Perform a context switch                           */
     c0e:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
#endif
        }
    }
    OS_EXIT_CRITICAL();
     c12:	78 94       	sei
     c14:	08 95       	ret

00000c16 <OSStart>:
#if 0
	DebugPulse();
#endif	
	
	
    if (OSRunning == FALSE) {
     c16:	80 91 fc 05 	lds	r24, 0x05FC
     c1a:	81 11       	cpse	r24, r1
     c1c:	26 c0       	rjmp	.+76     	; 0xc6a <OSStart+0x54>
        y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority number   */
     c1e:	e0 91 13 06 	lds	r30, 0x0613
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	eb 5c       	subi	r30, 0xCB	; 203
     c26:	fe 4f       	sbci	r31, 0xFE	; 254
     c28:	e0 81       	ld	r30, Z
        x             = OSUnMapTbl[OSRdyTbl[y]];
     c2a:	ae 2f       	mov	r26, r30
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ac 5e       	subi	r26, 0xEC	; 236
     c30:	b9 4f       	sbci	r27, 0xF9	; 249
     c32:	ac 91       	ld	r26, X
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ab 5c       	subi	r26, 0xCB	; 203
     c38:	be 4f       	sbci	r27, 0xFE	; 254
        OSPrioHighRdy = (INT8U)((y << 3) + x);
     c3a:	ee 0f       	add	r30, r30
     c3c:	ee 0f       	add	r30, r30
     c3e:	ee 0f       	add	r30, r30
     c40:	8c 91       	ld	r24, X
     c42:	e8 0f       	add	r30, r24
     c44:	e0 93 01 06 	sts	0x0601, r30
        OSPrioCur     = OSPrioHighRdy;
     c48:	e0 93 02 06 	sts	0x0602, r30
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	ee 54       	subi	r30, 0x4E	; 78
     c54:	f9 4f       	sbci	r31, 0xF9	; 249
     c56:	80 81       	ld	r24, Z
     c58:	91 81       	ldd	r25, Z+1	; 0x01
     c5a:	90 93 12 06 	sts	0x0612, r25
     c5e:	80 93 11 06 	sts	0x0611, r24
        OSTCBCur      = OSTCBHighRdy;
     c62:	90 93 20 06 	sts	0x0620, r25
     c66:	80 93 1f 06 	sts	0x061F, r24
    }
	
	
#if 1
	OSStartHighRdy();                            /* Execute target specific code to start task     */
     c6a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
     c6e:	08 95       	ret

00000c70 <OSTCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U OSTCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT16U stk_size, void *pext, INT16U opt)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
    OS_TCB *ptcb;


    OS_ENTER_CRITICAL();
     c74:	f8 94       	cli
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
     c76:	e0 91 0d 06 	lds	r30, 0x060D
     c7a:	f0 91 0e 06 	lds	r31, 0x060E
    if (ptcb != (OS_TCB *)0) {
     c7e:	30 97       	sbiw	r30, 0x00	; 0
     c80:	09 f4       	brne	.+2      	; 0xc84 <OSTCBInit+0x14>
     c82:	4f c0       	rjmp	.+158    	; 0xd22 <OSTCBInit+0xb2>
        OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list          */
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	33 81       	ldd	r19, Z+3	; 0x03
     c88:	30 93 0e 06 	sts	0x060E, r19
     c8c:	20 93 0d 06 	sts	0x060D, r18
        OS_EXIT_CRITICAL();
     c90:	78 94       	sei
        ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB                */
     c92:	71 83       	std	Z+1, r23	; 0x01
     c94:	60 83       	st	Z, r22
        ptcb->OSTCBPrio      = (INT8U)prio;                /* Load task priority into TCB              */
     c96:	85 87       	std	Z+13, r24	; 0x0d
        ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                     */
     c98:	14 86       	std	Z+12, r1	; 0x0c
        ptcb->OSTCBDly       = 0;                          /* Task is not delayed                      */
     c9a:	13 86       	std	Z+11, r1	; 0x0b
     c9c:	12 86       	std	Z+10, r1	; 0x0a

#if OS_TASK_DEL_EN        
        ptcb->OSTCBDelReq    = OS_NO_ERR;
#endif

        ptcb->OSTCBY         = prio >> 3;                  /* Pre-compute X, Y, BitX and BitY          */
     c9e:	c8 2f       	mov	r28, r24
     ca0:	c6 95       	lsr	r28
     ca2:	c6 95       	lsr	r28
     ca4:	c6 95       	lsr	r28
     ca6:	c7 87       	std	Z+15, r28	; 0x0f
        ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	cb 5c       	subi	r28, 0xCB	; 203
     cac:	dd 4f       	sbci	r29, 0xFD	; 253
     cae:	98 81       	ld	r25, Y
     cb0:	91 8b       	std	Z+17, r25	; 0x11
        ptcb->OSTCBX         = prio & 0x07;
     cb2:	c8 2f       	mov	r28, r24
     cb4:	c7 70       	andi	r28, 0x07	; 7
     cb6:	c6 87       	std	Z+14, r28	; 0x0e
        ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	cb 5c       	subi	r28, 0xCB	; 203
     cbc:	dd 4f       	sbci	r29, 0xFD	; 253
     cbe:	98 81       	ld	r25, Y
     cc0:	90 8b       	std	Z+16, r25	; 0x10

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2)) || OS_SEM_EN
        ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event          */
     cc2:	17 82       	std	Z+7, r1	; 0x07
     cc4:	16 82       	std	Z+6, r1	; 0x06
#endif

#if     OS_MBOX_EN || (OS_Q_EN && (OS_MAX_QS >= 2))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
     cc6:	11 86       	std	Z+9, r1	; 0x09
     cc8:	10 86       	std	Z+8, r1	; 0x08
#endif

        OS_ENTER_CRITICAL();
     cca:	f8 94       	cli
        OSTCBPrioTbl[prio]   = ptcb;
     ccc:	a8 2f       	mov	r26, r24
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	aa 0f       	add	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	ae 54       	subi	r26, 0x4E	; 78
     cd6:	b9 4f       	sbci	r27, 0xF9	; 249
     cd8:	ed 93       	st	X+, r30
     cda:	fc 93       	st	X, r31
        ptcb->OSTCBNext      = OSTCBList;                  /* Link into TCB chain                      */
     cdc:	a0 91 03 06 	lds	r26, 0x0603
     ce0:	b0 91 04 06 	lds	r27, 0x0604
     ce4:	b3 83       	std	Z+3, r27	; 0x03
     ce6:	a2 83       	std	Z+2, r26	; 0x02
        ptcb->OSTCBPrev      = (OS_TCB *)0;
     ce8:	15 82       	std	Z+5, r1	; 0x05
     cea:	14 82       	std	Z+4, r1	; 0x04
        if (OSTCBList != (OS_TCB *)0) {
     cec:	10 97       	sbiw	r26, 0x00	; 0
     cee:	21 f0       	breq	.+8      	; 0xcf8 <OSTCBInit+0x88>
            OSTCBList->OSTCBPrev = ptcb;
     cf0:	15 96       	adiw	r26, 0x05	; 5
     cf2:	fc 93       	st	X, r31
     cf4:	ee 93       	st	-X, r30
     cf6:	14 97       	sbiw	r26, 0x04	; 4
        }
        OSTCBList               = ptcb;
     cf8:	f0 93 04 06 	sts	0x0604, r31
     cfc:	e0 93 03 06 	sts	0x0603, r30
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
     d00:	90 91 13 06 	lds	r25, 0x0613
     d04:	81 89       	ldd	r24, Z+17	; 0x11
     d06:	89 2b       	or	r24, r25
     d08:	80 93 13 06 	sts	0x0613, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     d0c:	a7 85       	ldd	r26, Z+15	; 0x0f
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ac 5e       	subi	r26, 0xEC	; 236
     d12:	b9 4f       	sbci	r27, 0xF9	; 249
     d14:	9c 91       	ld	r25, X
     d16:	80 89       	ldd	r24, Z+16	; 0x10
     d18:	89 2b       	or	r24, r25
     d1a:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
     d1c:	78 94       	sei
        return (OS_NO_ERR);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <OSTCBInit+0xb6>
    } else {
        OS_EXIT_CRITICAL();
     d22:	78 94       	sei
        return (OS_NO_MORE_TCB);
     d24:	86 e4       	ldi	r24, 0x46	; 70
    }
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <OSTimeTick>:

void OSTimeTick (void)
{
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
     d2c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OSTimeTickHook>
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
     d30:	e0 91 03 06 	lds	r30, 0x0603
     d34:	f0 91 04 06 	lds	r31, 0x0604
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     d38:	85 85       	ldd	r24, Z+13	; 0x0d
     d3a:	8f 33       	cpi	r24, 0x3F	; 63
     d3c:	39 f1       	breq	.+78     	; 0xd8c <OSTimeTick+0x60>
     d3e:	40 91 13 06 	lds	r20, 0x0613
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
     d46:	f8 94       	cli
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
     d48:	82 85       	ldd	r24, Z+10	; 0x0a
     d4a:	93 85       	ldd	r25, Z+11	; 0x0b
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	a9 f0       	breq	.+42     	; 0xd7a <OSTimeTick+0x4e>
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	93 87       	std	Z+11, r25	; 0x0b
     d54:	82 87       	std	Z+10, r24	; 0x0a
     d56:	89 2b       	or	r24, r25
     d58:	81 f4       	brne	.+32     	; 0xd7a <OSTimeTick+0x4e>
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
     d5a:	84 85       	ldd	r24, Z+12	; 0x0c
     d5c:	83 fd       	sbrc	r24, 3
     d5e:	0b c0       	rjmp	.+22     	; 0xd76 <OSTimeTick+0x4a>
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     d60:	81 89       	ldd	r24, Z+17	; 0x11
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     d62:	a7 85       	ldd	r26, Z+15	; 0x0f
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ac 5e       	subi	r26, 0xEC	; 236
     d68:	b9 4f       	sbci	r27, 0xF9	; 249
     d6a:	5c 91       	ld	r21, X
     d6c:	90 89       	ldd	r25, Z+16	; 0x10
     d6e:	95 2b       	or	r25, r21
     d70:	9c 93       	st	X, r25
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
        OS_ENTER_CRITICAL();
        if (ptcb->OSTCBDly != 0) {                         /* Delayed or waiting for event with TO     */
            if (--ptcb->OSTCBDly == 0) {                   /* Decrement nbr of ticks to end of delay   */
                if (!(ptcb->OSTCBStat & OS_STAT_SUSPEND)) {    /* Is task suspended?                   */
                    OSRdyGrp               |= ptcb->OSTCBBitY; /* No,  Make task Rdy to Run (timed out)*/
     d72:	48 2b       	or	r20, r24
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <OSTimeTick+0x4e>
                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
                } else {                                       /* Yes, Leave 1 tick to prevent ...     */
                    ptcb->OSTCBDly = 1;                        /* ... loosing the task when the ...    */
     d76:	33 87       	std	Z+11, r19	; 0x0b
     d78:	22 87       	std	Z+10, r18	; 0x0a
                }                                              /* ... suspension is removed.           */
            }
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
     d7a:	02 80       	ldd	r0, Z+2	; 0x02
     d7c:	f3 81       	ldd	r31, Z+3	; 0x03
     d7e:	e0 2d       	mov	r30, r0
        OS_EXIT_CRITICAL();
     d80:	78 94       	sei
    OS_TCB *ptcb;

    OSTimeTickHook();                                      /* Call user definable hook                 */
	
    ptcb = OSTCBList;                                      /* Point at first TCB in TCB list           */
    while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {              /* Go through all TCBs in TCB list          */
     d82:	85 85       	ldd	r24, Z+13	; 0x0d
     d84:	8f 33       	cpi	r24, 0x3F	; 63
     d86:	f9 f6       	brne	.-66     	; 0xd46 <OSTimeTick+0x1a>
     d88:	40 93 13 06 	sts	0x0613, r20
        }
        ptcb = ptcb->OSTCBNext;                            /* Point at next TCB in TCB list            */
        OS_EXIT_CRITICAL();
    }
	
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter           */
     d8c:	f8 94       	cli
    OSTime++;
     d8e:	80 91 21 06 	lds	r24, 0x0621
     d92:	90 91 22 06 	lds	r25, 0x0622
     d96:	a0 91 23 06 	lds	r26, 0x0623
     d9a:	b0 91 24 06 	lds	r27, 0x0624
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	a1 1d       	adc	r26, r1
     da2:	b1 1d       	adc	r27, r1
     da4:	80 93 21 06 	sts	0x0621, r24
     da8:	90 93 22 06 	sts	0x0622, r25
     dac:	a0 93 23 06 	sts	0x0623, r26
     db0:	b0 93 24 06 	sts	0x0624, r27
    OS_EXIT_CRITICAL();
     db4:	78 94       	sei
     db6:	08 95       	ret

00000db8 <OSMboxAccept>:
*              == (void *)0  if the mailbox is empty or if you didn't pass the proper event pointer.
*********************************************************************************************************
*/

void *OSMboxAccept (OS_EVENT *pevent)
{
     db8:	fc 01       	movw	r30, r24
    void  *msg;


    OS_ENTER_CRITICAL();
     dba:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
     dbc:	84 85       	ldd	r24, Z+12	; 0x0c
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	21 f0       	breq	.+8      	; 0xdca <OSMboxAccept+0x12>
        OS_EXIT_CRITICAL();
     dc2:	78 94       	sei
        return ((void *)0);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	08 95       	ret
    }
    msg = pevent->OSEventPtr; 
     dca:	20 81       	ld	r18, Z
     dcc:	31 81       	ldd	r19, Z+1	; 0x01
    if (msg != (void *)0) {                               /* See if there is already a message         */
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <OSMboxAccept+0x20>
        pevent->OSEventPtr = (void *)0;                   /* Clear the mailbox                         */
     dd4:	11 82       	std	Z+1, r1	; 0x01
     dd6:	10 82       	st	Z, r1
    }
    OS_EXIT_CRITICAL();
     dd8:	78 94       	sei
    return (msg);                                         /* Return the message received (or NULL)     */
     dda:	82 2f       	mov	r24, r18
     ddc:	93 2f       	mov	r25, r19
}
     dde:	08 95       	ret

00000de0 <OSMboxCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSMboxCreate (void *msg)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     de4:	f8 94       	cli
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
     de6:	c0 91 1c 06 	lds	r28, 0x061C
     dea:	d0 91 1d 06 	lds	r29, 0x061D
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
     dee:	20 97       	sbiw	r28, 0x00	; 0
     df0:	31 f0       	breq	.+12     	; 0xdfe <OSMboxCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     df2:	28 81       	ld	r18, Y
     df4:	39 81       	ldd	r19, Y+1	; 0x01
     df6:	30 93 1d 06 	sts	0x061D, r19
     dfa:	20 93 1c 06 	sts	0x061C, r18
    }
    OS_EXIT_CRITICAL();
     dfe:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {
     e00:	20 97       	sbiw	r28, 0x00	; 0
     e02:	39 f0       	breq	.+14     	; 0xe12 <OSMboxCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_MBOX;
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventPtr  = msg;               /* Deposit message in event control block             */
     e08:	99 83       	std	Y+1, r25	; 0x01
     e0a:	88 83       	st	Y, r24
        OSEventWaitListInit(pevent);
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 77 05 	call	0xaee	; 0xaee <OSEventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
}
     e12:	ce 01       	movw	r24, r28
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <OSMboxPost>:
*********************************************************************************************************
*/

INT8U OSMboxPost (OS_EVENT *pevent, void *msg)
{
    OS_ENTER_CRITICAL();
     e1a:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
     e1c:	fc 01       	movw	r30, r24
     e1e:	24 85       	ldd	r18, Z+12	; 0x0c
     e20:	21 30       	cpi	r18, 0x01	; 1
     e22:	19 f0       	breq	.+6      	; 0xe2a <OSMboxPost+0x10>
        OS_EXIT_CRITICAL();
     e24:	78 94       	sei
        return (OS_ERR_EVENT_TYPE);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	08 95       	ret
    }
    if (pevent->OSEventGrp) {                         /* See if any task pending on mailbox            */
     e2a:	fc 01       	movw	r30, r24
     e2c:	25 85       	ldd	r18, Z+13	; 0x0d
     e2e:	22 23       	and	r18, r18
     e30:	41 f0       	breq	.+16     	; 0xe42 <OSMboxPost+0x28>
        OSEventTaskRdy(pevent, msg, OS_STAT_MBOX);    /* Ready highest priority task waiting on event  */
     e32:	42 e0       	ldi	r20, 0x02	; 2
     e34:	0e 94 d6 04 	call	0x9ac	; 0x9ac <OSEventTaskRdy>
        OS_EXIT_CRITICAL();
     e38:	78 94       	sei
        OSSched();                                    /* Find highest priority task ready to run       */
     e3a:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSSched>
        return (OS_NO_ERR);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret
    } else {
        if (pevent->OSEventPtr != (void *)0) {        /* Make sure mailbox doesn't already have a msg  */
     e42:	fc 01       	movw	r30, r24
     e44:	20 81       	ld	r18, Z
     e46:	31 81       	ldd	r19, Z+1	; 0x01
     e48:	23 2b       	or	r18, r19
     e4a:	19 f0       	breq	.+6      	; 0xe52 <OSMboxPost+0x38>
            OS_EXIT_CRITICAL();
     e4c:	78 94       	sei
            return (OS_MBOX_FULL);
     e4e:	84 e1       	ldi	r24, 0x14	; 20
     e50:	08 95       	ret
        } else {
            pevent->OSEventPtr = msg;                 /* Place message in mailbox                      */
     e52:	fc 01       	movw	r30, r24
     e54:	71 83       	std	Z+1, r23	; 0x01
     e56:	60 83       	st	Z, r22
            OS_EXIT_CRITICAL();
     e58:	78 94       	sei
            return (OS_NO_ERR);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
     e5c:	08 95       	ret

00000e5e <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT *OSSemCreate (INT16U cnt)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
    OS_EVENT *pevent;


    OS_ENTER_CRITICAL();
     e62:	f8 94       	cli
    pevent = OSEventFreeList;                              /* Get next free event control block        */
     e64:	c0 91 1c 06 	lds	r28, 0x061C
     e68:	d0 91 1d 06 	lds	r29, 0x061D
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
     e6c:	20 97       	sbiw	r28, 0x00	; 0
     e6e:	31 f0       	breq	.+12     	; 0xe7c <OSSemCreate+0x1e>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
     e70:	28 81       	ld	r18, Y
     e72:	39 81       	ldd	r19, Y+1	; 0x01
     e74:	30 93 1d 06 	sts	0x061D, r19
     e78:	20 93 1c 06 	sts	0x061C, r18
    }
    OS_EXIT_CRITICAL();
     e7c:	78 94       	sei
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
     e7e:	20 97       	sbiw	r28, 0x00	; 0
     e80:	39 f0       	breq	.+14     	; 0xe90 <OSSemCreate+0x32>
        pevent->OSEventType = OS_EVENT_TYPE_SEM;
     e82:	23 e0       	ldi	r18, 0x03	; 3
     e84:	2c 87       	std	Y+12, r18	; 0x0c
        pevent->OSEventCnt  = cnt;                         /* Set semaphore value                      */
     e86:	9b 87       	std	Y+11, r25	; 0x0b
     e88:	8a 87       	std	Y+10, r24	; 0x0a
        OSEventWaitListInit(pevent);
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 77 05 	call	0xaee	; 0xaee <OSEventWaitListInit>
    }
    return (pevent);
}
     e90:	ce 01       	movw	r24, r28
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/

void OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
{
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
     ea2:	8a 01       	movw	r16, r20
    OS_ENTER_CRITICAL();
     ea4:	f8 94       	cli
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
     ea6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <OSSemPend+0x1c>
        OS_EXIT_CRITICAL();
     eac:	78 94       	sei
        *err = OS_ERR_EVENT_TYPE;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	fa 01       	movw	r30, r20
     eb2:	80 83       	st	Z, r24
    }
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	39 f0       	breq	.+14     	; 0xeca <OSSemPend+0x32>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	9b 87       	std	Y+11, r25	; 0x0b
     ec0:	8a 87       	std	Y+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
     ec2:	78 94       	sei
        *err = OS_NO_ERR;
     ec4:	f8 01       	movw	r30, r16
     ec6:	10 82       	st	Z, r1
     ec8:	2d c0       	rjmp	.+90     	; 0xf24 <OSSemPend+0x8c>
    } else if (OSIntNesting > 0) {                    /* See if called from ISR ...                    */
     eca:	80 91 1e 06 	lds	r24, 0x061E
     ece:	88 23       	and	r24, r24
     ed0:	29 f0       	breq	.+10     	; 0xedc <OSSemPend+0x44>
        OS_EXIT_CRITICAL();                           /* ... can't PEND from an ISR                    */
     ed2:	78 94       	sei
        *err = OS_ERR_PEND_ISR;
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 83       	st	Z, r24
     eda:	24 c0       	rjmp	.+72     	; 0xf24 <OSSemPend+0x8c>
    } else {                                          /* Otherwise, must wait until event occurs       */
        OSTCBCur->OSTCBStat    |= OS_STAT_SEM;        /* Resource not available, pend on semaphore     */
     edc:	e0 91 1f 06 	lds	r30, 0x061F
     ee0:	f0 91 20 06 	lds	r31, 0x0620
     ee4:	84 85       	ldd	r24, Z+12	; 0x0c
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	84 87       	std	Z+12, r24	; 0x0c
        OSTCBCur->OSTCBDly      = timeout;            /* Store pend timeout in TCB                     */
     eea:	73 87       	std	Z+11, r23	; 0x0b
     eec:	62 87       	std	Z+10, r22	; 0x0a
        OSEventTaskWait(pevent);                      /* Suspend task until event or timeout occurs    */
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 29 05 	call	0xa52	; 0xa52 <OSEventTaskWait>
        OS_EXIT_CRITICAL();
     ef4:	78 94       	sei
        OSSched();                                    /* Find next highest priority task ready         */
     ef6:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSSched>
        OS_ENTER_CRITICAL();
     efa:	f8 94       	cli
        if (OSTCBCur->OSTCBStat & OS_STAT_SEM) {      /* Must have timed out if still waiting for event*/
     efc:	e0 91 1f 06 	lds	r30, 0x061F
     f00:	f0 91 20 06 	lds	r31, 0x0620
     f04:	84 85       	ldd	r24, Z+12	; 0x0c
     f06:	80 ff       	sbrs	r24, 0
     f08:	08 c0       	rjmp	.+16     	; 0xf1a <OSSemPend+0x82>
            OSEventTO(pevent);
     f0a:	ce 01       	movw	r24, r28
     f0c:	0e 94 58 05 	call	0xab0	; 0xab0 <OSEventTO>
            OS_EXIT_CRITICAL();
     f10:	78 94       	sei
            *err = OS_TIMEOUT;                        /* Indicate that didn't get event within TO      */
     f12:	8a e0       	ldi	r24, 0x0A	; 10
     f14:	f8 01       	movw	r30, r16
     f16:	80 83       	st	Z, r24
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <OSSemPend+0x8c>
        } else {
            OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;
     f1a:	17 82       	std	Z+7, r1	; 0x07
     f1c:	16 82       	std	Z+6, r1	; 0x06
            OS_EXIT_CRITICAL();
     f1e:	78 94       	sei
            *err = OS_NO_ERR;
     f20:	f8 01       	movw	r30, r16
     f22:	10 82       	st	Z, r1
        }
    }
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN
INT8U OSTaskCreate (void (*task)(void *pd), void *pdata, OS_STK *ptos, INT8U prio)
{
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	b2 2e       	mov	r11, r18

#if 0
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
     f42:	2f e3       	ldi	r18, 0x3F	; 63
     f44:	2b 15       	cp	r18, r11
     f46:	08 f4       	brcc	.+2      	; 0xf4a <OSTaskCreate+0x1c>
     f48:	4f c0       	rjmp	.+158    	; 0xfe8 <OSTaskCreate+0xba>
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
    }
    OS_ENTER_CRITICAL();
     f4a:	f8 94       	cli
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
     f4c:	cb 2d       	mov	r28, r11
     f4e:	d0 e0       	ldi	r29, 0x00	; 0
     f50:	fe 01       	movw	r30, r28
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	ee 54       	subi	r30, 0x4E	; 78
     f58:	f9 4f       	sbci	r31, 0xF9	; 249
     f5a:	01 90       	ld	r0, Z+
     f5c:	f0 81       	ld	r31, Z
     f5e:	e0 2d       	mov	r30, r0
     f60:	ef 2b       	or	r30, r31
     f62:	09 f0       	breq	.+2      	; 0xf66 <OSTaskCreate+0x38>
     f64:	3e c0       	rjmp	.+124    	; 0xfe2 <OSTaskCreate+0xb4>
        OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing ...  */
     f66:	fe 01       	movw	r30, r28
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	ee 54       	subi	r30, 0x4E	; 78
     f6e:	f9 4f       	sbci	r31, 0xF9	; 249
     f70:	21 e0       	ldi	r18, 0x01	; 1
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
     f78:	78 94       	sei
		
        psp = (void *)OSTaskStkInit(task, pdata, ptos, 0); /* Initialize the task's stack              */
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	0e 94 86 04 	call	0x90c	; 0x90c <OSTaskStkInit>
		
        err = OSTCBInit(prio, psp, (void *)0, 0, 0, (void *)0, 0);         
     f82:	c1 2c       	mov	r12, r1
     f84:	d1 2c       	mov	r13, r1
     f86:	e1 2c       	mov	r14, r1
     f88:	f1 2c       	mov	r15, r1
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	bc 01       	movw	r22, r24
     f98:	8b 2d       	mov	r24, r11
     f9a:	0e 94 38 06 	call	0xc70	; 0xc70 <OSTCBInit>
        if (err == OS_NO_ERR) {
     f9e:	81 11       	cpse	r24, r1
     fa0:	17 c0       	rjmp	.+46     	; 0xfd0 <OSTaskCreate+0xa2>
            OS_ENTER_CRITICAL();
     fa2:	f8 94       	cli
            OSTaskCtr++;                                   /* Increment the #tasks counter             */
     fa4:	80 91 10 06 	lds	r24, 0x0610
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	80 93 10 06 	sts	0x0610, r24
            OSTaskCreateHook(OSTCBPrioTbl[prio]);          /* Call user defined hook                   */
     fae:	cc 0f       	add	r28, r28
     fb0:	dd 1f       	adc	r29, r29
     fb2:	ce 54       	subi	r28, 0x4E	; 78
     fb4:	d9 4f       	sbci	r29, 0xF9	; 249
     fb6:	88 81       	ld	r24, Y
     fb8:	99 81       	ldd	r25, Y+1	; 0x01
     fba:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <OSTaskCreateHook>
            OS_EXIT_CRITICAL();
     fbe:	78 94       	sei
            if (OSRunning) {                 /* Find highest priority task if multitasking has started */
     fc0:	80 91 fc 05 	lds	r24, 0x05FC
     fc4:	88 23       	and	r24, r24
     fc6:	91 f0       	breq	.+36     	; 0xfec <OSTaskCreate+0xbe>
#if 0
				DebugPulse();
#endif					
                OSSched();
     fc8:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSSched>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	0f c0       	rjmp	.+30     	; 0xfee <OSTaskCreate+0xc0>
				DebugPulse();
#endif					
                OSSched();
            }
        } else {
            OS_ENTER_CRITICAL();
     fd0:	f8 94       	cli
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
     fd2:	cc 0f       	add	r28, r28
     fd4:	dd 1f       	adc	r29, r29
     fd6:	ce 54       	subi	r28, 0x4E	; 78
     fd8:	d9 4f       	sbci	r29, 0xF9	; 249
     fda:	19 82       	std	Y+1, r1	; 0x01
     fdc:	18 82       	st	Y, r1
            OS_EXIT_CRITICAL();
     fde:	78 94       	sei
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <OSTaskCreate+0xc0>
		DebugPulse();
#endif	
		
        return (err);
    } else {
        OS_EXIT_CRITICAL();
     fe2:	78 94       	sei
        return (OS_PRIO_EXIST);
     fe4:	88 e2       	ldi	r24, 0x28	; 40
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <OSTaskCreate+0xc0>
	DebugPulse();
#endif	
	
    if (prio > OS_LOWEST_PRIO) 
	{             /* Make sure priority is within allowable range           */
        return (OS_PRIO_INVALID);
     fe8:	8a e2       	ldi	r24, 0x2A	; 42
     fea:	01 c0       	rjmp	.+2      	; 0xfee <OSTaskCreate+0xc0>

#if 0
		DebugPulse();
#endif	
		
        return (err);
     fec:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        OS_EXIT_CRITICAL();
        return (OS_PRIO_EXIST);
    }	
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	08 95       	ret

00001002 <OSInit>:
#if 0
	DebugPulse();
#endif	


    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1002:	10 92 21 06 	sts	0x0621, r1
    1006:	10 92 22 06 	sts	0x0622, r1
    100a:	10 92 23 06 	sts	0x0623, r1
    100e:	10 92 24 06 	sts	0x0624, r1
    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1012:	10 92 1e 06 	sts	0x061E, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1016:	10 92 fb 05 	sts	0x05FB, r1
#if OS_TASK_CREATE_EN  || OS_TASK_CREATE_EXT_EN || OS_TASK_DEL_EN
    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    101a:	10 92 10 06 	sts	0x0610, r1
#endif
    OSRunning     = FALSE;                                 /* Indicate that multitasking not started   */
    101e:	10 92 fc 05 	sts	0x05FC, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1022:	10 92 fd 05 	sts	0x05FD, r1
    1026:	10 92 fe 05 	sts	0x05FE, r1
    102a:	10 92 ff 05 	sts	0x05FF, r1
    102e:	10 92 00 06 	sts	0x0600, r1
#if OS_TASK_STAT_EN && OS_TASK_CREATE_EXT_EN
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    1032:	10 92 05 06 	sts	0x0605, r1
    1036:	10 92 06 06 	sts	0x0606, r1
    103a:	10 92 07 06 	sts	0x0607, r1
    103e:	10 92 08 06 	sts	0x0608, r1
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    1042:	10 92 13 06 	sts	0x0613, r1
    1046:	e4 e1       	ldi	r30, 0x14	; 20
    1048:	f6 e0       	ldi	r31, 0x06	; 6
    104a:	8c e1       	ldi	r24, 0x1C	; 28
    104c:	96 e0       	ldi	r25, 0x06	; 6
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        OSRdyTbl[i] = 0;
    104e:	11 92       	st	Z+, r1
    OSIdleCtrMax  = 0L;
    OSStatRdy     = FALSE;                                 /* Statistic task is not ready              */
#endif
    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1050:	e8 17       	cp	r30, r24
    1052:	f9 07       	cpc	r31, r25
    1054:	e1 f7       	brne	.-8      	; 0x104e <OSInit+0x4c>
        OSRdyTbl[i] = 0;
    }
                
    OSPrioCur     = 0;
    1056:	10 92 02 06 	sts	0x0602, r1
    OSPrioHighRdy = 0;                                           
    105a:	10 92 01 06 	sts	0x0601, r1
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    105e:	10 92 12 06 	sts	0x0612, r1
    1062:	10 92 11 06 	sts	0x0611, r1
    OSTCBCur      = (OS_TCB *)0;
    1066:	10 92 20 06 	sts	0x0620, r1
    106a:	10 92 1f 06 	sts	0x061F, r1
    OSTCBList     = (OS_TCB *)0;
    106e:	10 92 04 06 	sts	0x0604, r1
    1072:	10 92 03 06 	sts	0x0603, r1
    1076:	e2 eb       	ldi	r30, 0xB2	; 178
    1078:	f6 e0       	ldi	r31, 0x06	; 6
    107a:	82 e3       	ldi	r24, 0x32	; 50
    107c:	97 e0       	ldi	r25, 0x07	; 7
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    107e:	11 92       	st	Z+, r1
    1080:	11 92       	st	Z+, r1
    OSPrioCur     = 0;
    OSPrioHighRdy = 0;                                           
    OSTCBHighRdy  = (OS_TCB *)0;                                 /* TCB Initialization                 */
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
    1082:	e8 17       	cp	r30, r24
    1084:	f9 07       	cpc	r31, r25
    1086:	d9 f7       	brne	.-10     	; 0x107e <OSInit+0x7c>
    1088:	80 e5       	ldi	r24, 0x50	; 80
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	22 ef       	ldi	r18, 0xF2	; 242
    108e:	32 e0       	ldi	r19, 0x02	; 2
    1090:	fc 01       	movw	r30, r24
    1092:	70 97       	sbiw	r30, 0x10	; 16
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
    1098:	42 96       	adiw	r24, 0x12	; 18
    OSTCBCur      = (OS_TCB *)0;
    OSTCBList     = (OS_TCB *)0;
    for (i = 0; i < (OS_LOWEST_PRIO + 1); i++) {                 /* Clear the priority table           */
        OSTCBPrioTbl[i] = (OS_TCB *)0;
    }
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    109a:	82 17       	cp	r24, r18
    109c:	93 07       	cpc	r25, r19
    109e:	c1 f7       	brne	.-16     	; 0x1090 <OSInit+0x8e>
        OSTCBTbl[i].OSTCBNext = &OSTCBTbl[i + 1];
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    10a0:	10 92 e3 02 	sts	0x02E3, r1
    10a4:	10 92 e2 02 	sts	0x02E2, r1
    OSTCBFreeList                                         = &OSTCBTbl[0];
    10a8:	8e e3       	ldi	r24, 0x3E	; 62
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	90 93 0e 06 	sts	0x060E, r25
    10b0:	80 93 0d 06 	sts	0x060D, r24
    10b4:	83 e3       	ldi	r24, 0x33	; 51
    10b6:	96 e0       	ldi	r25, 0x06	; 6
    10b8:	21 eb       	ldi	r18, 0xB1	; 177
    10ba:	36 e0       	ldi	r19, 0x06	; 6
    10bc:	fc 01       	movw	r30, r24
    10be:	3e 97       	sbiw	r30, 0x0e	; 14

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	0e 96       	adiw	r24, 0x0e	; 14
    }
    OSTCBTbl[OS_MAX_TASKS + OS_N_SYS_TASKS - 1].OSTCBNext = (OS_TCB *)0;    /* Last OS_TCB             */
    OSTCBFreeList                                         = &OSTCBTbl[0];

#if OS_MAX_EVENTS >= 2
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {            /* Init. list of free EVENT control blocks  */
    10c6:	82 17       	cp	r24, r18
    10c8:	93 07       	cpc	r25, r19
    10ca:	c1 f7       	brne	.-16     	; 0x10bc <OSInit+0xba>
        OSEventTbl[i].OSEventPtr = (OS_EVENT *)&OSEventTbl[i + 1];
    }
    OSEventTbl[OS_MAX_EVENTS - 1].OSEventPtr = (OS_EVENT *)0;
    10cc:	10 92 a4 06 	sts	0x06A4, r1
    10d0:	10 92 a3 06 	sts	0x06A3, r1
    OSEventFreeList                          = &OSEventTbl[0];    
    10d4:	85 e2       	ldi	r24, 0x25	; 37
    10d6:	96 e0       	ldi	r25, 0x06	; 6
    10d8:	90 93 1d 06 	sts	0x061D, r25
    10dc:	80 93 1c 06 	sts	0x061C, r24
                    &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack                  */
                    OS_TASK_IDLE_STK_SIZE, 
                    (void *)0,                                 /* No TCB extension                     */
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + clear stack  */
    #else
    OSTaskCreate(OSTaskIdle, (void *)0, &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], OS_IDLE_PRIO);
    10e0:	2f e3       	ldi	r18, 0x3F	; 63
    10e2:	41 e7       	ldi	r20, 0x71	; 113
    10e4:	53 e0       	ldi	r21, 0x03	; 3
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	83 ed       	ldi	r24, 0xD3	; 211
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
                        (void *)0,                                /* No TCB extension                  */
                        OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + clear  */
        #endif
    #else
        #if OS_STK_GROWTH == 1
        OSTaskCreate(OSTaskStat, 
    10f2:	2e e3       	ldi	r18, 0x3E	; 62
    10f4:	41 e3       	ldi	r20, 0x31	; 49
    10f6:	53 e0       	ldi	r21, 0x03	; 3
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	8a ec       	ldi	r24, 0xCA	; 202
    10fe:	98 e0       	ldi	r25, 0x08	; 8
    1100:	0e 94 97 07 	call	0xf2e	; 0xf2e <OSTaskCreate>
    1104:	08 95       	ret

00001106 <OSTimeDly>:
*********************************************************************************************************
*/

void OSTimeDly (INT16U ticks)
{
    if (ticks > 0) {                                                      /* 0 means no delay!         */
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	e1 f0       	breq	.+56     	; 0x1142 <OSTimeDly+0x3c>
        OS_ENTER_CRITICAL();
    110a:	f8 94       	cli
        if ((OSRdyTbl[OSTCBCur->OSTCBY] &= ~OSTCBCur->OSTCBBitX) == 0) {  /* Delay current task        */
    110c:	e0 91 1f 06 	lds	r30, 0x061F
    1110:	f0 91 20 06 	lds	r31, 0x0620
    1114:	a7 85       	ldd	r26, Z+15	; 0x0f
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ac 5e       	subi	r26, 0xEC	; 236
    111a:	b9 4f       	sbci	r27, 0xF9	; 249
    111c:	20 89       	ldd	r18, Z+16	; 0x10
    111e:	20 95       	com	r18
    1120:	3c 91       	ld	r19, X
    1122:	23 23       	and	r18, r19
    1124:	2c 93       	st	X, r18
    1126:	21 11       	cpse	r18, r1
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <OSTimeDly+0x32>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    112a:	21 89       	ldd	r18, Z+17	; 0x11
    112c:	20 95       	com	r18
    112e:	30 91 13 06 	lds	r19, 0x0613
    1132:	23 23       	and	r18, r19
    1134:	20 93 13 06 	sts	0x0613, r18
        }
        OSTCBCur->OSTCBDly = ticks;                                       /* Load ticks in TCB         */
    1138:	93 87       	std	Z+11, r25	; 0x0b
    113a:	82 87       	std	Z+10, r24	; 0x0a
        OS_EXIT_CRITICAL();
    113c:	78 94       	sei
        OSSched();                                                        /* Find next task to run!    */
    113e:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSSched>
    1142:	08 95       	ret

00001144 <OSStatInit>:
*/

#if OS_TASK_STAT_EN
void OSStatInit (void)
{
    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
    OS_ENTER_CRITICAL();
    114c:	f8 94       	cli
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    114e:	10 92 fd 05 	sts	0x05FD, r1
    1152:	10 92 fe 05 	sts	0x05FE, r1
    1156:	10 92 ff 05 	sts	0x05FF, r1
    115a:	10 92 00 06 	sts	0x0600, r1
    OS_EXIT_CRITICAL();
    115e:	78 94       	sei
    OSTimeDly(OS_TICKS_PER_SEC);                 /* Determine MAX. idle counter value for 1 second     */
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
    OS_ENTER_CRITICAL();
    1168:	f8 94       	cli
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1 second       */
    116a:	80 91 fd 05 	lds	r24, 0x05FD
    116e:	90 91 fe 05 	lds	r25, 0x05FE
    1172:	a0 91 ff 05 	lds	r26, 0x05FF
    1176:	b0 91 00 06 	lds	r27, 0x0600
    117a:	80 93 09 06 	sts	0x0609, r24
    117e:	90 93 0a 06 	sts	0x060A, r25
    1182:	a0 93 0b 06 	sts	0x060B, r26
    1186:	b0 93 0c 06 	sts	0x060C, r27
    OSStatRdy    = TRUE;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 b1 06 	sts	0x06B1, r24
    OS_EXIT_CRITICAL();
    1190:	78 94       	sei
    1192:	08 95       	ret

00001194 <OSTaskStat>:
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    1194:	80 91 b1 06 	lds	r24, 0x06B1
    1198:	81 11       	cpse	r24, r1
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <OSTaskStat+0x18>
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    119c:	80 e9       	ldi	r24, 0x90	; 144
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
    INT32U run;
    INT8S  usage;
    
    
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
    11a4:	80 91 b1 06 	lds	r24, 0x06B1
    11a8:	88 23       	and	r24, r24
    11aa:	c1 f3       	breq	.-16     	; 0x119c <OSTaskStat+0x8>
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        if (OSIdleCtrMax > 0L) {
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    11ac:	c4 e6       	ldi	r28, 0x64	; 100
    pdata = pdata;                               /* Prevent compiler warning for not using 'pdata'     */
    while (OSStatRdy == FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC);             /* Wait until statistic task is ready                 */
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    11ae:	f8 94       	cli
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    11b0:	20 91 fd 05 	lds	r18, 0x05FD
    11b4:	30 91 fe 05 	lds	r19, 0x05FE
    11b8:	40 91 ff 05 	lds	r20, 0x05FF
    11bc:	50 91 00 06 	lds	r21, 0x0600
    11c0:	20 93 32 07 	sts	0x0732, r18
    11c4:	30 93 33 07 	sts	0x0733, r19
    11c8:	40 93 34 07 	sts	0x0734, r20
    11cc:	50 93 35 07 	sts	0x0735, r21
        run          = OSIdleCtr;
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    11d0:	10 92 fd 05 	sts	0x05FD, r1
    11d4:	10 92 fe 05 	sts	0x05FE, r1
    11d8:	10 92 ff 05 	sts	0x05FF, r1
    11dc:	10 92 00 06 	sts	0x0600, r1
        OS_EXIT_CRITICAL();
    11e0:	78 94       	sei
        if (OSIdleCtrMax > 0L) {
    11e2:	c0 90 09 06 	lds	r12, 0x0609
    11e6:	d0 90 0a 06 	lds	r13, 0x060A
    11ea:	e0 90 0b 06 	lds	r14, 0x060B
    11ee:	f0 90 0c 06 	lds	r15, 0x060C
    11f2:	c1 14       	cp	r12, r1
    11f4:	d1 04       	cpc	r13, r1
    11f6:	e1 04       	cpc	r14, r1
    11f8:	f1 04       	cpc	r15, r1
    11fa:	b9 f0       	breq	.+46     	; 0x122a <OSTaskStat+0x96>
            usage = (INT8S)(100L - 100L * run / OSIdleCtrMax);
    11fc:	a4 e6       	ldi	r26, 0x64	; 100
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	0e 94 10 0b 	call	0x1620	; 0x1620 <__muluhisi3>
    1204:	a7 01       	movw	r20, r14
    1206:	96 01       	movw	r18, r12
    1208:	0e 94 df 0a 	call	0x15be	; 0x15be <__udivmodsi4>
    120c:	8c 2f       	mov	r24, r28
    120e:	82 1b       	sub	r24, r18
            if (usage > 100) {
    1210:	85 36       	cpi	r24, 0x65	; 101
    1212:	1c f0       	brlt	.+6      	; 0x121a <OSTaskStat+0x86>
                OSCPUUsage = 100;
    1214:	c0 93 0f 06 	sts	0x060F, r28
    1218:	0a c0       	rjmp	.+20     	; 0x122e <OSTaskStat+0x9a>
            } else if (usage < 0) {
    121a:	88 23       	and	r24, r24
    121c:	1c f4       	brge	.+6      	; 0x1224 <OSTaskStat+0x90>
                OSCPUUsage =   0;
    121e:	10 92 0f 06 	sts	0x060F, r1
    1222:	05 c0       	rjmp	.+10     	; 0x122e <OSTaskStat+0x9a>
            } else {
                OSCPUUsage = usage;
    1224:	80 93 0f 06 	sts	0x060F, r24
    1228:	02 c0       	rjmp	.+4      	; 0x122e <OSTaskStat+0x9a>
            }
        } else {
            OSCPUUsage = 0;
    122a:	10 92 0f 06 	sts	0x060F, r1
        }
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    122e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <OSTaskStatHook>
        OSTimeDly(OS_TICKS_PER_SEC);             /* Accumulate OSIdleCtr for the next second           */
    1232:	88 ec       	ldi	r24, 0xC8	; 200
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 83 08 	call	0x1106	; 0x1106 <OSTimeDly>
    }
    123a:	b9 cf       	rjmp	.-142    	; 0x11ae <OSTaskStat+0x1a>

0000123c <__subsf3>:
    123c:	50 58       	subi	r21, 0x80	; 128

0000123e <__addsf3>:
    123e:	bb 27       	eor	r27, r27
    1240:	aa 27       	eor	r26, r26
    1242:	0e d0       	rcall	.+28     	; 0x1260 <__addsf3x>
    1244:	0b c1       	rjmp	.+534    	; 0x145c <__fp_round>
    1246:	fc d0       	rcall	.+504    	; 0x1440 <__fp_pscA>
    1248:	30 f0       	brcs	.+12     	; 0x1256 <__addsf3+0x18>
    124a:	01 d1       	rcall	.+514    	; 0x144e <__fp_pscB>
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__addsf3+0x18>
    124e:	31 f4       	brne	.+12     	; 0x125c <__addsf3+0x1e>
    1250:	9f 3f       	cpi	r25, 0xFF	; 255
    1252:	11 f4       	brne	.+4      	; 0x1258 <__addsf3+0x1a>
    1254:	1e f4       	brtc	.+6      	; 0x125c <__addsf3+0x1e>
    1256:	f1 c0       	rjmp	.+482    	; 0x143a <__fp_nan>
    1258:	0e f4       	brtc	.+2      	; 0x125c <__addsf3+0x1e>
    125a:	e0 95       	com	r30
    125c:	e7 fb       	bst	r30, 7
    125e:	e7 c0       	rjmp	.+462    	; 0x142e <__fp_inf>

00001260 <__addsf3x>:
    1260:	e9 2f       	mov	r30, r25
    1262:	0d d1       	rcall	.+538    	; 0x147e <__fp_split3>
    1264:	80 f3       	brcs	.-32     	; 0x1246 <__addsf3+0x8>
    1266:	ba 17       	cp	r27, r26
    1268:	62 07       	cpc	r22, r18
    126a:	73 07       	cpc	r23, r19
    126c:	84 07       	cpc	r24, r20
    126e:	95 07       	cpc	r25, r21
    1270:	18 f0       	brcs	.+6      	; 0x1278 <__addsf3x+0x18>
    1272:	71 f4       	brne	.+28     	; 0x1290 <__addsf3x+0x30>
    1274:	9e f5       	brtc	.+102    	; 0x12dc <__addsf3x+0x7c>
    1276:	25 c1       	rjmp	.+586    	; 0x14c2 <__fp_zero>
    1278:	0e f4       	brtc	.+2      	; 0x127c <__addsf3x+0x1c>
    127a:	e0 95       	com	r30
    127c:	0b 2e       	mov	r0, r27
    127e:	ba 2f       	mov	r27, r26
    1280:	a0 2d       	mov	r26, r0
    1282:	0b 01       	movw	r0, r22
    1284:	b9 01       	movw	r22, r18
    1286:	90 01       	movw	r18, r0
    1288:	0c 01       	movw	r0, r24
    128a:	ca 01       	movw	r24, r20
    128c:	a0 01       	movw	r20, r0
    128e:	11 24       	eor	r1, r1
    1290:	ff 27       	eor	r31, r31
    1292:	59 1b       	sub	r21, r25
    1294:	99 f0       	breq	.+38     	; 0x12bc <__addsf3x+0x5c>
    1296:	59 3f       	cpi	r21, 0xF9	; 249
    1298:	50 f4       	brcc	.+20     	; 0x12ae <__addsf3x+0x4e>
    129a:	50 3e       	cpi	r21, 0xE0	; 224
    129c:	68 f1       	brcs	.+90     	; 0x12f8 <__addsf3x+0x98>
    129e:	1a 16       	cp	r1, r26
    12a0:	f0 40       	sbci	r31, 0x00	; 0
    12a2:	a2 2f       	mov	r26, r18
    12a4:	23 2f       	mov	r18, r19
    12a6:	34 2f       	mov	r19, r20
    12a8:	44 27       	eor	r20, r20
    12aa:	58 5f       	subi	r21, 0xF8	; 248
    12ac:	f3 cf       	rjmp	.-26     	; 0x1294 <__addsf3x+0x34>
    12ae:	46 95       	lsr	r20
    12b0:	37 95       	ror	r19
    12b2:	27 95       	ror	r18
    12b4:	a7 95       	ror	r26
    12b6:	f0 40       	sbci	r31, 0x00	; 0
    12b8:	53 95       	inc	r21
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__addsf3x+0x4e>
    12bc:	7e f4       	brtc	.+30     	; 0x12dc <__addsf3x+0x7c>
    12be:	1f 16       	cp	r1, r31
    12c0:	ba 0b       	sbc	r27, r26
    12c2:	62 0b       	sbc	r22, r18
    12c4:	73 0b       	sbc	r23, r19
    12c6:	84 0b       	sbc	r24, r20
    12c8:	ba f0       	brmi	.+46     	; 0x12f8 <__addsf3x+0x98>
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	a1 f0       	breq	.+40     	; 0x12f6 <__addsf3x+0x96>
    12ce:	ff 0f       	add	r31, r31
    12d0:	bb 1f       	adc	r27, r27
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	c2 f7       	brpl	.-16     	; 0x12ca <__addsf3x+0x6a>
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <__addsf3x+0x98>
    12dc:	ba 0f       	add	r27, r26
    12de:	62 1f       	adc	r22, r18
    12e0:	73 1f       	adc	r23, r19
    12e2:	84 1f       	adc	r24, r20
    12e4:	48 f4       	brcc	.+18     	; 0x12f8 <__addsf3x+0x98>
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	b7 95       	ror	r27
    12ee:	f7 95       	ror	r31
    12f0:	9e 3f       	cpi	r25, 0xFE	; 254
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <__addsf3x+0x96>
    12f4:	b3 cf       	rjmp	.-154    	; 0x125c <__addsf3+0x1e>
    12f6:	93 95       	inc	r25
    12f8:	88 0f       	add	r24, r24
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__addsf3x+0x9e>
    12fc:	99 27       	eor	r25, r25
    12fe:	ee 0f       	add	r30, r30
    1300:	97 95       	ror	r25
    1302:	87 95       	ror	r24
    1304:	08 95       	ret

00001306 <__divsf3>:
    1306:	0c d0       	rcall	.+24     	; 0x1320 <__divsf3x>
    1308:	a9 c0       	rjmp	.+338    	; 0x145c <__fp_round>
    130a:	a1 d0       	rcall	.+322    	; 0x144e <__fp_pscB>
    130c:	40 f0       	brcs	.+16     	; 0x131e <__divsf3+0x18>
    130e:	98 d0       	rcall	.+304    	; 0x1440 <__fp_pscA>
    1310:	30 f0       	brcs	.+12     	; 0x131e <__divsf3+0x18>
    1312:	21 f4       	brne	.+8      	; 0x131c <__divsf3+0x16>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	19 f0       	breq	.+6      	; 0x131e <__divsf3+0x18>
    1318:	8a c0       	rjmp	.+276    	; 0x142e <__fp_inf>
    131a:	51 11       	cpse	r21, r1
    131c:	d3 c0       	rjmp	.+422    	; 0x14c4 <__fp_szero>
    131e:	8d c0       	rjmp	.+282    	; 0x143a <__fp_nan>

00001320 <__divsf3x>:
    1320:	ae d0       	rcall	.+348    	; 0x147e <__fp_split3>
    1322:	98 f3       	brcs	.-26     	; 0x130a <__divsf3+0x4>

00001324 <__divsf3_pse>:
    1324:	99 23       	and	r25, r25
    1326:	c9 f3       	breq	.-14     	; 0x131a <__divsf3+0x14>
    1328:	55 23       	and	r21, r21
    132a:	b1 f3       	breq	.-20     	; 0x1318 <__divsf3+0x12>
    132c:	95 1b       	sub	r25, r21
    132e:	55 0b       	sbc	r21, r21
    1330:	bb 27       	eor	r27, r27
    1332:	aa 27       	eor	r26, r26
    1334:	62 17       	cp	r22, r18
    1336:	73 07       	cpc	r23, r19
    1338:	84 07       	cpc	r24, r20
    133a:	38 f0       	brcs	.+14     	; 0x134a <__divsf3_pse+0x26>
    133c:	9f 5f       	subi	r25, 0xFF	; 255
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	44 1f       	adc	r20, r20
    1346:	aa 1f       	adc	r26, r26
    1348:	a9 f3       	breq	.-22     	; 0x1334 <__divsf3_pse+0x10>
    134a:	33 d0       	rcall	.+102    	; 0x13b2 <__divsf3_pse+0x8e>
    134c:	0e 2e       	mov	r0, r30
    134e:	3a f0       	brmi	.+14     	; 0x135e <__divsf3_pse+0x3a>
    1350:	e0 e8       	ldi	r30, 0x80	; 128
    1352:	30 d0       	rcall	.+96     	; 0x13b4 <__divsf3_pse+0x90>
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	50 40       	sbci	r21, 0x00	; 0
    1358:	e6 95       	lsr	r30
    135a:	00 1c       	adc	r0, r0
    135c:	ca f7       	brpl	.-14     	; 0x1350 <__divsf3_pse+0x2c>
    135e:	29 d0       	rcall	.+82     	; 0x13b2 <__divsf3_pse+0x8e>
    1360:	fe 2f       	mov	r31, r30
    1362:	27 d0       	rcall	.+78     	; 0x13b2 <__divsf3_pse+0x8e>
    1364:	66 0f       	add	r22, r22
    1366:	77 1f       	adc	r23, r23
    1368:	88 1f       	adc	r24, r24
    136a:	bb 1f       	adc	r27, r27
    136c:	26 17       	cp	r18, r22
    136e:	37 07       	cpc	r19, r23
    1370:	48 07       	cpc	r20, r24
    1372:	ab 07       	cpc	r26, r27
    1374:	b0 e8       	ldi	r27, 0x80	; 128
    1376:	09 f0       	breq	.+2      	; 0x137a <__divsf3_pse+0x56>
    1378:	bb 0b       	sbc	r27, r27
    137a:	80 2d       	mov	r24, r0
    137c:	bf 01       	movw	r22, r30
    137e:	ff 27       	eor	r31, r31
    1380:	93 58       	subi	r25, 0x83	; 131
    1382:	5f 4f       	sbci	r21, 0xFF	; 255
    1384:	2a f0       	brmi	.+10     	; 0x1390 <__divsf3_pse+0x6c>
    1386:	9e 3f       	cpi	r25, 0xFE	; 254
    1388:	51 05       	cpc	r21, r1
    138a:	68 f0       	brcs	.+26     	; 0x13a6 <__divsf3_pse+0x82>
    138c:	50 c0       	rjmp	.+160    	; 0x142e <__fp_inf>
    138e:	9a c0       	rjmp	.+308    	; 0x14c4 <__fp_szero>
    1390:	5f 3f       	cpi	r21, 0xFF	; 255
    1392:	ec f3       	brlt	.-6      	; 0x138e <__divsf3_pse+0x6a>
    1394:	98 3e       	cpi	r25, 0xE8	; 232
    1396:	dc f3       	brlt	.-10     	; 0x138e <__divsf3_pse+0x6a>
    1398:	86 95       	lsr	r24
    139a:	77 95       	ror	r23
    139c:	67 95       	ror	r22
    139e:	b7 95       	ror	r27
    13a0:	f7 95       	ror	r31
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <__divsf3_pse+0x74>
    13a6:	88 0f       	add	r24, r24
    13a8:	91 1d       	adc	r25, r1
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret
    13b2:	e1 e0       	ldi	r30, 0x01	; 1
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	bb 1f       	adc	r27, r27
    13bc:	62 17       	cp	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	84 07       	cpc	r24, r20
    13c2:	ba 07       	cpc	r27, r26
    13c4:	20 f0       	brcs	.+8      	; 0x13ce <__divsf3_pse+0xaa>
    13c6:	62 1b       	sub	r22, r18
    13c8:	73 0b       	sbc	r23, r19
    13ca:	84 0b       	sbc	r24, r20
    13cc:	ba 0b       	sbc	r27, r26
    13ce:	ee 1f       	adc	r30, r30
    13d0:	88 f7       	brcc	.-30     	; 0x13b4 <__divsf3_pse+0x90>
    13d2:	e0 95       	com	r30
    13d4:	08 95       	ret

000013d6 <__fixunssfsi>:
    13d6:	5b d0       	rcall	.+182    	; 0x148e <__fp_splitA>
    13d8:	88 f0       	brcs	.+34     	; 0x13fc <__fixunssfsi+0x26>
    13da:	9f 57       	subi	r25, 0x7F	; 127
    13dc:	90 f0       	brcs	.+36     	; 0x1402 <__fixunssfsi+0x2c>
    13de:	b9 2f       	mov	r27, r25
    13e0:	99 27       	eor	r25, r25
    13e2:	b7 51       	subi	r27, 0x17	; 23
    13e4:	a0 f0       	brcs	.+40     	; 0x140e <__fixunssfsi+0x38>
    13e6:	d1 f0       	breq	.+52     	; 0x141c <__fixunssfsi+0x46>
    13e8:	66 0f       	add	r22, r22
    13ea:	77 1f       	adc	r23, r23
    13ec:	88 1f       	adc	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	1a f0       	brmi	.+6      	; 0x13f8 <__fixunssfsi+0x22>
    13f2:	ba 95       	dec	r27
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <__fixunssfsi+0x12>
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <__fixunssfsi+0x46>
    13f8:	b1 30       	cpi	r27, 0x01	; 1
    13fa:	81 f0       	breq	.+32     	; 0x141c <__fixunssfsi+0x46>
    13fc:	62 d0       	rcall	.+196    	; 0x14c2 <__fp_zero>
    13fe:	b1 e0       	ldi	r27, 0x01	; 1
    1400:	08 95       	ret
    1402:	5f c0       	rjmp	.+190    	; 0x14c2 <__fp_zero>
    1404:	67 2f       	mov	r22, r23
    1406:	78 2f       	mov	r23, r24
    1408:	88 27       	eor	r24, r24
    140a:	b8 5f       	subi	r27, 0xF8	; 248
    140c:	39 f0       	breq	.+14     	; 0x141c <__fixunssfsi+0x46>
    140e:	b9 3f       	cpi	r27, 0xF9	; 249
    1410:	cc f3       	brlt	.-14     	; 0x1404 <__fixunssfsi+0x2e>
    1412:	86 95       	lsr	r24
    1414:	77 95       	ror	r23
    1416:	67 95       	ror	r22
    1418:	b3 95       	inc	r27
    141a:	d9 f7       	brne	.-10     	; 0x1412 <__fixunssfsi+0x3c>
    141c:	3e f4       	brtc	.+14     	; 0x142c <__fixunssfsi+0x56>
    141e:	90 95       	com	r25
    1420:	80 95       	com	r24
    1422:	70 95       	com	r23
    1424:	61 95       	neg	r22
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	08 95       	ret

0000142e <__fp_inf>:
    142e:	97 f9       	bld	r25, 7
    1430:	9f 67       	ori	r25, 0x7F	; 127
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	08 95       	ret

0000143a <__fp_nan>:
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	80 ec       	ldi	r24, 0xC0	; 192
    143e:	08 95       	ret

00001440 <__fp_pscA>:
    1440:	00 24       	eor	r0, r0
    1442:	0a 94       	dec	r0
    1444:	16 16       	cp	r1, r22
    1446:	17 06       	cpc	r1, r23
    1448:	18 06       	cpc	r1, r24
    144a:	09 06       	cpc	r0, r25
    144c:	08 95       	ret

0000144e <__fp_pscB>:
    144e:	00 24       	eor	r0, r0
    1450:	0a 94       	dec	r0
    1452:	12 16       	cp	r1, r18
    1454:	13 06       	cpc	r1, r19
    1456:	14 06       	cpc	r1, r20
    1458:	05 06       	cpc	r0, r21
    145a:	08 95       	ret

0000145c <__fp_round>:
    145c:	09 2e       	mov	r0, r25
    145e:	03 94       	inc	r0
    1460:	00 0c       	add	r0, r0
    1462:	11 f4       	brne	.+4      	; 0x1468 <__fp_round+0xc>
    1464:	88 23       	and	r24, r24
    1466:	52 f0       	brmi	.+20     	; 0x147c <__fp_round+0x20>
    1468:	bb 0f       	add	r27, r27
    146a:	40 f4       	brcc	.+16     	; 0x147c <__fp_round+0x20>
    146c:	bf 2b       	or	r27, r31
    146e:	11 f4       	brne	.+4      	; 0x1474 <__fp_round+0x18>
    1470:	60 ff       	sbrs	r22, 0
    1472:	04 c0       	rjmp	.+8      	; 0x147c <__fp_round+0x20>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	08 95       	ret

0000147e <__fp_split3>:
    147e:	57 fd       	sbrc	r21, 7
    1480:	90 58       	subi	r25, 0x80	; 128
    1482:	44 0f       	add	r20, r20
    1484:	55 1f       	adc	r21, r21
    1486:	59 f0       	breq	.+22     	; 0x149e <__fp_splitA+0x10>
    1488:	5f 3f       	cpi	r21, 0xFF	; 255
    148a:	71 f0       	breq	.+28     	; 0x14a8 <__fp_splitA+0x1a>
    148c:	47 95       	ror	r20

0000148e <__fp_splitA>:
    148e:	88 0f       	add	r24, r24
    1490:	97 fb       	bst	r25, 7
    1492:	99 1f       	adc	r25, r25
    1494:	61 f0       	breq	.+24     	; 0x14ae <__fp_splitA+0x20>
    1496:	9f 3f       	cpi	r25, 0xFF	; 255
    1498:	79 f0       	breq	.+30     	; 0x14b8 <__fp_splitA+0x2a>
    149a:	87 95       	ror	r24
    149c:	08 95       	ret
    149e:	12 16       	cp	r1, r18
    14a0:	13 06       	cpc	r1, r19
    14a2:	14 06       	cpc	r1, r20
    14a4:	55 1f       	adc	r21, r21
    14a6:	f2 cf       	rjmp	.-28     	; 0x148c <__fp_split3+0xe>
    14a8:	46 95       	lsr	r20
    14aa:	f1 df       	rcall	.-30     	; 0x148e <__fp_splitA>
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <__fp_splitA+0x30>
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	18 06       	cpc	r1, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	f1 cf       	rjmp	.-30     	; 0x149a <__fp_splitA+0xc>
    14b8:	86 95       	lsr	r24
    14ba:	71 05       	cpc	r23, r1
    14bc:	61 05       	cpc	r22, r1
    14be:	08 94       	sec
    14c0:	08 95       	ret

000014c2 <__fp_zero>:
    14c2:	e8 94       	clt

000014c4 <__fp_szero>:
    14c4:	bb 27       	eor	r27, r27
    14c6:	66 27       	eor	r22, r22
    14c8:	77 27       	eor	r23, r23
    14ca:	cb 01       	movw	r24, r22
    14cc:	97 f9       	bld	r25, 7
    14ce:	08 95       	ret

000014d0 <__mulsf3>:
    14d0:	0b d0       	rcall	.+22     	; 0x14e8 <__mulsf3x>
    14d2:	c4 cf       	rjmp	.-120    	; 0x145c <__fp_round>
    14d4:	b5 df       	rcall	.-150    	; 0x1440 <__fp_pscA>
    14d6:	28 f0       	brcs	.+10     	; 0x14e2 <__mulsf3+0x12>
    14d8:	ba df       	rcall	.-140    	; 0x144e <__fp_pscB>
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <__mulsf3+0x12>
    14dc:	95 23       	and	r25, r21
    14de:	09 f0       	breq	.+2      	; 0x14e2 <__mulsf3+0x12>
    14e0:	a6 cf       	rjmp	.-180    	; 0x142e <__fp_inf>
    14e2:	ab cf       	rjmp	.-170    	; 0x143a <__fp_nan>
    14e4:	11 24       	eor	r1, r1
    14e6:	ee cf       	rjmp	.-36     	; 0x14c4 <__fp_szero>

000014e8 <__mulsf3x>:
    14e8:	ca df       	rcall	.-108    	; 0x147e <__fp_split3>
    14ea:	a0 f3       	brcs	.-24     	; 0x14d4 <__mulsf3+0x4>

000014ec <__mulsf3_pse>:
    14ec:	95 9f       	mul	r25, r21
    14ee:	d1 f3       	breq	.-12     	; 0x14e4 <__mulsf3+0x14>
    14f0:	95 0f       	add	r25, r21
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	55 1f       	adc	r21, r21
    14f6:	62 9f       	mul	r22, r18
    14f8:	f0 01       	movw	r30, r0
    14fa:	72 9f       	mul	r23, r18
    14fc:	bb 27       	eor	r27, r27
    14fe:	f0 0d       	add	r31, r0
    1500:	b1 1d       	adc	r27, r1
    1502:	63 9f       	mul	r22, r19
    1504:	aa 27       	eor	r26, r26
    1506:	f0 0d       	add	r31, r0
    1508:	b1 1d       	adc	r27, r1
    150a:	aa 1f       	adc	r26, r26
    150c:	64 9f       	mul	r22, r20
    150e:	66 27       	eor	r22, r22
    1510:	b0 0d       	add	r27, r0
    1512:	a1 1d       	adc	r26, r1
    1514:	66 1f       	adc	r22, r22
    1516:	82 9f       	mul	r24, r18
    1518:	22 27       	eor	r18, r18
    151a:	b0 0d       	add	r27, r0
    151c:	a1 1d       	adc	r26, r1
    151e:	62 1f       	adc	r22, r18
    1520:	73 9f       	mul	r23, r19
    1522:	b0 0d       	add	r27, r0
    1524:	a1 1d       	adc	r26, r1
    1526:	62 1f       	adc	r22, r18
    1528:	83 9f       	mul	r24, r19
    152a:	a0 0d       	add	r26, r0
    152c:	61 1d       	adc	r22, r1
    152e:	22 1f       	adc	r18, r18
    1530:	74 9f       	mul	r23, r20
    1532:	33 27       	eor	r19, r19
    1534:	a0 0d       	add	r26, r0
    1536:	61 1d       	adc	r22, r1
    1538:	23 1f       	adc	r18, r19
    153a:	84 9f       	mul	r24, r20
    153c:	60 0d       	add	r22, r0
    153e:	21 1d       	adc	r18, r1
    1540:	82 2f       	mov	r24, r18
    1542:	76 2f       	mov	r23, r22
    1544:	6a 2f       	mov	r22, r26
    1546:	11 24       	eor	r1, r1
    1548:	9f 57       	subi	r25, 0x7F	; 127
    154a:	50 40       	sbci	r21, 0x00	; 0
    154c:	8a f0       	brmi	.+34     	; 0x1570 <__mulsf3_pse+0x84>
    154e:	e1 f0       	breq	.+56     	; 0x1588 <__mulsf3_pse+0x9c>
    1550:	88 23       	and	r24, r24
    1552:	4a f0       	brmi	.+18     	; 0x1566 <__mulsf3_pse+0x7a>
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	bb 1f       	adc	r27, r27
    155a:	66 1f       	adc	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	91 50       	subi	r25, 0x01	; 1
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	a9 f7       	brne	.-22     	; 0x1550 <__mulsf3_pse+0x64>
    1566:	9e 3f       	cpi	r25, 0xFE	; 254
    1568:	51 05       	cpc	r21, r1
    156a:	70 f0       	brcs	.+28     	; 0x1588 <__mulsf3_pse+0x9c>
    156c:	60 cf       	rjmp	.-320    	; 0x142e <__fp_inf>
    156e:	aa cf       	rjmp	.-172    	; 0x14c4 <__fp_szero>
    1570:	5f 3f       	cpi	r21, 0xFF	; 255
    1572:	ec f3       	brlt	.-6      	; 0x156e <__mulsf3_pse+0x82>
    1574:	98 3e       	cpi	r25, 0xE8	; 232
    1576:	dc f3       	brlt	.-10     	; 0x156e <__mulsf3_pse+0x82>
    1578:	86 95       	lsr	r24
    157a:	77 95       	ror	r23
    157c:	67 95       	ror	r22
    157e:	b7 95       	ror	r27
    1580:	f7 95       	ror	r31
    1582:	e7 95       	ror	r30
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	c1 f7       	brne	.-16     	; 0x1578 <__mulsf3_pse+0x8c>
    1588:	fe 2b       	or	r31, r30
    158a:	88 0f       	add	r24, r24
    158c:	91 1d       	adc	r25, r1
    158e:	96 95       	lsr	r25
    1590:	87 95       	ror	r24
    1592:	97 f9       	bld	r25, 7
    1594:	08 95       	ret

00001596 <__divmodhi4>:
    1596:	97 fb       	bst	r25, 7
    1598:	07 2e       	mov	r0, r23
    159a:	16 f4       	brtc	.+4      	; 0x15a0 <__divmodhi4+0xa>
    159c:	00 94       	com	r0
    159e:	07 d0       	rcall	.+14     	; 0x15ae <__divmodhi4_neg1>
    15a0:	77 fd       	sbrc	r23, 7
    15a2:	09 d0       	rcall	.+18     	; 0x15b6 <__divmodhi4_neg2>
    15a4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__udivmodhi4>
    15a8:	07 fc       	sbrc	r0, 7
    15aa:	05 d0       	rcall	.+10     	; 0x15b6 <__divmodhi4_neg2>
    15ac:	3e f4       	brtc	.+14     	; 0x15bc <__divmodhi4_exit>

000015ae <__divmodhi4_neg1>:
    15ae:	90 95       	com	r25
    15b0:	81 95       	neg	r24
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	08 95       	ret

000015b6 <__divmodhi4_neg2>:
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255

000015bc <__divmodhi4_exit>:
    15bc:	08 95       	ret

000015be <__udivmodsi4>:
    15be:	a1 e2       	ldi	r26, 0x21	; 33
    15c0:	1a 2e       	mov	r1, r26
    15c2:	aa 1b       	sub	r26, r26
    15c4:	bb 1b       	sub	r27, r27
    15c6:	fd 01       	movw	r30, r26
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <__udivmodsi4_ep>

000015ca <__udivmodsi4_loop>:
    15ca:	aa 1f       	adc	r26, r26
    15cc:	bb 1f       	adc	r27, r27
    15ce:	ee 1f       	adc	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	a2 17       	cp	r26, r18
    15d4:	b3 07       	cpc	r27, r19
    15d6:	e4 07       	cpc	r30, r20
    15d8:	f5 07       	cpc	r31, r21
    15da:	20 f0       	brcs	.+8      	; 0x15e4 <__udivmodsi4_ep>
    15dc:	a2 1b       	sub	r26, r18
    15de:	b3 0b       	sbc	r27, r19
    15e0:	e4 0b       	sbc	r30, r20
    15e2:	f5 0b       	sbc	r31, r21

000015e4 <__udivmodsi4_ep>:
    15e4:	66 1f       	adc	r22, r22
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 1f       	adc	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	1a 94       	dec	r1
    15ee:	69 f7       	brne	.-38     	; 0x15ca <__udivmodsi4_loop>
    15f0:	60 95       	com	r22
    15f2:	70 95       	com	r23
    15f4:	80 95       	com	r24
    15f6:	90 95       	com	r25
    15f8:	9b 01       	movw	r18, r22
    15fa:	ac 01       	movw	r20, r24
    15fc:	bd 01       	movw	r22, r26
    15fe:	cf 01       	movw	r24, r30
    1600:	08 95       	ret

00001602 <__umulhisi3>:
    1602:	a2 9f       	mul	r26, r18
    1604:	b0 01       	movw	r22, r0
    1606:	b3 9f       	mul	r27, r19
    1608:	c0 01       	movw	r24, r0
    160a:	a3 9f       	mul	r26, r19
    160c:	70 0d       	add	r23, r0
    160e:	81 1d       	adc	r24, r1
    1610:	11 24       	eor	r1, r1
    1612:	91 1d       	adc	r25, r1
    1614:	b2 9f       	mul	r27, r18
    1616:	70 0d       	add	r23, r0
    1618:	81 1d       	adc	r24, r1
    161a:	11 24       	eor	r1, r1
    161c:	91 1d       	adc	r25, r1
    161e:	08 95       	ret

00001620 <__muluhisi3>:
    1620:	0e 94 01 0b 	call	0x1602	; 0x1602 <__umulhisi3>
    1624:	a5 9f       	mul	r26, r21
    1626:	90 0d       	add	r25, r0
    1628:	b4 9f       	mul	r27, r20
    162a:	90 0d       	add	r25, r0
    162c:	a4 9f       	mul	r26, r20
    162e:	80 0d       	add	r24, r0
    1630:	91 1d       	adc	r25, r1
    1632:	11 24       	eor	r1, r1
    1634:	08 95       	ret

00001636 <__udivmodhi4>:
    1636:	aa 1b       	sub	r26, r26
    1638:	bb 1b       	sub	r27, r27
    163a:	51 e1       	ldi	r21, 0x11	; 17
    163c:	07 c0       	rjmp	.+14     	; 0x164c <__udivmodhi4_ep>

0000163e <__udivmodhi4_loop>:
    163e:	aa 1f       	adc	r26, r26
    1640:	bb 1f       	adc	r27, r27
    1642:	a6 17       	cp	r26, r22
    1644:	b7 07       	cpc	r27, r23
    1646:	10 f0       	brcs	.+4      	; 0x164c <__udivmodhi4_ep>
    1648:	a6 1b       	sub	r26, r22
    164a:	b7 0b       	sbc	r27, r23

0000164c <__udivmodhi4_ep>:
    164c:	88 1f       	adc	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	5a 95       	dec	r21
    1652:	a9 f7       	brne	.-22     	; 0x163e <__udivmodhi4_loop>
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	08 95       	ret

0000165e <strcpy>:
    165e:	fb 01       	movw	r30, r22
    1660:	dc 01       	movw	r26, r24
    1662:	01 90       	ld	r0, Z+
    1664:	0d 92       	st	X+, r0
    1666:	00 20       	and	r0, r0
    1668:	e1 f7       	brne	.-8      	; 0x1662 <strcpy+0x4>
    166a:	08 95       	ret

0000166c <_exit>:
    166c:	f8 94       	cli

0000166e <__stop_program>:
    166e:	ff cf       	rjmp	.-2      	; 0x166e <__stop_program>
