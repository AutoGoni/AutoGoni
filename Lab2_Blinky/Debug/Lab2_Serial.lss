
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001730  000017c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f8  0080025e  0080025e  00001922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001922  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001958  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f27  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000794  00000000  00000000  00003a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000940  00000000  00000000  00004213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00004b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000863  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016f5  00000000  00000000  00005803  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e0 e3       	ldi	r30, 0x30	; 48
     17c:	f7 e1       	ldi	r31, 0x17	; 23
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	ae 35       	cpi	r26, 0x5E	; 94
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	ae e5       	ldi	r26, 0x5E	; 94
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a6 35       	cpi	r26, 0x56	; 86
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 80 04 	call	0x900	; 0x900 <main>
     19e:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:
     1a6:	00 91 1c 06 	lds	r16, 0x061C
     1aa:	03 95       	inc	r16
     1ac:	00 93 1c 06 	sts	0x061C, r16
     1b0:	e0 91 31 06 	lds	r30, 0x0631
     1b4:	f0 91 32 06 	lds	r31, 0x0632
     1b8:	c1 91       	ld	r28, Z+
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	d1 91       	ld	r29, Z+
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
     204:	08 95       	ret

00000206 <OSCtxSw>:
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16
     24a:	e0 91 3f 06 	lds	r30, 0x063F
     24e:	f0 91 40 06 	lds	r31, 0x0640
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	c1 93       	st	Z+, r28
     256:	de b7       	in	r29, 0x3e	; 62
     258:	d1 93       	st	Z+, r29
     25a:	00 91 21 06 	lds	r16, 0x0621
     25e:	00 93 22 06 	sts	0x0622, r16
     262:	e0 91 31 06 	lds	r30, 0x0631
     266:	f0 91 32 06 	lds	r31, 0x0632
     26a:	e0 93 3f 06 	sts	0x063F, r30
     26e:	f0 93 40 06 	sts	0x0640, r31
     272:	c1 91       	ld	r28, Z+
     274:	cd bf       	out	0x3d, r28	; 61
     276:	d1 91       	ld	r29, Z+
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
     2c0:	00 91 21 06 	lds	r16, 0x0621
     2c4:	00 93 22 06 	sts	0x0622, r16
     2c8:	e0 91 31 06 	lds	r30, 0x0631
     2cc:	f0 91 32 06 	lds	r31, 0x0632
     2d0:	e0 93 3f 06 	sts	0x063F, r30
     2d4:	f0 93 40 06 	sts	0x0640, r31
     2d8:	c1 91       	ld	r28, Z+
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	d1 91       	ld	r29, Z+
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	08 95       	ret

00000326 <OSTickISR>:
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16
     36c:	00 91 3e 06 	lds	r16, 0x063E
     370:	03 95       	inc	r16
     372:	00 93 3e 06 	sts	0x063E, r16
     376:	01 30       	cpi	r16, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e0 91 3f 06 	lds	r30, 0x063F
     382:	f0 91 40 06 	lds	r31, 0x0640
     386:	c1 93       	st	Z+, r28
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
     38a:	0d ee       	ldi	r16, 0xED	; 237
     38c:	06 bd       	out	0x26, r16	; 38
     38e:	78 94       	sei
     390:	0e 94 f6 06 	call	0xdec	; 0xdec <OSTimeTick>
     394:	00 00       	nop
     396:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OSIntExit>
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
     3de:	08 95       	ret

000003e0 <WatchDogReset>:
     3e0:	a8 95       	wdr
     3e2:	08 95       	ret

000003e4 <SerTxISR>:
     3e4:	08 95       	ret

000003e6 <TaskStart>:
{
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 02 09 	call	0x1204	; 0x1204 <OSStatInit>

	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     3ea:	2a e0       	ldi	r18, 0x0A	; 10
     3ec:	4a e9       	ldi	r20, 0x9A	; 154
     3ee:	55 e0       	ldi	r21, 0x05	; 5
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	85 e4       	ldi	r24, 0x45	; 69
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     3fc:	24 e1       	ldi	r18, 0x14	; 20
     3fe:	4a e1       	ldi	r20, 0x1A	; 26
     400:	55 e0       	ldi	r21, 0x05	; 5
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	8e ed       	ldi	r24, 0xDE	; 222
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     40e:	80 e9       	ldi	r24, 0x90	; 144
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	80 91 17 04 	lds	r24, 0x0417
     41e:	90 91 18 04 	lds	r25, 0x0418
     422:	0e 94 6d 07 	call	0xeda	; 0xeda <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     426:	80 e9       	ldi	r24, 0x90	; 144
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     42e:	65 e2       	ldi	r22, 0x25	; 37
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	80 91 17 04 	lds	r24, 0x0417
     436:	90 91 18 04 	lds	r25, 0x0418
     43a:	0e 94 6d 07 	call	0xeda	; 0xeda <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     43e:	2f e0       	ldi	r18, 0x0F	; 15
     440:	46 e1       	ldi	r20, 0x16	; 22
     442:	54 e0       	ldi	r21, 0x04	; 4
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	8e e3       	ldi	r24, 0x3E	; 62
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     450:	2b e0       	ldi	r18, 0x0B	; 11
     452:	48 e9       	ldi	r20, 0x98	; 152
     454:	54 e0       	ldi	r21, 0x04	; 4
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	8f ed       	ldi	r24, 0xDF	; 223
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     462:	10 92 25 06 	sts	0x0625, r1
     466:	10 92 26 06 	sts	0x0626, r1
     46a:	10 92 27 06 	sts	0x0627, r1
     46e:	10 92 28 06 	sts	0x0628, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     472:	88 ec       	ldi	r24, 0xC8	; 200
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
     47a:	f3 cf       	rjmp	.-26     	; 0x462 <TaskStart+0x7c>

0000047c <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	a3 97       	sbiw	r28, 0x23	; 35
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
		
		if (rotaryInput != notFound){
			outputAngle = (rotaryInput * unitsPer100Degrees);
     490:	0f 2e       	mov	r0, r31
     492:	f9 e1       	ldi	r31, 0x19	; 25
     494:	cf 2e       	mov	r12, r31
     496:	dd 24       	eor	r13, r13
     498:	d3 94       	inc	r13
     49a:	f0 2d       	mov	r31, r0
			//else
			//{
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
     49c:	0f 2e       	mov	r0, r31
     49e:	fd e0       	ldi	r31, 0x0D	; 13
     4a0:	8f 2e       	mov	r8, r31
     4a2:	f0 2d       	mov	r31, r0
			TextMessage[1] = '\n';
     4a4:	0f 2e       	mov	r0, r31
     4a6:	fa e0       	ldi	r31, 0x0A	; 10
     4a8:	9f 2e       	mov	r9, r31
     4aa:	f0 2d       	mov	r31, r0
			char* p = &TextMessage[2];
			int shifter = outputAngle;
			char const digit[] = "0123456789";
     4ac:	0f 2e       	mov	r0, r31
     4ae:	fb e0       	ldi	r31, 0x0B	; 11
     4b0:	af 2e       	mov	r10, r31
     4b2:	f0 2d       	mov	r31, r0
			do{ //Move to where representation ends
				++p;
				shifter = shifter/10;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fa e0       	ldi	r31, 0x0A	; 10
     4b8:	ef 2e       	mov	r14, r31
     4ba:	f1 2c       	mov	r15, r1
     4bc:	f0 2d       	mov	r31, r0
			}while(shifter);

			p[0] = ' ';
     4be:	68 94       	set
     4c0:	bb 24       	eor	r11, r11
     4c2:	b5 f8       	bld	r11, 5
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     4c4:	86 b1       	in	r24, 0x06	; 6
     4c6:	e9 b1       	in	r30, 0x09	; 9
     4c8:	e0 7f       	andi	r30, 0xF0	; 240
     4ca:	8f 70       	andi	r24, 0x0F	; 15
     4cc:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]);
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	e8 59       	subi	r30, 0x98	; 152
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	e4 91       	lpm	r30, Z
		
		if (rotaryInput != notFound){
     4d6:	ef 3f       	cpi	r30, 0xFF	; 255
     4d8:	09 f4       	brne	.+2      	; 0x4dc <AngleOutputTask+0x60>
     4da:	6c c0       	rjmp	.+216    	; 0x5b4 <AngleOutputTask+0x138>
			outputAngle = (rotaryInput * unitsPer100Degrees);
     4dc:	ec 9d       	mul	r30, r12
     4de:	90 01       	movw	r18, r0
     4e0:	ed 9d       	mul	r30, r13
     4e2:	30 0d       	add	r19, r0
     4e4:	11 24       	eor	r1, r1
			outputAngle = outputAngle / 100;
     4e6:	36 95       	lsr	r19
     4e8:	27 95       	ror	r18
     4ea:	36 95       	lsr	r19
     4ec:	27 95       	ror	r18
     4ee:	ab e7       	ldi	r26, 0x7B	; 123
     4f0:	b4 e1       	ldi	r27, 0x14	; 20
     4f2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__umulhisi3>
     4f6:	8c 01       	movw	r16, r24
     4f8:	16 95       	lsr	r17
     4fa:	07 95       	ror	r16
			//else
			//{
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
     4fc:	89 82       	std	Y+1, r8	; 0x01
			TextMessage[1] = '\n';
     4fe:	9a 82       	std	Y+2, r9	; 0x02
			char* p = &TextMessage[2];
			int shifter = outputAngle;
     500:	c8 01       	movw	r24, r16
			char const digit[] = "0123456789";
     502:	ea e4       	ldi	r30, 0x4A	; 74
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	de 01       	movw	r26, r28
     508:	59 96       	adiw	r26, 0x19	; 25
     50a:	2a 2d       	mov	r18, r10
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	2a 95       	dec	r18
     512:	e1 f7       	brne	.-8      	; 0x50c <AngleOutputTask+0x90>
				//rotaryInput = 0;
			//}
			*/
			TextMessage[0] = '\r';
			TextMessage[1] = '\n';
			char* p = &TextMessage[2];
     514:	fe 01       	movw	r30, r28
     516:	33 96       	adiw	r30, 0x03	; 3
			int shifter = outputAngle;
			char const digit[] = "0123456789";
			do{ //Move to where representation ends
				++p;
     518:	31 96       	adiw	r30, 0x01	; 1
				shifter = shifter/10;
     51a:	b7 01       	movw	r22, r14
     51c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
     520:	cb 01       	movw	r24, r22
			}while(shifter);
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	c9 f7       	brne	.-14     	; 0x518 <AngleOutputTask+0x9c>

			p[0] = ' ';
     526:	b0 82       	st	Z, r11
			p[1] = ' ';
     528:	b1 82       	std	Z+1, r11	; 0x01
			p[2] = ' ';
     52a:	b2 82       	std	Z+2, r11	; 0x02
			p[3] = ' ';
     52c:	b3 82       	std	Z+3, r11	; 0x03
			p[4] = ' ';
     52e:	b4 82       	std	Z+4, r11	; 0x04
			p[5] = ' ';
     530:	b5 82       	std	Z+5, r11	; 0x05
			p[6] = ' ';
     532:	b6 82       	std	Z+6, r11	; 0x06
			p[7] = ' ';
     534:	b7 82       	std	Z+7, r11	; 0x07
			p[8] = ' ';
     536:	b0 86       	std	Z+8, r11	; 0x08
			p[9] = ' ';
     538:	b1 86       	std	Z+9, r11	; 0x09
			p[10] = ' ';
     53a:	b2 86       	std	Z+10, r11	; 0x0a
			p[11] = ' ';
     53c:	b3 86       	std	Z+11, r11	; 0x0b
			p[12] = ' ';
     53e:	b4 86       	std	Z+12, r11	; 0x0c
			p[13] = '\0';
     540:	15 86       	std	Z+13, r1	; 0x0d
		

			do{ //Move back, inserting digits as you go
				*--p = digit[outputAngle%10];
     542:	98 01       	movw	r18, r16
     544:	ad ec       	ldi	r26, 0xCD	; 205
     546:	bc ec       	ldi	r27, 0xCC	; 204
     548:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__umulhisi3>
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	96 95       	lsr	r25
     552:	87 95       	ror	r24
     554:	96 95       	lsr	r25
     556:	87 95       	ror	r24
     558:	9c 01       	movw	r18, r24
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	d8 01       	movw	r26, r16
     570:	a8 1b       	sub	r26, r24
     572:	b9 0b       	sbc	r27, r25
     574:	89 e1       	ldi	r24, 0x19	; 25
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	8c 0f       	add	r24, r28
     57a:	9d 1f       	adc	r25, r29
     57c:	a8 0f       	add	r26, r24
     57e:	b9 1f       	adc	r27, r25
     580:	8c 91       	ld	r24, X
     582:	82 93       	st	-Z, r24
				outputAngle = outputAngle/10;
     584:	98 01       	movw	r18, r16
     586:	ad ec       	ldi	r26, 0xCD	; 205
     588:	bc ec       	ldi	r27, 0xCC	; 204
     58a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__umulhisi3>
     58e:	8c 01       	movw	r16, r24
     590:	16 95       	lsr	r17
     592:	07 95       	ror	r16
     594:	16 95       	lsr	r17
     596:	07 95       	ror	r16
     598:	16 95       	lsr	r17
     59a:	07 95       	ror	r16
			}while(outputAngle);
     59c:	01 15       	cp	r16, r1
     59e:	11 05       	cpc	r17, r1
     5a0:	81 f6       	brne	.-96     	; 0x542 <AngleOutputTask+0xc6>
		
			OSMboxPost(SerialTxMBox, (void *)&TextMessage);
     5a2:	be 01       	movw	r22, r28
     5a4:	6f 5f       	subi	r22, 0xFF	; 255
     5a6:	7f 4f       	sbci	r23, 0xFF	; 255
     5a8:	80 91 17 04 	lds	r24, 0x0417
     5ac:	90 91 18 04 	lds	r25, 0x0418
     5b0:	0e 94 6d 07 	call	0xeda	; 0xeda <OSMboxPost>
		}
					
		OSTimeDly(0.5*OS_TICKS_PER_SEC);	// relinquish CPU
     5b4:	84 e6       	ldi	r24, 0x64	; 100
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    }	
     5bc:	83 cf       	rjmp	.-250    	; 0x4c4 <AngleOutputTask+0x48>

000005be <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	a3 97       	sbiw	r28, 0x23	; 35
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
    INT8U  err;
	INT16U Message;
	INT8U ButtonsInput;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];

	OSTimeDly (0.1*OS_TICKS_PER_SEC);
     5d2:	84 e1       	ldi	r24, 0x14	; 20
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    for (;;) {
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
		
		TextMessage[0] = '\r';
     5da:	0f 2e       	mov	r0, r31
     5dc:	fd e0       	ldi	r31, 0x0D	; 13
     5de:	df 2e       	mov	r13, r31
     5e0:	f0 2d       	mov	r31, r0
		TextMessage[1] = '\r';
		char* p = &TextMessage[2];
		int shifter = ButtonsInput;
		char const digit[] = "0123456789";
     5e2:	0f 2e       	mov	r0, r31
     5e4:	fb e0       	ldi	r31, 0x0B	; 11
     5e6:	cf 2e       	mov	r12, r31
     5e8:	f0 2d       	mov	r31, r0
		do{ //Move to where representation ends
			++p;
			shifter = shifter/10;
     5ea:	0a e0       	ldi	r16, 0x0A	; 10
     5ec:	10 e0       	ldi	r17, 0x00	; 0
		}while(shifter);

		p[0] = ' ';
     5ee:	68 94       	set
     5f0:	ee 24       	eor	r14, r14
     5f2:	e5 f8       	bld	r14, 5
		p[7] = ' ';
		p[8] = '\0';
		

		do{ //Move back, inserting digits as you go
			*--p = digit[ButtonsInput%10];
     5f4:	0f 2e       	mov	r0, r31
     5f6:	fd ec       	ldi	r31, 0xCD	; 205
     5f8:	ff 2e       	mov	r15, r31
     5fa:	f0 2d       	mov	r31, r0
	INT8U ButtonsInput;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];

	OSTimeDly (0.1*OS_TICKS_PER_SEC);
    for (;;) {
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
     5fc:	88 e2       	ldi	r24, 0x28	; 40
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
     604:	23 b1       	in	r18, 0x03	; 3
     606:	27 70       	andi	r18, 0x07	; 7
		
		TextMessage[0] = '\r';
     608:	d9 82       	std	Y+1, r13	; 0x01
		TextMessage[1] = '\r';
     60a:	da 82       	std	Y+2, r13	; 0x02
		char* p = &TextMessage[2];
		int shifter = ButtonsInput;
     60c:	82 2f       	mov	r24, r18
     60e:	90 e0       	ldi	r25, 0x00	; 0
		char const digit[] = "0123456789";
     610:	ea e4       	ldi	r30, 0x4A	; 74
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	de 01       	movw	r26, r28
     616:	59 96       	adiw	r26, 0x19	; 25
     618:	3c 2d       	mov	r19, r12
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	3a 95       	dec	r19
     620:	e1 f7       	brne	.-8      	; 0x61a <TimerTask+0x5c>
		OSTimeDly (0.2*OS_TICKS_PER_SEC);
		ButtonsInput = 0 | (PINB & (_BV(PINB0) | _BV(PINB1) | _BV(PINB2)) );
		
		TextMessage[0] = '\r';
		TextMessage[1] = '\r';
		char* p = &TextMessage[2];
     622:	fe 01       	movw	r30, r28
     624:	33 96       	adiw	r30, 0x03	; 3
		int shifter = ButtonsInput;
		char const digit[] = "0123456789";
		do{ //Move to where representation ends
			++p;
     626:	31 96       	adiw	r30, 0x01	; 1
			shifter = shifter/10;
     628:	b8 01       	movw	r22, r16
     62a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__divmodhi4>
     62e:	cb 01       	movw	r24, r22
		}while(shifter);
     630:	00 97       	sbiw	r24, 0x00	; 0
     632:	c9 f7       	brne	.-14     	; 0x626 <TimerTask+0x68>

		p[0] = ' ';
     634:	e0 82       	st	Z, r14
		p[1] = ' ';
     636:	e1 82       	std	Z+1, r14	; 0x01
		p[2] = ' ';
     638:	e2 82       	std	Z+2, r14	; 0x02
		p[3] = ' ';
     63a:	e3 82       	std	Z+3, r14	; 0x03
		p[4] = ' ';
     63c:	e4 82       	std	Z+4, r14	; 0x04
		p[5] = ' ';
     63e:	e5 82       	std	Z+5, r14	; 0x05
		p[6] = ' ';
     640:	e6 82       	std	Z+6, r14	; 0x06
		p[7] = ' ';
     642:	e7 82       	std	Z+7, r14	; 0x07
		p[8] = '\0';
     644:	10 86       	std	Z+8, r1	; 0x08
		

		do{ //Move back, inserting digits as you go
			*--p = digit[ButtonsInput%10];
     646:	2f 9d       	mul	r18, r15
     648:	81 2d       	mov	r24, r1
     64a:	11 24       	eor	r1, r1
     64c:	86 95       	lsr	r24
     64e:	86 95       	lsr	r24
     650:	86 95       	lsr	r24
     652:	98 2f       	mov	r25, r24
     654:	99 0f       	add	r25, r25
     656:	39 2f       	mov	r19, r25
     658:	33 0f       	add	r19, r19
     65a:	33 0f       	add	r19, r19
     65c:	93 0f       	add	r25, r19
     65e:	29 1b       	sub	r18, r25
     660:	a9 e1       	ldi	r26, 0x19	; 25
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	ac 0f       	add	r26, r28
     666:	bd 1f       	adc	r27, r29
     668:	a2 0f       	add	r26, r18
     66a:	b1 1d       	adc	r27, r1
     66c:	9c 91       	ld	r25, X
     66e:	92 93       	st	-Z, r25
			ButtonsInput = ButtonsInput/10;
     670:	28 2f       	mov	r18, r24
		}while(ButtonsInput);
     672:	81 11       	cpse	r24, r1
     674:	e8 cf       	rjmp	.-48     	; 0x646 <TimerTask+0x88>
		OSMboxPost(SerialTxMBox, (void*)&TextMessage);
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 91 17 04 	lds	r24, 0x0417
     680:	90 91 18 04 	lds	r25, 0x0418
     684:	0e 94 6d 07 	call	0xeda	; 0xeda <OSMboxPost>

    }	
     688:	b9 cf       	rjmp	.-142    	; 0x5fc <TimerTask+0x3e>

0000068a <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     68a:	0d ec       	ldi	r16, 0xCD	; 205
     68c:	1c ec       	ldi	r17, 0xCC	; 204
     68e:	dc ec       	ldi	r29, 0xCC	; 204
     690:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     692:	81 2c       	mov	r8, r1
     694:	91 2c       	mov	r9, r1
     696:	68 94       	set
     698:	aa 24       	eor	r10, r10
     69a:	a7 f8       	bld	r10, 7
     69c:	0f 2e       	mov	r0, r31
     69e:	ff e3       	ldi	r31, 0x3F	; 63
     6a0:	bf 2e       	mov	r11, r31
     6a2:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     6a4:	41 2c       	mov	r4, r1
     6a6:	51 2c       	mov	r5, r1
     6a8:	61 2c       	mov	r6, r1
     6aa:	0f 2e       	mov	r0, r31
     6ac:	ff e3       	ldi	r31, 0x3F	; 63
     6ae:	7f 2e       	mov	r7, r31
     6b0:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     6b2:	0f 2e       	mov	r0, r31
     6b4:	fd ec       	ldi	r31, 0xCD	; 205
     6b6:	2f 2e       	mov	r2, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	0f 2e       	mov	r0, r31
     6bc:	fc ec       	ldi	r31, 0xCC	; 204
     6be:	3f 2e       	mov	r3, r31
     6c0:	f0 2d       	mov	r31, r0
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <LedTask+0x54>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     6c4:	0d ec       	ldi	r16, 0xCD	; 205
     6c6:	1c ec       	ldi	r17, 0xCC	; 204
     6c8:	dc ec       	ldi	r29, 0xCC	; 204
     6ca:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     6cc:	81 2c       	mov	r8, r1
     6ce:	91 2c       	mov	r9, r1
     6d0:	68 94       	set
     6d2:	aa 24       	eor	r10, r10
     6d4:	a7 f8       	bld	r10, 7
     6d6:	0f 2e       	mov	r0, r31
     6d8:	ff e3       	ldi	r31, 0x3F	; 63
     6da:	bf 2e       	mov	r11, r31
     6dc:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     6de:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6e0:	28 2d       	mov	r18, r8
     6e2:	39 2d       	mov	r19, r9
     6e4:	4a 2d       	mov	r20, r10
     6e6:	5b 2d       	mov	r21, r11
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e8       	ldi	r24, 0x80	; 128
     6ee:	9f e3       	ldi	r25, 0x3F	; 63
     6f0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__divsf3>
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	20 2f       	mov	r18, r16
     6fa:	31 2f       	mov	r19, r17
     6fc:	4d 2f       	mov	r20, r29
     6fe:	5c 2f       	mov	r21, r28
     700:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__mulsf3>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	48 e4       	ldi	r20, 0x48	; 72
     70a:	53 e4       	ldi	r21, 0x43	; 67
     70c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__mulsf3>
     710:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fixunssfsi>
     714:	cb 01       	movw	r24, r22
     716:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     71a:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     71c:	20 2f       	mov	r18, r16
     71e:	31 2f       	mov	r19, r17
     720:	4d 2f       	mov	r20, r29
     722:	5c 2f       	mov	r21, r28
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	9f e3       	ldi	r25, 0x3F	; 63
     72c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__subsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__mulsf3>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	48 e4       	ldi	r20, 0x48	; 72
     742:	53 e4       	ldi	r21, 0x43	; 67
     744:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__mulsf3>
     748:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fixunssfsi>
     74c:	cb 01       	movw	r24, r22
     74e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     752:	80 91 93 03 	lds	r24, 0x0393
     756:	90 91 94 03 	lds	r25, 0x0394
     75a:	0e 94 3c 07 	call	0xe78	; 0xe78 <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	09 f4       	brne	.+2      	; 0x764 <LedTask+0xda>
     762:	bd cf       	rjmp	.-134    	; 0x6de <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	c9 f0       	breq	.+50     	; 0x79e <LedTask+0x114>
     76c:	08 f4       	brcc	.+2      	; 0x770 <LedTask+0xe6>
     76e:	aa cf       	rjmp	.-172    	; 0x6c4 <LedTask+0x3a>
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	09 f0       	breq	.+2      	; 0x776 <LedTask+0xec>
     774:	b4 cf       	rjmp	.-152    	; 0x6de <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     776:	04 2d       	mov	r16, r4
     778:	15 2d       	mov	r17, r5
     77a:	d6 2d       	mov	r29, r6
     77c:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     77e:	0f 2e       	mov	r0, r31
     780:	fa e9       	ldi	r31, 0x9A	; 154
     782:	8f 2e       	mov	r8, r31
     784:	f0 2d       	mov	r31, r0
     786:	0f 2e       	mov	r0, r31
     788:	f9 e9       	ldi	r31, 0x99	; 153
     78a:	9f 2e       	mov	r9, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	0f 2e       	mov	r0, r31
     790:	f9 e1       	ldi	r31, 0x19	; 25
     792:	af 2e       	mov	r10, r31
     794:	f0 2d       	mov	r31, r0
     796:	68 94       	set
     798:	bb 24       	eor	r11, r11
     79a:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     79c:	a0 cf       	rjmp	.-192    	; 0x6de <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     79e:	04 2d       	mov	r16, r4
     7a0:	15 2d       	mov	r17, r5
     7a2:	d6 2d       	mov	r29, r6
     7a4:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     7a6:	82 2c       	mov	r8, r2
     7a8:	93 2c       	mov	r9, r3
     7aa:	0f 2e       	mov	r0, r31
     7ac:	fc ec       	ldi	r31, 0xCC	; 204
     7ae:	af 2e       	mov	r10, r31
     7b0:	f0 2d       	mov	r31, r0
     7b2:	0f 2e       	mov	r0, r31
     7b4:	fe e3       	ldi	r31, 0x3E	; 62
     7b6:	bf 2e       	mov	r11, r31
     7b8:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     7ba:	91 cf       	rjmp	.-222    	; 0x6de <LedTask+0x54>

000007bc <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	69 97       	sbiw	r28, 0x19	; 25
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f1 ec       	ldi	r31, 0xC1	; 193
     7d4:	cf 2e       	mov	r12, r31
     7d6:	d1 2c       	mov	r13, r1
     7d8:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7da:	61 2c       	mov	r6, r1
     7dc:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     7de:	0f 2e       	mov	r0, r31
     7e0:	fe ef       	ldi	r31, 0xFE	; 254
     7e2:	af 2e       	mov	r10, r31
     7e4:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     7e6:	68 94       	set
     7e8:	88 24       	eor	r8, r8
     7ea:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f0 ec       	ldi	r31, 0xC0	; 192
     7f0:	9f 2e       	mov	r9, r31
     7f2:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     7f4:	0f 2e       	mov	r0, r31
     7f6:	f6 ec       	ldi	r31, 0xC6	; 198
     7f8:	ef 2e       	mov	r14, r31
     7fa:	f1 2c       	mov	r15, r1
     7fc:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (5);
     7fe:	85 e0       	ldi	r24, 0x05	; 5
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     806:	80 91 17 04 	lds	r24, 0x0417
     80a:	90 91 18 04 	lds	r25, 0x0418
     80e:	0e 94 3c 07 	call	0xe78	; 0xe78 <OSMboxAccept>
		
		if(msg != NULL){
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	09 f4       	brne	.+2      	; 0x818 <SerialTransmitTask+0x5c>
     816:	6f c0       	rjmp	.+222    	; 0x8f6 <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     818:	bc 01       	movw	r22, r24
     81a:	ce 01       	movw	r24, r28
     81c:	02 96       	adiw	r24, 0x02	; 2
     81e:	0e 94 8f 0b 	call	0x171e	; 0x171e <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     822:	f6 01       	movw	r30, r12
     824:	80 81       	ld	r24, Z
     826:	86 60       	ori	r24, 0x06	; 6
     828:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <SerialTransmitTask+0x76>
     830:	62 c0       	rjmp	.+196    	; 0x8f6 <SerialTransmitTask+0x13a>
     832:	06 2d       	mov	r16, r6
     834:	17 2d       	mov	r17, r7
     836:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     838:	8d 30       	cpi	r24, 0x0D	; 13
     83a:	c9 f4       	brne	.+50     	; 0x86e <SerialTransmitTask+0xb2>
     83c:	c8 01       	movw	r24, r16
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	e2 e0       	ldi	r30, 0x02	; 2
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ec 0f       	add	r30, r28
     846:	fd 1f       	adc	r31, r29
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	20 81       	ld	r18, Z
     84e:	2d 30       	cpi	r18, 0x0D	; 13
     850:	71 f4       	brne	.+28     	; 0x86e <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     852:	e2 e0       	ldi	r30, 0x02	; 2
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ec 0f       	add	r30, r28
     858:	fd 1f       	adc	r31, r29
     85a:	e0 0f       	add	r30, r16
     85c:	f1 1f       	adc	r31, r17
     85e:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     860:	e2 e0       	ldi	r30, 0x02	; 2
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	ec 0f       	add	r30, r28
     866:	fd 1f       	adc	r31, r29
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     86e:	e2 e0       	ldi	r30, 0x02	; 2
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	ec 0f       	add	r30, r28
     874:	fd 1f       	adc	r31, r29
     876:	e0 0f       	add	r30, r16
     878:	f1 1f       	adc	r31, r17
     87a:	80 81       	ld	r24, Z
     87c:	8d 30       	cpi	r24, 0x0D	; 13
     87e:	c9 f4       	brne	.+50     	; 0x8b2 <SerialTransmitTask+0xf6>
     880:	c8 01       	movw	r24, r16
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	e2 e0       	ldi	r30, 0x02	; 2
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	ec 0f       	add	r30, r28
     88a:	fd 1f       	adc	r31, r29
     88c:	e8 0f       	add	r30, r24
     88e:	f9 1f       	adc	r31, r25
     890:	20 81       	ld	r18, Z
     892:	2a 30       	cpi	r18, 0x0A	; 10
     894:	71 f4       	brne	.+28     	; 0x8b2 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     896:	e2 e0       	ldi	r30, 0x02	; 2
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	ec 0f       	add	r30, r28
     89c:	fd 1f       	adc	r31, r29
     89e:	e0 0f       	add	r30, r16
     8a0:	f1 1f       	adc	r31, r17
     8a2:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     8a4:	e2 e0       	ldi	r30, 0x02	; 2
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     8b2:	ae 01       	movw	r20, r28
     8b4:	4f 5f       	subi	r20, 0xFF	; 255
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 91 99 04 	lds	r24, 0x0499
     8c0:	90 91 9a 04 	lds	r25, 0x049A
     8c4:	0e 94 ac 07 	call	0xf58	; 0xf58 <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     8c8:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     8ca:	e2 e0       	ldi	r30, 0x02	; 2
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	e0 0f       	add	r30, r16
     8d4:	f1 1f       	adc	r31, r17
     8d6:	80 81       	ld	r24, Z
     8d8:	f7 01       	movw	r30, r14
     8da:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     8dc:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     8de:	b3 94       	inc	r11
     8e0:	0b 2d       	mov	r16, r11
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	e2 e0       	ldi	r30, 0x02	; 2
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	ec 0f       	add	r30, r28
     8ea:	fd 1f       	adc	r31, r29
     8ec:	e0 0f       	add	r30, r16
     8ee:	f1 1f       	adc	r31, r17
     8f0:	80 81       	ld	r24, Z
     8f2:	81 11       	cpse	r24, r1
     8f4:	a1 cf       	rjmp	.-190    	; 0x838 <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     8f6:	f6 01       	movw	r30, r12
     8f8:	80 81       	ld	r24, Z
     8fa:	89 7f       	andi	r24, 0xF9	; 249
     8fc:	80 83       	st	Z, r24
	}
     8fe:	7f cf       	rjmp	.-258    	; 0x7fe <SerialTransmitTask+0x42>

00000900 <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     900:	0e 94 aa 04 	call	0x954	; 0x954 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     904:	0e 94 61 08 	call	0x10c2	; 0x10c2 <OSInit>
	
	USART_Init();
     908:	0e 94 da 04 	call	0x9b4	; 0x9b4 <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 50 07 	call	0xea0	; 0xea0 <OSMboxCreate>
     914:	90 93 94 03 	sts	0x0394, r25
     918:	80 93 93 03 	sts	0x0393, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 50 07 	call	0xea0	; 0xea0 <OSMboxCreate>
     924:	90 93 18 04 	sts	0x0418, r25
     928:	80 93 17 04 	sts	0x0417, r24
	SerialTxSem = OSSemCreate(1);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 8f 07 	call	0xf1e	; 0xf1e <OSSemCreate>
     934:	90 93 9a 04 	sts	0x049A, r25
     938:	80 93 99 04 	sts	0x0499, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	4a e1       	ldi	r20, 0x1A	; 26
     940:	56 e0       	ldi	r21, 0x06	; 6
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	83 ef       	ldi	r24, 0xF3	; 243
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     94e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <OSStart>
     952:	ff cf       	rjmp	.-2      	; 0x952 <main+0x52>

00000954 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     954:	f8 94       	cli
	WatchDogReset();
     956:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     95a:	84 b7       	in	r24, 0x34	; 52
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     960:	e0 e6       	ldi	r30, 0x60	; 96
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	88 61       	ori	r24, 0x18	; 24
     968:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     96a:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     96c:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     96e:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     970:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     972:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     974:	87 b1       	in	r24, 0x07	; 7
     976:	80 7f       	andi	r24, 0xF0	; 240
     978:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     97a:	8a b1       	in	r24, 0x0a	; 10
     97c:	8f 70       	andi	r24, 0x0F	; 15
     97e:	8a b9       	out	0x0a, r24	; 10
	
	// END TEAM ROTARY
	
	//BUTTON
	
	DDRB |= _BV(DDB0); //B0 as input
     980:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= _BV(DDB1); //B1 as input
     982:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= _BV(DDB2); //B2 as input
     984:	22 9a       	sbi	0x04, 2	; 4
	// END BUTTON
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     98a:	8d e0       	ldi	r24, 0x0D	; 13
     98c:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     98e:	82 e1       	ldi	r24, 0x12	; 18
     990:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     992:	ee e6       	ldi	r30, 0x6E	; 110
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     99c:	e4 e6       	ldi	r30, 0x64	; 100
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	80 83       	st	Z, r24


/* setup USART here  */	

	UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     9a6:	e1 ec       	ldi	r30, 0xC1	; 193
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	89 7f       	andi	r24, 0xF9	; 249
     9ae:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     9b0:	78 94       	sei
     9b2:	08 95       	ret

000009b4 <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     9b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     9b8:	87 e6       	ldi	r24, 0x67	; 103
     9ba:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     9be:	88 e1       	ldi	r24, 0x18	; 24
     9c0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     9c4:	8e e0       	ldi	r24, 0x0E	; 14
     9c6:	80 93 c2 00 	sts	0x00C2, r24
     9ca:	08 95       	ret

000009cc <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     9cc:	fa 01       	movw	r30, r20
     9ce:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     a38:	31 97       	sbiw	r30, 0x01	; 1
     a3a:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     a4c:	31 97       	sbiw	r30, 0x01	; 1
     a4e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	80 e8       	ldi	r24, 0x80	; 128
     a58:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     a5a:	ca 01       	movw	r24, r20
     a5c:	83 97       	sbiw	r24, 0x23	; 35
     a5e:	08 95       	ret

00000a60 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     a60:	08 95       	ret

00000a62 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     a62:	08 95       	ret

00000a64 <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     a64:	08 95       	ret

00000a66 <OSTaskIdle>:
     a66:	f8 94       	cli
     a68:	78 94       	sei
     a6a:	fd cf       	rjmp	.-6      	; 0xa66 <OSTaskIdle>

00000a6c <OSEventTaskRdy>:
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	fc 01       	movw	r30, r24
     a76:	05 85       	ldd	r16, Z+13	; 0x0d
     a78:	e0 2f       	mov	r30, r16
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	eb 5a       	subi	r30, 0xAB	; 171
     a7e:	fe 4f       	sbci	r31, 0xFE	; 254
     a80:	10 81       	ld	r17, Z
     a82:	21 2f       	mov	r18, r17
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	d9 01       	movw	r26, r18
     a88:	ab 5a       	subi	r26, 0xAB	; 171
     a8a:	bd 4f       	sbci	r27, 0xFD	; 253
     a8c:	dc 91       	ld	r29, X
     a8e:	fc 01       	movw	r30, r24
     a90:	e2 0f       	add	r30, r18
     a92:	f3 1f       	adc	r31, r19
     a94:	52 81       	ldd	r21, Z+2	; 0x02
     a96:	a5 2f       	mov	r26, r21
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	ab 5a       	subi	r26, 0xAB	; 171
     a9c:	be 4f       	sbci	r27, 0xFE	; 254
     a9e:	cc 91       	ld	r28, X
     aa0:	ac 2f       	mov	r26, r28
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	ab 5a       	subi	r26, 0xAB	; 171
     aa6:	bd 4f       	sbci	r27, 0xFD	; 253
     aa8:	ac 91       	ld	r26, X
     aaa:	11 0f       	add	r17, r17
     aac:	11 0f       	add	r17, r17
     aae:	11 0f       	add	r17, r17
     ab0:	c1 0f       	add	r28, r17
     ab2:	ba 2f       	mov	r27, r26
     ab4:	b0 95       	com	r27
     ab6:	5b 23       	and	r21, r27
     ab8:	52 83       	std	Z+2, r21	; 0x02
     aba:	51 11       	cpse	r21, r1
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <OSEventTaskRdy+0x5c>
     abe:	5d 2f       	mov	r21, r29
     ac0:	50 95       	com	r21
     ac2:	05 23       	and	r16, r21
     ac4:	fc 01       	movw	r30, r24
     ac6:	05 87       	std	Z+13, r16	; 0x0d
     ac8:	ec 2f       	mov	r30, r28
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 52       	subi	r30, 0x2E	; 46
     ad2:	f9 4f       	sbci	r31, 0xF9	; 249
     ad4:	01 90       	ld	r0, Z+
     ad6:	f0 81       	ld	r31, Z
     ad8:	e0 2d       	mov	r30, r0
     ada:	13 86       	std	Z+11, r1	; 0x0b
     adc:	12 86       	std	Z+10, r1	; 0x0a
     ade:	17 82       	std	Z+7, r1	; 0x07
     ae0:	16 82       	std	Z+6, r1	; 0x06
     ae2:	71 87       	std	Z+9, r23	; 0x09
     ae4:	60 87       	std	Z+8, r22	; 0x08
     ae6:	40 95       	com	r20
     ae8:	84 85       	ldd	r24, Z+12	; 0x0c
     aea:	48 23       	and	r20, r24
     aec:	44 87       	std	Z+12, r20	; 0x0c
     aee:	41 11       	cpse	r20, r1
     af0:	0b c0       	rjmp	.+22     	; 0xb08 <OSEventTaskRdy+0x9c>
     af2:	80 91 33 06 	lds	r24, 0x0633
     af6:	d8 2b       	or	r29, r24
     af8:	d0 93 33 06 	sts	0x0633, r29
     afc:	f9 01       	movw	r30, r18
     afe:	ec 5c       	subi	r30, 0xCC	; 204
     b00:	f9 4f       	sbci	r31, 0xF9	; 249
     b02:	80 81       	ld	r24, Z
     b04:	a8 2b       	or	r26, r24
     b06:	a0 83       	st	Z, r26
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <OSEventTaskWait>:
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	e0 91 3f 06 	lds	r30, 0x063F
     b1a:	f0 91 40 06 	lds	r31, 0x0640
     b1e:	97 83       	std	Z+7, r25	; 0x07
     b20:	86 83       	std	Z+6, r24	; 0x06
     b22:	a7 85       	ldd	r26, Z+15	; 0x0f
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	20 89       	ldd	r18, Z+16	; 0x10
     b28:	ed 01       	movw	r28, r26
     b2a:	cc 5c       	subi	r28, 0xCC	; 204
     b2c:	d9 4f       	sbci	r29, 0xF9	; 249
     b2e:	42 2f       	mov	r20, r18
     b30:	40 95       	com	r20
     b32:	38 81       	ld	r19, Y
     b34:	34 23       	and	r19, r20
     b36:	38 83       	st	Y, r19
     b38:	31 11       	cpse	r19, r1
     b3a:	07 c0       	rjmp	.+14     	; 0xb4a <OSEventTaskWait+0x38>
     b3c:	31 89       	ldd	r19, Z+17	; 0x11
     b3e:	30 95       	com	r19
     b40:	40 91 33 06 	lds	r20, 0x0633
     b44:	34 23       	and	r19, r20
     b46:	30 93 33 06 	sts	0x0633, r19
     b4a:	a8 0f       	add	r26, r24
     b4c:	b9 1f       	adc	r27, r25
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	3c 91       	ld	r19, X
     b52:	12 97       	sbiw	r26, 0x02	; 2
     b54:	23 2b       	or	r18, r19
     b56:	12 96       	adiw	r26, 0x02	; 2
     b58:	2c 93       	st	X, r18
     b5a:	dc 01       	movw	r26, r24
     b5c:	1d 96       	adiw	r26, 0x0d	; 13
     b5e:	3c 91       	ld	r19, X
     b60:	1d 97       	sbiw	r26, 0x0d	; 13
     b62:	21 89       	ldd	r18, Z+17	; 0x11
     b64:	23 2b       	or	r18, r19
     b66:	1d 96       	adiw	r26, 0x0d	; 13
     b68:	2c 93       	st	X, r18
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <OSEventTO>:
     b70:	e0 91 3f 06 	lds	r30, 0x063F
     b74:	f0 91 40 06 	lds	r31, 0x0640
     b78:	27 85       	ldd	r18, Z+15	; 0x0f
     b7a:	dc 01       	movw	r26, r24
     b7c:	a2 0f       	add	r26, r18
     b7e:	b1 1d       	adc	r27, r1
     b80:	20 89       	ldd	r18, Z+16	; 0x10
     b82:	20 95       	com	r18
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	3c 91       	ld	r19, X
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	23 23       	and	r18, r19
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	2c 93       	st	X, r18
     b90:	21 11       	cpse	r18, r1
     b92:	09 c0       	rjmp	.+18     	; 0xba6 <OSEventTO+0x36>
     b94:	21 89       	ldd	r18, Z+17	; 0x11
     b96:	20 95       	com	r18
     b98:	dc 01       	movw	r26, r24
     b9a:	1d 96       	adiw	r26, 0x0d	; 13
     b9c:	3c 91       	ld	r19, X
     b9e:	1d 97       	sbiw	r26, 0x0d	; 13
     ba0:	23 23       	and	r18, r19
     ba2:	1d 96       	adiw	r26, 0x0d	; 13
     ba4:	2c 93       	st	X, r18
     ba6:	14 86       	std	Z+12, r1	; 0x0c
     ba8:	17 82       	std	Z+7, r1	; 0x07
     baa:	16 82       	std	Z+6, r1	; 0x06
     bac:	08 95       	ret

00000bae <OSEventWaitListInit>:
     bae:	fc 01       	movw	r30, r24
     bb0:	15 86       	std	Z+13, r1	; 0x0d
     bb2:	32 96       	adiw	r30, 0x02	; 2
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	11 92       	st	Z+, r1
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	88 30       	cpi	r24, 0x08	; 8
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <OSEventWaitListInit+0x8>
     bbe:	08 95       	ret

00000bc0 <OSIntExit>:
     bc0:	f8 94       	cli
     bc2:	80 91 3e 06 	lds	r24, 0x063E
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	80 93 3e 06 	sts	0x063E, r24
     bcc:	90 91 1b 06 	lds	r25, 0x061B
     bd0:	89 2b       	or	r24, r25
     bd2:	e1 f5       	brne	.+120    	; 0xc4c <OSIntExit+0x8c>
     bd4:	e0 91 33 06 	lds	r30, 0x0633
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	eb 5a       	subi	r30, 0xAB	; 171
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	80 93 92 03 	sts	0x0392, r24
     be4:	e8 2f       	mov	r30, r24
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ec 5c       	subi	r30, 0xCC	; 204
     bea:	f9 4f       	sbci	r31, 0xF9	; 249
     bec:	e0 81       	ld	r30, Z
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	eb 5a       	subi	r30, 0xAB	; 171
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	88 0f       	add	r24, r24
     bf6:	88 0f       	add	r24, r24
     bf8:	88 0f       	add	r24, r24
     bfa:	90 81       	ld	r25, Z
     bfc:	89 0f       	add	r24, r25
     bfe:	80 93 21 06 	sts	0x0621, r24
     c02:	90 91 22 06 	lds	r25, 0x0622
     c06:	89 17       	cp	r24, r25
     c08:	09 f1       	breq	.+66     	; 0xc4c <OSIntExit+0x8c>
     c0a:	e8 2f       	mov	r30, r24
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	ee 52       	subi	r30, 0x2E	; 46
     c14:	f9 4f       	sbci	r31, 0xF9	; 249
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	90 93 32 06 	sts	0x0632, r25
     c1e:	80 93 31 06 	sts	0x0631, r24
     c22:	80 91 25 06 	lds	r24, 0x0625
     c26:	90 91 26 06 	lds	r25, 0x0626
     c2a:	a0 91 27 06 	lds	r26, 0x0627
     c2e:	b0 91 28 06 	lds	r27, 0x0628
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	a1 1d       	adc	r26, r1
     c36:	b1 1d       	adc	r27, r1
     c38:	80 93 25 06 	sts	0x0625, r24
     c3c:	90 93 26 06 	sts	0x0626, r25
     c40:	a0 93 27 06 	sts	0x0627, r26
     c44:	b0 93 28 06 	sts	0x0628, r27
     c48:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
     c4c:	78 94       	sei
     c4e:	08 95       	ret

00000c50 <OSSched>:
     c50:	f8 94       	cli
     c52:	90 91 3e 06 	lds	r25, 0x063E
     c56:	80 91 1b 06 	lds	r24, 0x061B
     c5a:	89 2b       	or	r24, r25
     c5c:	d1 f5       	brne	.+116    	; 0xcd2 <OSSched+0x82>
     c5e:	e0 91 33 06 	lds	r30, 0x0633
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	eb 5a       	subi	r30, 0xAB	; 171
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	80 81       	ld	r24, Z
     c6a:	e8 2f       	mov	r30, r24
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	ec 5c       	subi	r30, 0xCC	; 204
     c70:	f9 4f       	sbci	r31, 0xF9	; 249
     c72:	e0 81       	ld	r30, Z
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	eb 5a       	subi	r30, 0xAB	; 171
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	88 0f       	add	r24, r24
     c7c:	88 0f       	add	r24, r24
     c7e:	88 0f       	add	r24, r24
     c80:	90 81       	ld	r25, Z
     c82:	e8 2f       	mov	r30, r24
     c84:	e9 0f       	add	r30, r25
     c86:	e0 93 21 06 	sts	0x0621, r30
     c8a:	80 91 22 06 	lds	r24, 0x0622
     c8e:	e8 17       	cp	r30, r24
     c90:	01 f1       	breq	.+64     	; 0xcd2 <OSSched+0x82>
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	ee 52       	subi	r30, 0x2E	; 46
     c9a:	f9 4f       	sbci	r31, 0xF9	; 249
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	90 93 32 06 	sts	0x0632, r25
     ca4:	80 93 31 06 	sts	0x0631, r24
     ca8:	80 91 25 06 	lds	r24, 0x0625
     cac:	90 91 26 06 	lds	r25, 0x0626
     cb0:	a0 91 27 06 	lds	r26, 0x0627
     cb4:	b0 91 28 06 	lds	r27, 0x0628
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	a1 1d       	adc	r26, r1
     cbc:	b1 1d       	adc	r27, r1
     cbe:	80 93 25 06 	sts	0x0625, r24
     cc2:	90 93 26 06 	sts	0x0626, r25
     cc6:	a0 93 27 06 	sts	0x0627, r26
     cca:	b0 93 28 06 	sts	0x0628, r27
     cce:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
     cd2:	78 94       	sei
     cd4:	08 95       	ret

00000cd6 <OSStart>:
     cd6:	80 91 1c 06 	lds	r24, 0x061C
     cda:	81 11       	cpse	r24, r1
     cdc:	26 c0       	rjmp	.+76     	; 0xd2a <OSStart+0x54>
     cde:	e0 91 33 06 	lds	r30, 0x0633
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	eb 5a       	subi	r30, 0xAB	; 171
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	e0 81       	ld	r30, Z
     cea:	ae 2f       	mov	r26, r30
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ac 5c       	subi	r26, 0xCC	; 204
     cf0:	b9 4f       	sbci	r27, 0xF9	; 249
     cf2:	ac 91       	ld	r26, X
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ab 5a       	subi	r26, 0xAB	; 171
     cf8:	be 4f       	sbci	r27, 0xFE	; 254
     cfa:	ee 0f       	add	r30, r30
     cfc:	ee 0f       	add	r30, r30
     cfe:	ee 0f       	add	r30, r30
     d00:	8c 91       	ld	r24, X
     d02:	e8 0f       	add	r30, r24
     d04:	e0 93 21 06 	sts	0x0621, r30
     d08:	e0 93 22 06 	sts	0x0622, r30
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ee 52       	subi	r30, 0x2E	; 46
     d14:	f9 4f       	sbci	r31, 0xF9	; 249
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	90 93 32 06 	sts	0x0632, r25
     d1e:	80 93 31 06 	sts	0x0631, r24
     d22:	90 93 40 06 	sts	0x0640, r25
     d26:	80 93 3f 06 	sts	0x063F, r24
     d2a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
     d2e:	08 95       	ret

00000d30 <OSTCBInit>:
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	f8 94       	cli
     d36:	e0 91 2d 06 	lds	r30, 0x062D
     d3a:	f0 91 2e 06 	lds	r31, 0x062E
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	09 f4       	brne	.+2      	; 0xd44 <OSTCBInit+0x14>
     d42:	4f c0       	rjmp	.+158    	; 0xde2 <OSTCBInit+0xb2>
     d44:	22 81       	ldd	r18, Z+2	; 0x02
     d46:	33 81       	ldd	r19, Z+3	; 0x03
     d48:	30 93 2e 06 	sts	0x062E, r19
     d4c:	20 93 2d 06 	sts	0x062D, r18
     d50:	78 94       	sei
     d52:	71 83       	std	Z+1, r23	; 0x01
     d54:	60 83       	st	Z, r22
     d56:	85 87       	std	Z+13, r24	; 0x0d
     d58:	14 86       	std	Z+12, r1	; 0x0c
     d5a:	13 86       	std	Z+11, r1	; 0x0b
     d5c:	12 86       	std	Z+10, r1	; 0x0a
     d5e:	c8 2f       	mov	r28, r24
     d60:	c6 95       	lsr	r28
     d62:	c6 95       	lsr	r28
     d64:	c6 95       	lsr	r28
     d66:	c7 87       	std	Z+15, r28	; 0x0f
     d68:	d0 e0       	ldi	r29, 0x00	; 0
     d6a:	cb 5a       	subi	r28, 0xAB	; 171
     d6c:	dd 4f       	sbci	r29, 0xFD	; 253
     d6e:	98 81       	ld	r25, Y
     d70:	91 8b       	std	Z+17, r25	; 0x11
     d72:	c8 2f       	mov	r28, r24
     d74:	c7 70       	andi	r28, 0x07	; 7
     d76:	c6 87       	std	Z+14, r28	; 0x0e
     d78:	d0 e0       	ldi	r29, 0x00	; 0
     d7a:	cb 5a       	subi	r28, 0xAB	; 171
     d7c:	dd 4f       	sbci	r29, 0xFD	; 253
     d7e:	98 81       	ld	r25, Y
     d80:	90 8b       	std	Z+16, r25	; 0x10
     d82:	17 82       	std	Z+7, r1	; 0x07
     d84:	16 82       	std	Z+6, r1	; 0x06
     d86:	11 86       	std	Z+9, r1	; 0x09
     d88:	10 86       	std	Z+8, r1	; 0x08
     d8a:	f8 94       	cli
     d8c:	a8 2f       	mov	r26, r24
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	aa 0f       	add	r26, r26
     d92:	bb 1f       	adc	r27, r27
     d94:	ae 52       	subi	r26, 0x2E	; 46
     d96:	b9 4f       	sbci	r27, 0xF9	; 249
     d98:	ed 93       	st	X+, r30
     d9a:	fc 93       	st	X, r31
     d9c:	a0 91 23 06 	lds	r26, 0x0623
     da0:	b0 91 24 06 	lds	r27, 0x0624
     da4:	b3 83       	std	Z+3, r27	; 0x03
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	15 82       	std	Z+5, r1	; 0x05
     daa:	14 82       	std	Z+4, r1	; 0x04
     dac:	10 97       	sbiw	r26, 0x00	; 0
     dae:	21 f0       	breq	.+8      	; 0xdb8 <OSTCBInit+0x88>
     db0:	15 96       	adiw	r26, 0x05	; 5
     db2:	fc 93       	st	X, r31
     db4:	ee 93       	st	-X, r30
     db6:	14 97       	sbiw	r26, 0x04	; 4
     db8:	f0 93 24 06 	sts	0x0624, r31
     dbc:	e0 93 23 06 	sts	0x0623, r30
     dc0:	90 91 33 06 	lds	r25, 0x0633
     dc4:	81 89       	ldd	r24, Z+17	; 0x11
     dc6:	89 2b       	or	r24, r25
     dc8:	80 93 33 06 	sts	0x0633, r24
     dcc:	a7 85       	ldd	r26, Z+15	; 0x0f
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ac 5c       	subi	r26, 0xCC	; 204
     dd2:	b9 4f       	sbci	r27, 0xF9	; 249
     dd4:	9c 91       	ld	r25, X
     dd6:	80 89       	ldd	r24, Z+16	; 0x10
     dd8:	89 2b       	or	r24, r25
     dda:	8c 93       	st	X, r24
     ddc:	78 94       	sei
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <OSTCBInit+0xb6>
     de2:	78 94       	sei
     de4:	86 e4       	ldi	r24, 0x46	; 70
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <OSTimeTick>:
     dec:	0e 94 32 05 	call	0xa64	; 0xa64 <OSTimeTickHook>
     df0:	e0 91 23 06 	lds	r30, 0x0623
     df4:	f0 91 24 06 	lds	r31, 0x0624
     df8:	85 85       	ldd	r24, Z+13	; 0x0d
     dfa:	8f 33       	cpi	r24, 0x3F	; 63
     dfc:	39 f1       	breq	.+78     	; 0xe4c <OSTimeTick+0x60>
     dfe:	40 91 33 06 	lds	r20, 0x0633
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	f8 94       	cli
     e08:	82 85       	ldd	r24, Z+10	; 0x0a
     e0a:	93 85       	ldd	r25, Z+11	; 0x0b
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	a9 f0       	breq	.+42     	; 0xe3a <OSTimeTick+0x4e>
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	93 87       	std	Z+11, r25	; 0x0b
     e14:	82 87       	std	Z+10, r24	; 0x0a
     e16:	89 2b       	or	r24, r25
     e18:	81 f4       	brne	.+32     	; 0xe3a <OSTimeTick+0x4e>
     e1a:	84 85       	ldd	r24, Z+12	; 0x0c
     e1c:	83 fd       	sbrc	r24, 3
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <OSTimeTick+0x4a>
     e20:	81 89       	ldd	r24, Z+17	; 0x11
     e22:	a7 85       	ldd	r26, Z+15	; 0x0f
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ac 5c       	subi	r26, 0xCC	; 204
     e28:	b9 4f       	sbci	r27, 0xF9	; 249
     e2a:	5c 91       	ld	r21, X
     e2c:	90 89       	ldd	r25, Z+16	; 0x10
     e2e:	95 2b       	or	r25, r21
     e30:	9c 93       	st	X, r25
     e32:	48 2b       	or	r20, r24
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <OSTimeTick+0x4e>
     e36:	33 87       	std	Z+11, r19	; 0x0b
     e38:	22 87       	std	Z+10, r18	; 0x0a
     e3a:	02 80       	ldd	r0, Z+2	; 0x02
     e3c:	f3 81       	ldd	r31, Z+3	; 0x03
     e3e:	e0 2d       	mov	r30, r0
     e40:	78 94       	sei
     e42:	85 85       	ldd	r24, Z+13	; 0x0d
     e44:	8f 33       	cpi	r24, 0x3F	; 63
     e46:	f9 f6       	brne	.-66     	; 0xe06 <OSTimeTick+0x1a>
     e48:	40 93 33 06 	sts	0x0633, r20
     e4c:	f8 94       	cli
     e4e:	80 91 41 06 	lds	r24, 0x0641
     e52:	90 91 42 06 	lds	r25, 0x0642
     e56:	a0 91 43 06 	lds	r26, 0x0643
     e5a:	b0 91 44 06 	lds	r27, 0x0644
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	a1 1d       	adc	r26, r1
     e62:	b1 1d       	adc	r27, r1
     e64:	80 93 41 06 	sts	0x0641, r24
     e68:	90 93 42 06 	sts	0x0642, r25
     e6c:	a0 93 43 06 	sts	0x0643, r26
     e70:	b0 93 44 06 	sts	0x0644, r27
     e74:	78 94       	sei
     e76:	08 95       	ret

00000e78 <OSMboxAccept>:
     e78:	fc 01       	movw	r30, r24
     e7a:	f8 94       	cli
     e7c:	84 85       	ldd	r24, Z+12	; 0x0c
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	21 f0       	breq	.+8      	; 0xe8a <OSMboxAccept+0x12>
     e82:	78 94       	sei
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	08 95       	ret
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	11 f0       	breq	.+4      	; 0xe98 <OSMboxAccept+0x20>
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
     e98:	78 94       	sei
     e9a:	82 2f       	mov	r24, r18
     e9c:	93 2f       	mov	r25, r19
     e9e:	08 95       	ret

00000ea0 <OSMboxCreate>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	f8 94       	cli
     ea6:	c0 91 3c 06 	lds	r28, 0x063C
     eaa:	d0 91 3d 06 	lds	r29, 0x063D
     eae:	20 97       	sbiw	r28, 0x00	; 0
     eb0:	31 f0       	breq	.+12     	; 0xebe <OSMboxCreate+0x1e>
     eb2:	28 81       	ld	r18, Y
     eb4:	39 81       	ldd	r19, Y+1	; 0x01
     eb6:	30 93 3d 06 	sts	0x063D, r19
     eba:	20 93 3c 06 	sts	0x063C, r18
     ebe:	78 94       	sei
     ec0:	20 97       	sbiw	r28, 0x00	; 0
     ec2:	39 f0       	breq	.+14     	; 0xed2 <OSMboxCreate+0x32>
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	2c 87       	std	Y+12, r18	; 0x0c
     ec8:	99 83       	std	Y+1, r25	; 0x01
     eca:	88 83       	st	Y, r24
     ecc:	ce 01       	movw	r24, r28
     ece:	0e 94 d7 05 	call	0xbae	; 0xbae <OSEventWaitListInit>
     ed2:	ce 01       	movw	r24, r28
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <OSMboxPost>:
     eda:	f8 94       	cli
     edc:	fc 01       	movw	r30, r24
     ede:	24 85       	ldd	r18, Z+12	; 0x0c
     ee0:	21 30       	cpi	r18, 0x01	; 1
     ee2:	19 f0       	breq	.+6      	; 0xeea <OSMboxPost+0x10>
     ee4:	78 94       	sei
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	08 95       	ret
     eea:	fc 01       	movw	r30, r24
     eec:	25 85       	ldd	r18, Z+13	; 0x0d
     eee:	22 23       	and	r18, r18
     ef0:	41 f0       	breq	.+16     	; 0xf02 <OSMboxPost+0x28>
     ef2:	42 e0       	ldi	r20, 0x02	; 2
     ef4:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSEventTaskRdy>
     ef8:	78 94       	sei
     efa:	0e 94 28 06 	call	0xc50	; 0xc50 <OSSched>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret
     f02:	fc 01       	movw	r30, r24
     f04:	20 81       	ld	r18, Z
     f06:	31 81       	ldd	r19, Z+1	; 0x01
     f08:	23 2b       	or	r18, r19
     f0a:	19 f0       	breq	.+6      	; 0xf12 <OSMboxPost+0x38>
     f0c:	78 94       	sei
     f0e:	84 e1       	ldi	r24, 0x14	; 20
     f10:	08 95       	ret
     f12:	fc 01       	movw	r30, r24
     f14:	71 83       	std	Z+1, r23	; 0x01
     f16:	60 83       	st	Z, r22
     f18:	78 94       	sei
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret

00000f1e <OSSemCreate>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	f8 94       	cli
     f24:	c0 91 3c 06 	lds	r28, 0x063C
     f28:	d0 91 3d 06 	lds	r29, 0x063D
     f2c:	20 97       	sbiw	r28, 0x00	; 0
     f2e:	31 f0       	breq	.+12     	; 0xf3c <OSSemCreate+0x1e>
     f30:	28 81       	ld	r18, Y
     f32:	39 81       	ldd	r19, Y+1	; 0x01
     f34:	30 93 3d 06 	sts	0x063D, r19
     f38:	20 93 3c 06 	sts	0x063C, r18
     f3c:	78 94       	sei
     f3e:	20 97       	sbiw	r28, 0x00	; 0
     f40:	39 f0       	breq	.+14     	; 0xf50 <OSSemCreate+0x32>
     f42:	23 e0       	ldi	r18, 0x03	; 3
     f44:	2c 87       	std	Y+12, r18	; 0x0c
     f46:	9b 87       	std	Y+11, r25	; 0x0b
     f48:	8a 87       	std	Y+10, r24	; 0x0a
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 d7 05 	call	0xbae	; 0xbae <OSEventWaitListInit>
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <OSSemPend>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	8a 01       	movw	r16, r20
     f64:	f8 94       	cli
     f66:	8c 85       	ldd	r24, Y+12	; 0x0c
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	21 f0       	breq	.+8      	; 0xf74 <OSSemPend+0x1c>
     f6c:	78 94       	sei
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	fa 01       	movw	r30, r20
     f72:	80 83       	st	Z, r24
     f74:	8a 85       	ldd	r24, Y+10	; 0x0a
     f76:	9b 85       	ldd	r25, Y+11	; 0x0b
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	39 f0       	breq	.+14     	; 0xf8a <OSSemPend+0x32>
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9b 87       	std	Y+11, r25	; 0x0b
     f80:	8a 87       	std	Y+10, r24	; 0x0a
     f82:	78 94       	sei
     f84:	f8 01       	movw	r30, r16
     f86:	10 82       	st	Z, r1
     f88:	2d c0       	rjmp	.+90     	; 0xfe4 <OSSemPend+0x8c>
     f8a:	80 91 3e 06 	lds	r24, 0x063E
     f8e:	88 23       	and	r24, r24
     f90:	29 f0       	breq	.+10     	; 0xf9c <OSSemPend+0x44>
     f92:	78 94       	sei
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	f8 01       	movw	r30, r16
     f98:	80 83       	st	Z, r24
     f9a:	24 c0       	rjmp	.+72     	; 0xfe4 <OSSemPend+0x8c>
     f9c:	e0 91 3f 06 	lds	r30, 0x063F
     fa0:	f0 91 40 06 	lds	r31, 0x0640
     fa4:	84 85       	ldd	r24, Z+12	; 0x0c
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	84 87       	std	Z+12, r24	; 0x0c
     faa:	73 87       	std	Z+11, r23	; 0x0b
     fac:	62 87       	std	Z+10, r22	; 0x0a
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 89 05 	call	0xb12	; 0xb12 <OSEventTaskWait>
     fb4:	78 94       	sei
     fb6:	0e 94 28 06 	call	0xc50	; 0xc50 <OSSched>
     fba:	f8 94       	cli
     fbc:	e0 91 3f 06 	lds	r30, 0x063F
     fc0:	f0 91 40 06 	lds	r31, 0x0640
     fc4:	84 85       	ldd	r24, Z+12	; 0x0c
     fc6:	80 ff       	sbrs	r24, 0
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <OSSemPend+0x82>
     fca:	ce 01       	movw	r24, r28
     fcc:	0e 94 b8 05 	call	0xb70	; 0xb70 <OSEventTO>
     fd0:	78 94       	sei
     fd2:	8a e0       	ldi	r24, 0x0A	; 10
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <OSSemPend+0x8c>
     fda:	17 82       	std	Z+7, r1	; 0x07
     fdc:	16 82       	std	Z+6, r1	; 0x06
     fde:	78 94       	sei
     fe0:	f8 01       	movw	r30, r16
     fe2:	10 82       	st	Z, r1
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <OSTaskCreate>:
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	b2 2e       	mov	r11, r18
    1002:	2f e3       	ldi	r18, 0x3F	; 63
    1004:	2b 15       	cp	r18, r11
    1006:	08 f4       	brcc	.+2      	; 0x100a <OSTaskCreate+0x1c>
    1008:	4f c0       	rjmp	.+158    	; 0x10a8 <OSTaskCreate+0xba>
    100a:	f8 94       	cli
    100c:	cb 2d       	mov	r28, r11
    100e:	d0 e0       	ldi	r29, 0x00	; 0
    1010:	fe 01       	movw	r30, r28
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ee 52       	subi	r30, 0x2E	; 46
    1018:	f9 4f       	sbci	r31, 0xF9	; 249
    101a:	01 90       	ld	r0, Z+
    101c:	f0 81       	ld	r31, Z
    101e:	e0 2d       	mov	r30, r0
    1020:	ef 2b       	or	r30, r31
    1022:	09 f0       	breq	.+2      	; 0x1026 <OSTaskCreate+0x38>
    1024:	3e c0       	rjmp	.+124    	; 0x10a2 <OSTaskCreate+0xb4>
    1026:	fe 01       	movw	r30, r28
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	ee 52       	subi	r30, 0x2E	; 46
    102e:	f9 4f       	sbci	r31, 0xF9	; 249
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	31 83       	std	Z+1, r19	; 0x01
    1036:	20 83       	st	Z, r18
    1038:	78 94       	sei
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <OSTaskStkInit>
    1042:	c1 2c       	mov	r12, r1
    1044:	d1 2c       	mov	r13, r1
    1046:	e1 2c       	mov	r14, r1
    1048:	f1 2c       	mov	r15, r1
    104a:	00 e0       	ldi	r16, 0x00	; 0
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	8b 2d       	mov	r24, r11
    105a:	0e 94 98 06 	call	0xd30	; 0xd30 <OSTCBInit>
    105e:	81 11       	cpse	r24, r1
    1060:	17 c0       	rjmp	.+46     	; 0x1090 <OSTaskCreate+0xa2>
    1062:	f8 94       	cli
    1064:	80 91 30 06 	lds	r24, 0x0630
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	80 93 30 06 	sts	0x0630, r24
    106e:	cc 0f       	add	r28, r28
    1070:	dd 1f       	adc	r29, r29
    1072:	ce 52       	subi	r28, 0x2E	; 46
    1074:	d9 4f       	sbci	r29, 0xF9	; 249
    1076:	88 81       	ld	r24, Y
    1078:	99 81       	ldd	r25, Y+1	; 0x01
    107a:	0e 94 30 05 	call	0xa60	; 0xa60 <OSTaskCreateHook>
    107e:	78 94       	sei
    1080:	80 91 1c 06 	lds	r24, 0x061C
    1084:	88 23       	and	r24, r24
    1086:	91 f0       	breq	.+36     	; 0x10ac <OSTaskCreate+0xbe>
    1088:	0e 94 28 06 	call	0xc50	; 0xc50 <OSSched>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <OSTaskCreate+0xc0>
    1090:	f8 94       	cli
    1092:	cc 0f       	add	r28, r28
    1094:	dd 1f       	adc	r29, r29
    1096:	ce 52       	subi	r28, 0x2E	; 46
    1098:	d9 4f       	sbci	r29, 0xF9	; 249
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	18 82       	st	Y, r1
    109e:	78 94       	sei
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <OSTaskCreate+0xc0>
    10a2:	78 94       	sei
    10a4:	88 e2       	ldi	r24, 0x28	; 40
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <OSTaskCreate+0xc0>
    10a8:	8a e2       	ldi	r24, 0x2A	; 42
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <OSTaskCreate+0xc0>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	08 95       	ret

000010c2 <OSInit>:
    10c2:	10 92 41 06 	sts	0x0641, r1
    10c6:	10 92 42 06 	sts	0x0642, r1
    10ca:	10 92 43 06 	sts	0x0643, r1
    10ce:	10 92 44 06 	sts	0x0644, r1
    10d2:	10 92 3e 06 	sts	0x063E, r1
    10d6:	10 92 1b 06 	sts	0x061B, r1
    10da:	10 92 30 06 	sts	0x0630, r1
    10de:	10 92 1c 06 	sts	0x061C, r1
    10e2:	10 92 1d 06 	sts	0x061D, r1
    10e6:	10 92 1e 06 	sts	0x061E, r1
    10ea:	10 92 1f 06 	sts	0x061F, r1
    10ee:	10 92 20 06 	sts	0x0620, r1
    10f2:	10 92 25 06 	sts	0x0625, r1
    10f6:	10 92 26 06 	sts	0x0626, r1
    10fa:	10 92 27 06 	sts	0x0627, r1
    10fe:	10 92 28 06 	sts	0x0628, r1
    1102:	10 92 33 06 	sts	0x0633, r1
    1106:	e4 e3       	ldi	r30, 0x34	; 52
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	8c e3       	ldi	r24, 0x3C	; 60
    110c:	96 e0       	ldi	r25, 0x06	; 6
    110e:	11 92       	st	Z+, r1
    1110:	e8 17       	cp	r30, r24
    1112:	f9 07       	cpc	r31, r25
    1114:	e1 f7       	brne	.-8      	; 0x110e <OSInit+0x4c>
    1116:	10 92 22 06 	sts	0x0622, r1
    111a:	10 92 21 06 	sts	0x0621, r1
    111e:	10 92 32 06 	sts	0x0632, r1
    1122:	10 92 31 06 	sts	0x0631, r1
    1126:	10 92 40 06 	sts	0x0640, r1
    112a:	10 92 3f 06 	sts	0x063F, r1
    112e:	10 92 24 06 	sts	0x0624, r1
    1132:	10 92 23 06 	sts	0x0623, r1
    1136:	e2 ed       	ldi	r30, 0xD2	; 210
    1138:	f6 e0       	ldi	r31, 0x06	; 6
    113a:	82 e5       	ldi	r24, 0x52	; 82
    113c:	97 e0       	ldi	r25, 0x07	; 7
    113e:	11 92       	st	Z+, r1
    1140:	11 92       	st	Z+, r1
    1142:	e8 17       	cp	r30, r24
    1144:	f9 07       	cpc	r31, r25
    1146:	d9 f7       	brne	.-10     	; 0x113e <OSInit+0x7c>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	22 e1       	ldi	r18, 0x12	; 18
    114e:	33 e0       	ldi	r19, 0x03	; 3
    1150:	fc 01       	movw	r30, r24
    1152:	70 97       	sbiw	r30, 0x10	; 16
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	42 96       	adiw	r24, 0x12	; 18
    115a:	82 17       	cp	r24, r18
    115c:	93 07       	cpc	r25, r19
    115e:	c1 f7       	brne	.-16     	; 0x1150 <OSInit+0x8e>
    1160:	10 92 03 03 	sts	0x0303, r1
    1164:	10 92 02 03 	sts	0x0302, r1
    1168:	8e e5       	ldi	r24, 0x5E	; 94
    116a:	92 e0       	ldi	r25, 0x02	; 2
    116c:	90 93 2e 06 	sts	0x062E, r25
    1170:	80 93 2d 06 	sts	0x062D, r24
    1174:	83 e5       	ldi	r24, 0x53	; 83
    1176:	96 e0       	ldi	r25, 0x06	; 6
    1178:	21 ed       	ldi	r18, 0xD1	; 209
    117a:	36 e0       	ldi	r19, 0x06	; 6
    117c:	fc 01       	movw	r30, r24
    117e:	3e 97       	sbiw	r30, 0x0e	; 14
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
    1184:	0e 96       	adiw	r24, 0x0e	; 14
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	c1 f7       	brne	.-16     	; 0x117c <OSInit+0xba>
    118c:	10 92 c4 06 	sts	0x06C4, r1
    1190:	10 92 c3 06 	sts	0x06C3, r1
    1194:	85 e4       	ldi	r24, 0x45	; 69
    1196:	96 e0       	ldi	r25, 0x06	; 6
    1198:	90 93 3d 06 	sts	0x063D, r25
    119c:	80 93 3c 06 	sts	0x063C, r24
    11a0:	2f e3       	ldi	r18, 0x3F	; 63
    11a2:	41 e9       	ldi	r20, 0x91	; 145
    11a4:	53 e0       	ldi	r21, 0x03	; 3
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	83 e3       	ldi	r24, 0x33	; 51
    11ac:	95 e0       	ldi	r25, 0x05	; 5
    11ae:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
    11b2:	2e e3       	ldi	r18, 0x3E	; 62
    11b4:	41 e5       	ldi	r20, 0x51	; 81
    11b6:	53 e0       	ldi	r21, 0x03	; 3
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	8a e2       	ldi	r24, 0x2A	; 42
    11be:	99 e0       	ldi	r25, 0x09	; 9
    11c0:	0e 94 f7 07 	call	0xfee	; 0xfee <OSTaskCreate>
    11c4:	08 95       	ret

000011c6 <OSTimeDly>:
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	e1 f0       	breq	.+56     	; 0x1202 <OSTimeDly+0x3c>
    11ca:	f8 94       	cli
    11cc:	e0 91 3f 06 	lds	r30, 0x063F
    11d0:	f0 91 40 06 	lds	r31, 0x0640
    11d4:	a7 85       	ldd	r26, Z+15	; 0x0f
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ac 5c       	subi	r26, 0xCC	; 204
    11da:	b9 4f       	sbci	r27, 0xF9	; 249
    11dc:	20 89       	ldd	r18, Z+16	; 0x10
    11de:	20 95       	com	r18
    11e0:	3c 91       	ld	r19, X
    11e2:	23 23       	and	r18, r19
    11e4:	2c 93       	st	X, r18
    11e6:	21 11       	cpse	r18, r1
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <OSTimeDly+0x32>
    11ea:	21 89       	ldd	r18, Z+17	; 0x11
    11ec:	20 95       	com	r18
    11ee:	30 91 33 06 	lds	r19, 0x0633
    11f2:	23 23       	and	r18, r19
    11f4:	20 93 33 06 	sts	0x0633, r18
    11f8:	93 87       	std	Z+11, r25	; 0x0b
    11fa:	82 87       	std	Z+10, r24	; 0x0a
    11fc:	78 94       	sei
    11fe:	0e 94 28 06 	call	0xc50	; 0xc50 <OSSched>
    1202:	08 95       	ret

00001204 <OSStatInit>:
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    120c:	f8 94       	cli
    120e:	10 92 1d 06 	sts	0x061D, r1
    1212:	10 92 1e 06 	sts	0x061E, r1
    1216:	10 92 1f 06 	sts	0x061F, r1
    121a:	10 92 20 06 	sts	0x0620, r1
    121e:	78 94       	sei
    1220:	88 ec       	ldi	r24, 0xC8	; 200
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    1228:	f8 94       	cli
    122a:	80 91 1d 06 	lds	r24, 0x061D
    122e:	90 91 1e 06 	lds	r25, 0x061E
    1232:	a0 91 1f 06 	lds	r26, 0x061F
    1236:	b0 91 20 06 	lds	r27, 0x0620
    123a:	80 93 29 06 	sts	0x0629, r24
    123e:	90 93 2a 06 	sts	0x062A, r25
    1242:	a0 93 2b 06 	sts	0x062B, r26
    1246:	b0 93 2c 06 	sts	0x062C, r27
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 d1 06 	sts	0x06D1, r24
    1250:	78 94       	sei
    1252:	08 95       	ret

00001254 <OSTaskStat>:
    1254:	80 91 d1 06 	lds	r24, 0x06D1
    1258:	81 11       	cpse	r24, r1
    125a:	08 c0       	rjmp	.+16     	; 0x126c <OSTaskStat+0x18>
    125c:	80 e9       	ldi	r24, 0x90	; 144
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    1264:	80 91 d1 06 	lds	r24, 0x06D1
    1268:	88 23       	and	r24, r24
    126a:	c1 f3       	breq	.-16     	; 0x125c <OSTaskStat+0x8>
    126c:	c4 e6       	ldi	r28, 0x64	; 100
    126e:	f8 94       	cli
    1270:	20 91 1d 06 	lds	r18, 0x061D
    1274:	30 91 1e 06 	lds	r19, 0x061E
    1278:	40 91 1f 06 	lds	r20, 0x061F
    127c:	50 91 20 06 	lds	r21, 0x0620
    1280:	20 93 52 07 	sts	0x0752, r18
    1284:	30 93 53 07 	sts	0x0753, r19
    1288:	40 93 54 07 	sts	0x0754, r20
    128c:	50 93 55 07 	sts	0x0755, r21
    1290:	10 92 1d 06 	sts	0x061D, r1
    1294:	10 92 1e 06 	sts	0x061E, r1
    1298:	10 92 1f 06 	sts	0x061F, r1
    129c:	10 92 20 06 	sts	0x0620, r1
    12a0:	78 94       	sei
    12a2:	c0 90 29 06 	lds	r12, 0x0629
    12a6:	d0 90 2a 06 	lds	r13, 0x062A
    12aa:	e0 90 2b 06 	lds	r14, 0x062B
    12ae:	f0 90 2c 06 	lds	r15, 0x062C
    12b2:	c1 14       	cp	r12, r1
    12b4:	d1 04       	cpc	r13, r1
    12b6:	e1 04       	cpc	r14, r1
    12b8:	f1 04       	cpc	r15, r1
    12ba:	b9 f0       	breq	.+46     	; 0x12ea <OSTaskStat+0x96>
    12bc:	a4 e6       	ldi	r26, 0x64	; 100
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__muluhisi3>
    12c4:	a7 01       	movw	r20, r14
    12c6:	96 01       	movw	r18, r12
    12c8:	0e 94 3f 0b 	call	0x167e	; 0x167e <__udivmodsi4>
    12cc:	8c 2f       	mov	r24, r28
    12ce:	82 1b       	sub	r24, r18
    12d0:	85 36       	cpi	r24, 0x65	; 101
    12d2:	1c f0       	brlt	.+6      	; 0x12da <OSTaskStat+0x86>
    12d4:	c0 93 2f 06 	sts	0x062F, r28
    12d8:	0a c0       	rjmp	.+20     	; 0x12ee <OSTaskStat+0x9a>
    12da:	88 23       	and	r24, r24
    12dc:	1c f4       	brge	.+6      	; 0x12e4 <OSTaskStat+0x90>
    12de:	10 92 2f 06 	sts	0x062F, r1
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <OSTaskStat+0x9a>
    12e4:	80 93 2f 06 	sts	0x062F, r24
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <OSTaskStat+0x9a>
    12ea:	10 92 2f 06 	sts	0x062F, r1
    12ee:	0e 94 31 05 	call	0xa62	; 0xa62 <OSTaskStatHook>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <OSTimeDly>
    12fa:	b9 cf       	rjmp	.-142    	; 0x126e <OSTaskStat+0x1a>

000012fc <__subsf3>:
    12fc:	50 58       	subi	r21, 0x80	; 128

000012fe <__addsf3>:
    12fe:	bb 27       	eor	r27, r27
    1300:	aa 27       	eor	r26, r26
    1302:	0e d0       	rcall	.+28     	; 0x1320 <__addsf3x>
    1304:	0b c1       	rjmp	.+534    	; 0x151c <__fp_round>
    1306:	fc d0       	rcall	.+504    	; 0x1500 <__fp_pscA>
    1308:	30 f0       	brcs	.+12     	; 0x1316 <__addsf3+0x18>
    130a:	01 d1       	rcall	.+514    	; 0x150e <__fp_pscB>
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__addsf3+0x18>
    130e:	31 f4       	brne	.+12     	; 0x131c <__addsf3+0x1e>
    1310:	9f 3f       	cpi	r25, 0xFF	; 255
    1312:	11 f4       	brne	.+4      	; 0x1318 <__addsf3+0x1a>
    1314:	1e f4       	brtc	.+6      	; 0x131c <__addsf3+0x1e>
    1316:	f1 c0       	rjmp	.+482    	; 0x14fa <__fp_nan>
    1318:	0e f4       	brtc	.+2      	; 0x131c <__addsf3+0x1e>
    131a:	e0 95       	com	r30
    131c:	e7 fb       	bst	r30, 7
    131e:	e7 c0       	rjmp	.+462    	; 0x14ee <__fp_inf>

00001320 <__addsf3x>:
    1320:	e9 2f       	mov	r30, r25
    1322:	0d d1       	rcall	.+538    	; 0x153e <__fp_split3>
    1324:	80 f3       	brcs	.-32     	; 0x1306 <__addsf3+0x8>
    1326:	ba 17       	cp	r27, r26
    1328:	62 07       	cpc	r22, r18
    132a:	73 07       	cpc	r23, r19
    132c:	84 07       	cpc	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	18 f0       	brcs	.+6      	; 0x1338 <__addsf3x+0x18>
    1332:	71 f4       	brne	.+28     	; 0x1350 <__addsf3x+0x30>
    1334:	9e f5       	brtc	.+102    	; 0x139c <__addsf3x+0x7c>
    1336:	25 c1       	rjmp	.+586    	; 0x1582 <__fp_zero>
    1338:	0e f4       	brtc	.+2      	; 0x133c <__addsf3x+0x1c>
    133a:	e0 95       	com	r30
    133c:	0b 2e       	mov	r0, r27
    133e:	ba 2f       	mov	r27, r26
    1340:	a0 2d       	mov	r26, r0
    1342:	0b 01       	movw	r0, r22
    1344:	b9 01       	movw	r22, r18
    1346:	90 01       	movw	r18, r0
    1348:	0c 01       	movw	r0, r24
    134a:	ca 01       	movw	r24, r20
    134c:	a0 01       	movw	r20, r0
    134e:	11 24       	eor	r1, r1
    1350:	ff 27       	eor	r31, r31
    1352:	59 1b       	sub	r21, r25
    1354:	99 f0       	breq	.+38     	; 0x137c <__addsf3x+0x5c>
    1356:	59 3f       	cpi	r21, 0xF9	; 249
    1358:	50 f4       	brcc	.+20     	; 0x136e <__addsf3x+0x4e>
    135a:	50 3e       	cpi	r21, 0xE0	; 224
    135c:	68 f1       	brcs	.+90     	; 0x13b8 <__addsf3x+0x98>
    135e:	1a 16       	cp	r1, r26
    1360:	f0 40       	sbci	r31, 0x00	; 0
    1362:	a2 2f       	mov	r26, r18
    1364:	23 2f       	mov	r18, r19
    1366:	34 2f       	mov	r19, r20
    1368:	44 27       	eor	r20, r20
    136a:	58 5f       	subi	r21, 0xF8	; 248
    136c:	f3 cf       	rjmp	.-26     	; 0x1354 <__addsf3x+0x34>
    136e:	46 95       	lsr	r20
    1370:	37 95       	ror	r19
    1372:	27 95       	ror	r18
    1374:	a7 95       	ror	r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	53 95       	inc	r21
    137a:	c9 f7       	brne	.-14     	; 0x136e <__addsf3x+0x4e>
    137c:	7e f4       	brtc	.+30     	; 0x139c <__addsf3x+0x7c>
    137e:	1f 16       	cp	r1, r31
    1380:	ba 0b       	sbc	r27, r26
    1382:	62 0b       	sbc	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	84 0b       	sbc	r24, r20
    1388:	ba f0       	brmi	.+46     	; 0x13b8 <__addsf3x+0x98>
    138a:	91 50       	subi	r25, 0x01	; 1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <__addsf3x+0x96>
    138e:	ff 0f       	add	r31, r31
    1390:	bb 1f       	adc	r27, r27
    1392:	66 1f       	adc	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	c2 f7       	brpl	.-16     	; 0x138a <__addsf3x+0x6a>
    139a:	0e c0       	rjmp	.+28     	; 0x13b8 <__addsf3x+0x98>
    139c:	ba 0f       	add	r27, r26
    139e:	62 1f       	adc	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	48 f4       	brcc	.+18     	; 0x13b8 <__addsf3x+0x98>
    13a6:	87 95       	ror	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	f7 95       	ror	r31
    13b0:	9e 3f       	cpi	r25, 0xFE	; 254
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <__addsf3x+0x96>
    13b4:	b3 cf       	rjmp	.-154    	; 0x131c <__addsf3+0x1e>
    13b6:	93 95       	inc	r25
    13b8:	88 0f       	add	r24, r24
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__addsf3x+0x9e>
    13bc:	99 27       	eor	r25, r25
    13be:	ee 0f       	add	r30, r30
    13c0:	97 95       	ror	r25
    13c2:	87 95       	ror	r24
    13c4:	08 95       	ret

000013c6 <__divsf3>:
    13c6:	0c d0       	rcall	.+24     	; 0x13e0 <__divsf3x>
    13c8:	a9 c0       	rjmp	.+338    	; 0x151c <__fp_round>
    13ca:	a1 d0       	rcall	.+322    	; 0x150e <__fp_pscB>
    13cc:	40 f0       	brcs	.+16     	; 0x13de <__divsf3+0x18>
    13ce:	98 d0       	rcall	.+304    	; 0x1500 <__fp_pscA>
    13d0:	30 f0       	brcs	.+12     	; 0x13de <__divsf3+0x18>
    13d2:	21 f4       	brne	.+8      	; 0x13dc <__divsf3+0x16>
    13d4:	5f 3f       	cpi	r21, 0xFF	; 255
    13d6:	19 f0       	breq	.+6      	; 0x13de <__divsf3+0x18>
    13d8:	8a c0       	rjmp	.+276    	; 0x14ee <__fp_inf>
    13da:	51 11       	cpse	r21, r1
    13dc:	d3 c0       	rjmp	.+422    	; 0x1584 <__fp_szero>
    13de:	8d c0       	rjmp	.+282    	; 0x14fa <__fp_nan>

000013e0 <__divsf3x>:
    13e0:	ae d0       	rcall	.+348    	; 0x153e <__fp_split3>
    13e2:	98 f3       	brcs	.-26     	; 0x13ca <__divsf3+0x4>

000013e4 <__divsf3_pse>:
    13e4:	99 23       	and	r25, r25
    13e6:	c9 f3       	breq	.-14     	; 0x13da <__divsf3+0x14>
    13e8:	55 23       	and	r21, r21
    13ea:	b1 f3       	breq	.-20     	; 0x13d8 <__divsf3+0x12>
    13ec:	95 1b       	sub	r25, r21
    13ee:	55 0b       	sbc	r21, r21
    13f0:	bb 27       	eor	r27, r27
    13f2:	aa 27       	eor	r26, r26
    13f4:	62 17       	cp	r22, r18
    13f6:	73 07       	cpc	r23, r19
    13f8:	84 07       	cpc	r24, r20
    13fa:	38 f0       	brcs	.+14     	; 0x140a <__divsf3_pse+0x26>
    13fc:	9f 5f       	subi	r25, 0xFF	; 255
    13fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	44 1f       	adc	r20, r20
    1406:	aa 1f       	adc	r26, r26
    1408:	a9 f3       	breq	.-22     	; 0x13f4 <__divsf3_pse+0x10>
    140a:	33 d0       	rcall	.+102    	; 0x1472 <__divsf3_pse+0x8e>
    140c:	0e 2e       	mov	r0, r30
    140e:	3a f0       	brmi	.+14     	; 0x141e <__divsf3_pse+0x3a>
    1410:	e0 e8       	ldi	r30, 0x80	; 128
    1412:	30 d0       	rcall	.+96     	; 0x1474 <__divsf3_pse+0x90>
    1414:	91 50       	subi	r25, 0x01	; 1
    1416:	50 40       	sbci	r21, 0x00	; 0
    1418:	e6 95       	lsr	r30
    141a:	00 1c       	adc	r0, r0
    141c:	ca f7       	brpl	.-14     	; 0x1410 <__divsf3_pse+0x2c>
    141e:	29 d0       	rcall	.+82     	; 0x1472 <__divsf3_pse+0x8e>
    1420:	fe 2f       	mov	r31, r30
    1422:	27 d0       	rcall	.+78     	; 0x1472 <__divsf3_pse+0x8e>
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	bb 1f       	adc	r27, r27
    142c:	26 17       	cp	r18, r22
    142e:	37 07       	cpc	r19, r23
    1430:	48 07       	cpc	r20, r24
    1432:	ab 07       	cpc	r26, r27
    1434:	b0 e8       	ldi	r27, 0x80	; 128
    1436:	09 f0       	breq	.+2      	; 0x143a <__divsf3_pse+0x56>
    1438:	bb 0b       	sbc	r27, r27
    143a:	80 2d       	mov	r24, r0
    143c:	bf 01       	movw	r22, r30
    143e:	ff 27       	eor	r31, r31
    1440:	93 58       	subi	r25, 0x83	; 131
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	2a f0       	brmi	.+10     	; 0x1450 <__divsf3_pse+0x6c>
    1446:	9e 3f       	cpi	r25, 0xFE	; 254
    1448:	51 05       	cpc	r21, r1
    144a:	68 f0       	brcs	.+26     	; 0x1466 <__divsf3_pse+0x82>
    144c:	50 c0       	rjmp	.+160    	; 0x14ee <__fp_inf>
    144e:	9a c0       	rjmp	.+308    	; 0x1584 <__fp_szero>
    1450:	5f 3f       	cpi	r21, 0xFF	; 255
    1452:	ec f3       	brlt	.-6      	; 0x144e <__divsf3_pse+0x6a>
    1454:	98 3e       	cpi	r25, 0xE8	; 232
    1456:	dc f3       	brlt	.-10     	; 0x144e <__divsf3_pse+0x6a>
    1458:	86 95       	lsr	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	b7 95       	ror	r27
    1460:	f7 95       	ror	r31
    1462:	9f 5f       	subi	r25, 0xFF	; 255
    1464:	c9 f7       	brne	.-14     	; 0x1458 <__divsf3_pse+0x74>
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret
    1472:	e1 e0       	ldi	r30, 0x01	; 1
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	88 1f       	adc	r24, r24
    147a:	bb 1f       	adc	r27, r27
    147c:	62 17       	cp	r22, r18
    147e:	73 07       	cpc	r23, r19
    1480:	84 07       	cpc	r24, r20
    1482:	ba 07       	cpc	r27, r26
    1484:	20 f0       	brcs	.+8      	; 0x148e <__divsf3_pse+0xaa>
    1486:	62 1b       	sub	r22, r18
    1488:	73 0b       	sbc	r23, r19
    148a:	84 0b       	sbc	r24, r20
    148c:	ba 0b       	sbc	r27, r26
    148e:	ee 1f       	adc	r30, r30
    1490:	88 f7       	brcc	.-30     	; 0x1474 <__divsf3_pse+0x90>
    1492:	e0 95       	com	r30
    1494:	08 95       	ret

00001496 <__fixunssfsi>:
    1496:	5b d0       	rcall	.+182    	; 0x154e <__fp_splitA>
    1498:	88 f0       	brcs	.+34     	; 0x14bc <__fixunssfsi+0x26>
    149a:	9f 57       	subi	r25, 0x7F	; 127
    149c:	90 f0       	brcs	.+36     	; 0x14c2 <__fixunssfsi+0x2c>
    149e:	b9 2f       	mov	r27, r25
    14a0:	99 27       	eor	r25, r25
    14a2:	b7 51       	subi	r27, 0x17	; 23
    14a4:	a0 f0       	brcs	.+40     	; 0x14ce <__fixunssfsi+0x38>
    14a6:	d1 f0       	breq	.+52     	; 0x14dc <__fixunssfsi+0x46>
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	1a f0       	brmi	.+6      	; 0x14b8 <__fixunssfsi+0x22>
    14b2:	ba 95       	dec	r27
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__fixunssfsi+0x12>
    14b6:	12 c0       	rjmp	.+36     	; 0x14dc <__fixunssfsi+0x46>
    14b8:	b1 30       	cpi	r27, 0x01	; 1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <__fixunssfsi+0x46>
    14bc:	62 d0       	rcall	.+196    	; 0x1582 <__fp_zero>
    14be:	b1 e0       	ldi	r27, 0x01	; 1
    14c0:	08 95       	ret
    14c2:	5f c0       	rjmp	.+190    	; 0x1582 <__fp_zero>
    14c4:	67 2f       	mov	r22, r23
    14c6:	78 2f       	mov	r23, r24
    14c8:	88 27       	eor	r24, r24
    14ca:	b8 5f       	subi	r27, 0xF8	; 248
    14cc:	39 f0       	breq	.+14     	; 0x14dc <__fixunssfsi+0x46>
    14ce:	b9 3f       	cpi	r27, 0xF9	; 249
    14d0:	cc f3       	brlt	.-14     	; 0x14c4 <__fixunssfsi+0x2e>
    14d2:	86 95       	lsr	r24
    14d4:	77 95       	ror	r23
    14d6:	67 95       	ror	r22
    14d8:	b3 95       	inc	r27
    14da:	d9 f7       	brne	.-10     	; 0x14d2 <__fixunssfsi+0x3c>
    14dc:	3e f4       	brtc	.+14     	; 0x14ec <__fixunssfsi+0x56>
    14de:	90 95       	com	r25
    14e0:	80 95       	com	r24
    14e2:	70 95       	com	r23
    14e4:	61 95       	neg	r22
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	08 95       	ret

000014ee <__fp_inf>:
    14ee:	97 f9       	bld	r25, 7
    14f0:	9f 67       	ori	r25, 0x7F	; 127
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	08 95       	ret

000014fa <__fp_nan>:
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	80 ec       	ldi	r24, 0xC0	; 192
    14fe:	08 95       	ret

00001500 <__fp_pscA>:
    1500:	00 24       	eor	r0, r0
    1502:	0a 94       	dec	r0
    1504:	16 16       	cp	r1, r22
    1506:	17 06       	cpc	r1, r23
    1508:	18 06       	cpc	r1, r24
    150a:	09 06       	cpc	r0, r25
    150c:	08 95       	ret

0000150e <__fp_pscB>:
    150e:	00 24       	eor	r0, r0
    1510:	0a 94       	dec	r0
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	14 06       	cpc	r1, r20
    1518:	05 06       	cpc	r0, r21
    151a:	08 95       	ret

0000151c <__fp_round>:
    151c:	09 2e       	mov	r0, r25
    151e:	03 94       	inc	r0
    1520:	00 0c       	add	r0, r0
    1522:	11 f4       	brne	.+4      	; 0x1528 <__fp_round+0xc>
    1524:	88 23       	and	r24, r24
    1526:	52 f0       	brmi	.+20     	; 0x153c <__fp_round+0x20>
    1528:	bb 0f       	add	r27, r27
    152a:	40 f4       	brcc	.+16     	; 0x153c <__fp_round+0x20>
    152c:	bf 2b       	or	r27, r31
    152e:	11 f4       	brne	.+4      	; 0x1534 <__fp_round+0x18>
    1530:	60 ff       	sbrs	r22, 0
    1532:	04 c0       	rjmp	.+8      	; 0x153c <__fp_round+0x20>
    1534:	6f 5f       	subi	r22, 0xFF	; 255
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	08 95       	ret

0000153e <__fp_split3>:
    153e:	57 fd       	sbrc	r21, 7
    1540:	90 58       	subi	r25, 0x80	; 128
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	59 f0       	breq	.+22     	; 0x155e <__fp_splitA+0x10>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	71 f0       	breq	.+28     	; 0x1568 <__fp_splitA+0x1a>
    154c:	47 95       	ror	r20

0000154e <__fp_splitA>:
    154e:	88 0f       	add	r24, r24
    1550:	97 fb       	bst	r25, 7
    1552:	99 1f       	adc	r25, r25
    1554:	61 f0       	breq	.+24     	; 0x156e <__fp_splitA+0x20>
    1556:	9f 3f       	cpi	r25, 0xFF	; 255
    1558:	79 f0       	breq	.+30     	; 0x1578 <__fp_splitA+0x2a>
    155a:	87 95       	ror	r24
    155c:	08 95       	ret
    155e:	12 16       	cp	r1, r18
    1560:	13 06       	cpc	r1, r19
    1562:	14 06       	cpc	r1, r20
    1564:	55 1f       	adc	r21, r21
    1566:	f2 cf       	rjmp	.-28     	; 0x154c <__fp_split3+0xe>
    1568:	46 95       	lsr	r20
    156a:	f1 df       	rcall	.-30     	; 0x154e <__fp_splitA>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <__fp_splitA+0x30>
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	18 06       	cpc	r1, r24
    1574:	99 1f       	adc	r25, r25
    1576:	f1 cf       	rjmp	.-30     	; 0x155a <__fp_splitA+0xc>
    1578:	86 95       	lsr	r24
    157a:	71 05       	cpc	r23, r1
    157c:	61 05       	cpc	r22, r1
    157e:	08 94       	sec
    1580:	08 95       	ret

00001582 <__fp_zero>:
    1582:	e8 94       	clt

00001584 <__fp_szero>:
    1584:	bb 27       	eor	r27, r27
    1586:	66 27       	eor	r22, r22
    1588:	77 27       	eor	r23, r23
    158a:	cb 01       	movw	r24, r22
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret

00001590 <__mulsf3>:
    1590:	0b d0       	rcall	.+22     	; 0x15a8 <__mulsf3x>
    1592:	c4 cf       	rjmp	.-120    	; 0x151c <__fp_round>
    1594:	b5 df       	rcall	.-150    	; 0x1500 <__fp_pscA>
    1596:	28 f0       	brcs	.+10     	; 0x15a2 <__mulsf3+0x12>
    1598:	ba df       	rcall	.-140    	; 0x150e <__fp_pscB>
    159a:	18 f0       	brcs	.+6      	; 0x15a2 <__mulsf3+0x12>
    159c:	95 23       	and	r25, r21
    159e:	09 f0       	breq	.+2      	; 0x15a2 <__mulsf3+0x12>
    15a0:	a6 cf       	rjmp	.-180    	; 0x14ee <__fp_inf>
    15a2:	ab cf       	rjmp	.-170    	; 0x14fa <__fp_nan>
    15a4:	11 24       	eor	r1, r1
    15a6:	ee cf       	rjmp	.-36     	; 0x1584 <__fp_szero>

000015a8 <__mulsf3x>:
    15a8:	ca df       	rcall	.-108    	; 0x153e <__fp_split3>
    15aa:	a0 f3       	brcs	.-24     	; 0x1594 <__mulsf3+0x4>

000015ac <__mulsf3_pse>:
    15ac:	95 9f       	mul	r25, r21
    15ae:	d1 f3       	breq	.-12     	; 0x15a4 <__mulsf3+0x14>
    15b0:	95 0f       	add	r25, r21
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	55 1f       	adc	r21, r21
    15b6:	62 9f       	mul	r22, r18
    15b8:	f0 01       	movw	r30, r0
    15ba:	72 9f       	mul	r23, r18
    15bc:	bb 27       	eor	r27, r27
    15be:	f0 0d       	add	r31, r0
    15c0:	b1 1d       	adc	r27, r1
    15c2:	63 9f       	mul	r22, r19
    15c4:	aa 27       	eor	r26, r26
    15c6:	f0 0d       	add	r31, r0
    15c8:	b1 1d       	adc	r27, r1
    15ca:	aa 1f       	adc	r26, r26
    15cc:	64 9f       	mul	r22, r20
    15ce:	66 27       	eor	r22, r22
    15d0:	b0 0d       	add	r27, r0
    15d2:	a1 1d       	adc	r26, r1
    15d4:	66 1f       	adc	r22, r22
    15d6:	82 9f       	mul	r24, r18
    15d8:	22 27       	eor	r18, r18
    15da:	b0 0d       	add	r27, r0
    15dc:	a1 1d       	adc	r26, r1
    15de:	62 1f       	adc	r22, r18
    15e0:	73 9f       	mul	r23, r19
    15e2:	b0 0d       	add	r27, r0
    15e4:	a1 1d       	adc	r26, r1
    15e6:	62 1f       	adc	r22, r18
    15e8:	83 9f       	mul	r24, r19
    15ea:	a0 0d       	add	r26, r0
    15ec:	61 1d       	adc	r22, r1
    15ee:	22 1f       	adc	r18, r18
    15f0:	74 9f       	mul	r23, r20
    15f2:	33 27       	eor	r19, r19
    15f4:	a0 0d       	add	r26, r0
    15f6:	61 1d       	adc	r22, r1
    15f8:	23 1f       	adc	r18, r19
    15fa:	84 9f       	mul	r24, r20
    15fc:	60 0d       	add	r22, r0
    15fe:	21 1d       	adc	r18, r1
    1600:	82 2f       	mov	r24, r18
    1602:	76 2f       	mov	r23, r22
    1604:	6a 2f       	mov	r22, r26
    1606:	11 24       	eor	r1, r1
    1608:	9f 57       	subi	r25, 0x7F	; 127
    160a:	50 40       	sbci	r21, 0x00	; 0
    160c:	8a f0       	brmi	.+34     	; 0x1630 <__mulsf3_pse+0x84>
    160e:	e1 f0       	breq	.+56     	; 0x1648 <__mulsf3_pse+0x9c>
    1610:	88 23       	and	r24, r24
    1612:	4a f0       	brmi	.+18     	; 0x1626 <__mulsf3_pse+0x7a>
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	bb 1f       	adc	r27, r27
    161a:	66 1f       	adc	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	91 50       	subi	r25, 0x01	; 1
    1622:	50 40       	sbci	r21, 0x00	; 0
    1624:	a9 f7       	brne	.-22     	; 0x1610 <__mulsf3_pse+0x64>
    1626:	9e 3f       	cpi	r25, 0xFE	; 254
    1628:	51 05       	cpc	r21, r1
    162a:	70 f0       	brcs	.+28     	; 0x1648 <__mulsf3_pse+0x9c>
    162c:	60 cf       	rjmp	.-320    	; 0x14ee <__fp_inf>
    162e:	aa cf       	rjmp	.-172    	; 0x1584 <__fp_szero>
    1630:	5f 3f       	cpi	r21, 0xFF	; 255
    1632:	ec f3       	brlt	.-6      	; 0x162e <__mulsf3_pse+0x82>
    1634:	98 3e       	cpi	r25, 0xE8	; 232
    1636:	dc f3       	brlt	.-10     	; 0x162e <__mulsf3_pse+0x82>
    1638:	86 95       	lsr	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	b7 95       	ror	r27
    1640:	f7 95       	ror	r31
    1642:	e7 95       	ror	r30
    1644:	9f 5f       	subi	r25, 0xFF	; 255
    1646:	c1 f7       	brne	.-16     	; 0x1638 <__mulsf3_pse+0x8c>
    1648:	fe 2b       	or	r31, r30
    164a:	88 0f       	add	r24, r24
    164c:	91 1d       	adc	r25, r1
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret

00001656 <__divmodhi4>:
    1656:	97 fb       	bst	r25, 7
    1658:	07 2e       	mov	r0, r23
    165a:	16 f4       	brtc	.+4      	; 0x1660 <__divmodhi4+0xa>
    165c:	00 94       	com	r0
    165e:	07 d0       	rcall	.+14     	; 0x166e <__divmodhi4_neg1>
    1660:	77 fd       	sbrc	r23, 7
    1662:	09 d0       	rcall	.+18     	; 0x1676 <__divmodhi4_neg2>
    1664:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <__udivmodhi4>
    1668:	07 fc       	sbrc	r0, 7
    166a:	05 d0       	rcall	.+10     	; 0x1676 <__divmodhi4_neg2>
    166c:	3e f4       	brtc	.+14     	; 0x167c <__divmodhi4_exit>

0000166e <__divmodhi4_neg1>:
    166e:	90 95       	com	r25
    1670:	81 95       	neg	r24
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	08 95       	ret

00001676 <__divmodhi4_neg2>:
    1676:	70 95       	com	r23
    1678:	61 95       	neg	r22
    167a:	7f 4f       	sbci	r23, 0xFF	; 255

0000167c <__divmodhi4_exit>:
    167c:	08 95       	ret

0000167e <__udivmodsi4>:
    167e:	a1 e2       	ldi	r26, 0x21	; 33
    1680:	1a 2e       	mov	r1, r26
    1682:	aa 1b       	sub	r26, r26
    1684:	bb 1b       	sub	r27, r27
    1686:	fd 01       	movw	r30, r26
    1688:	0d c0       	rjmp	.+26     	; 0x16a4 <__udivmodsi4_ep>

0000168a <__udivmodsi4_loop>:
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	ee 1f       	adc	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	a2 17       	cp	r26, r18
    1694:	b3 07       	cpc	r27, r19
    1696:	e4 07       	cpc	r30, r20
    1698:	f5 07       	cpc	r31, r21
    169a:	20 f0       	brcs	.+8      	; 0x16a4 <__udivmodsi4_ep>
    169c:	a2 1b       	sub	r26, r18
    169e:	b3 0b       	sbc	r27, r19
    16a0:	e4 0b       	sbc	r30, r20
    16a2:	f5 0b       	sbc	r31, r21

000016a4 <__udivmodsi4_ep>:
    16a4:	66 1f       	adc	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	1a 94       	dec	r1
    16ae:	69 f7       	brne	.-38     	; 0x168a <__udivmodsi4_loop>
    16b0:	60 95       	com	r22
    16b2:	70 95       	com	r23
    16b4:	80 95       	com	r24
    16b6:	90 95       	com	r25
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	bd 01       	movw	r22, r26
    16be:	cf 01       	movw	r24, r30
    16c0:	08 95       	ret

000016c2 <__umulhisi3>:
    16c2:	a2 9f       	mul	r26, r18
    16c4:	b0 01       	movw	r22, r0
    16c6:	b3 9f       	mul	r27, r19
    16c8:	c0 01       	movw	r24, r0
    16ca:	a3 9f       	mul	r26, r19
    16cc:	70 0d       	add	r23, r0
    16ce:	81 1d       	adc	r24, r1
    16d0:	11 24       	eor	r1, r1
    16d2:	91 1d       	adc	r25, r1
    16d4:	b2 9f       	mul	r27, r18
    16d6:	70 0d       	add	r23, r0
    16d8:	81 1d       	adc	r24, r1
    16da:	11 24       	eor	r1, r1
    16dc:	91 1d       	adc	r25, r1
    16de:	08 95       	ret

000016e0 <__muluhisi3>:
    16e0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__umulhisi3>
    16e4:	a5 9f       	mul	r26, r21
    16e6:	90 0d       	add	r25, r0
    16e8:	b4 9f       	mul	r27, r20
    16ea:	90 0d       	add	r25, r0
    16ec:	a4 9f       	mul	r26, r20
    16ee:	80 0d       	add	r24, r0
    16f0:	91 1d       	adc	r25, r1
    16f2:	11 24       	eor	r1, r1
    16f4:	08 95       	ret

000016f6 <__udivmodhi4>:
    16f6:	aa 1b       	sub	r26, r26
    16f8:	bb 1b       	sub	r27, r27
    16fa:	51 e1       	ldi	r21, 0x11	; 17
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <__udivmodhi4_ep>

000016fe <__udivmodhi4_loop>:
    16fe:	aa 1f       	adc	r26, r26
    1700:	bb 1f       	adc	r27, r27
    1702:	a6 17       	cp	r26, r22
    1704:	b7 07       	cpc	r27, r23
    1706:	10 f0       	brcs	.+4      	; 0x170c <__udivmodhi4_ep>
    1708:	a6 1b       	sub	r26, r22
    170a:	b7 0b       	sbc	r27, r23

0000170c <__udivmodhi4_ep>:
    170c:	88 1f       	adc	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	5a 95       	dec	r21
    1712:	a9 f7       	brne	.-22     	; 0x16fe <__udivmodhi4_loop>
    1714:	80 95       	com	r24
    1716:	90 95       	com	r25
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	08 95       	ret

0000171e <strcpy>:
    171e:	fb 01       	movw	r30, r22
    1720:	dc 01       	movw	r26, r24
    1722:	01 90       	ld	r0, Z+
    1724:	0d 92       	st	X+, r0
    1726:	00 20       	and	r0, r0
    1728:	e1 f7       	brne	.-8      	; 0x1722 <strcpy+0x4>
    172a:	08 95       	ret

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
