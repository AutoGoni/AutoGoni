
Lab2_Serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  000016f8  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f8  0080028c  0080028c  00001918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001948  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f62  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076d  00000000  00000000  00003aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093d  00000000  00000000  00004217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000044c  00000000  00000000  00004b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000856  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000168f  00000000  00000000  000057f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00006e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
       4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
       c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      40:	0c 94 93 01 	jmp	0x326	; 0x326 <OSTickISR>
      44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <SerTxISR>
      54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
      64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <RotaryUnMapTbl>:
      68:	ff 38 28 37 18 ff 27 34 08 39 ff ff 17 ff 24 0d     .8(7..'4.9....$.
      78:	78 ff 29 36 ff ff ff 35 07 ff ff ff 14 13 7d 12     x.)6...5......}.
      88:	68 69 ff ff 19 6a 26 ff ff 3a ff ff ff ff 25 0e     hi...j&..:....%.
      98:	77 76 ff ff ff 6b ff ff 04 ff 03 ff 6d 6c 02 01     wv...k......ml..
      a8:	58 ff 59 ff ff ff ff 33 09 0a 5a ff 16 0b ff 0c     X.Y....3..Z.....
      b8:	ff ff 2a 2b ff ff ff ff ff ff ff ff 15 ff 7e 7f     ..*+..........~.
      c8:	67 ff 66 ff ff ff ff ff ff ff 5b ff ff ff ff ff     g.f.......[.....
      d8:	74 75 ff ff 73 ff ff ff 5d 5e 5c ff 72 5f 71 00     tu..s...]^\.r_q.
      e8:	48 47 ff 44 49 ff ff 1d ff 46 ff 45 ff ff 23 22     HG.DI....F.E..#"
      f8:	79 ff 7a ff 4a ff ff 1e 06 ff 7b ff ff ff 7c 11     y.z.J.....{...|.
     108:	ff ff ff 43 1a ff 1b 1c ff 3b ff ff ff ff ff 0f     ...C.....;......
     118:	ff ff ff ff ff ff ff ff 05 ff ff ff 6e ff 6f 10     ............n.o.
     128:	57 54 ff 2d 56 55 ff 32 ff ff ff 2e ff ff ff 21     WT.-VU.2.......!
     138:	ff 53 ff 2c 4b ff ff 1f ff ff ff ff ff ff ff 20     .S.,K.......... 
     148:	64 3d 65 42 ff 3e ff 31 63 3c ff 2f ff ff ff 30     d=eB.>.1c<./...0
     158:	4d 52 4e 41 4c 3f ff 40 62 51 4f 50 61 60 70 ff     MRNAL?.@bQOPa`p.

00000168 <__ctors_end>:
     168:	11 24       	eor	r1, r1
     16a:	1f be       	out	0x3f, r1	; 63
     16c:	cf ef       	ldi	r28, 0xFF	; 255
     16e:	d8 e0       	ldi	r29, 0x08	; 8
     170:	de bf       	out	0x3e, r29	; 62
     172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
     174:	12 e0       	ldi	r17, 0x02	; 2
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b1 e0       	ldi	r27, 0x01	; 1
     17a:	e8 ef       	ldi	r30, 0xF8	; 248
     17c:	f6 e1       	ldi	r31, 0x16	; 22
     17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
     180:	05 90       	lpm	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	ac 38       	cpi	r26, 0x8C	; 140
     186:	b1 07       	cpc	r27, r17
     188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
     18a:	27 e0       	ldi	r18, 0x07	; 7
     18c:	ac e8       	ldi	r26, 0x8C	; 140
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
     192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
     194:	a4 38       	cpi	r26, 0x84	; 132
     196:	b2 07       	cpc	r27, r18
     198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
     19a:	0e 94 67 04 	call	0x8ce	; 0x8ce <main>
     19e:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <OSStartHighRdy>:
     1a6:	00 91 4a 06 	lds	r16, 0x064A
     1aa:	03 95       	inc	r16
     1ac:	00 93 4a 06 	sts	0x064A, r16
     1b0:	e0 91 5f 06 	lds	r30, 0x065F
     1b4:	f0 91 60 06 	lds	r31, 0x0660
     1b8:	c1 91       	ld	r28, Z+
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	d1 91       	ld	r29, Z+
     1be:	de bf       	out	0x3e, r29	; 62
     1c0:	0f 91       	pop	r16
     1c2:	0f bf       	out	0x3f, r16	; 63
     1c4:	ff 91       	pop	r31
     1c6:	ef 91       	pop	r30
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	ff 90       	pop	r15
     1e6:	ef 90       	pop	r14
     1e8:	df 90       	pop	r13
     1ea:	cf 90       	pop	r12
     1ec:	bf 90       	pop	r11
     1ee:	af 90       	pop	r10
     1f0:	9f 90       	pop	r9
     1f2:	8f 90       	pop	r8
     1f4:	7f 90       	pop	r7
     1f6:	6f 90       	pop	r6
     1f8:	5f 90       	pop	r5
     1fa:	4f 90       	pop	r4
     1fc:	3f 90       	pop	r3
     1fe:	2f 90       	pop	r2
     200:	1f 90       	pop	r1
     202:	0f 90       	pop	r0
     204:	08 95       	ret

00000206 <OSCtxSw>:
     206:	0f 92       	push	r0
     208:	1f 92       	push	r1
     20a:	2f 92       	push	r2
     20c:	3f 92       	push	r3
     20e:	4f 92       	push	r4
     210:	5f 92       	push	r5
     212:	6f 92       	push	r6
     214:	7f 92       	push	r7
     216:	8f 92       	push	r8
     218:	9f 92       	push	r9
     21a:	af 92       	push	r10
     21c:	bf 92       	push	r11
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	bf 93       	push	r27
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
     246:	0f b7       	in	r16, 0x3f	; 63
     248:	0f 93       	push	r16
     24a:	e0 91 6d 06 	lds	r30, 0x066D
     24e:	f0 91 6e 06 	lds	r31, 0x066E
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	c1 93       	st	Z+, r28
     256:	de b7       	in	r29, 0x3e	; 62
     258:	d1 93       	st	Z+, r29
     25a:	00 91 4f 06 	lds	r16, 0x064F
     25e:	00 93 50 06 	sts	0x0650, r16
     262:	e0 91 5f 06 	lds	r30, 0x065F
     266:	f0 91 60 06 	lds	r31, 0x0660
     26a:	e0 93 6d 06 	sts	0x066D, r30
     26e:	f0 93 6e 06 	sts	0x066E, r31
     272:	c1 91       	ld	r28, Z+
     274:	cd bf       	out	0x3d, r28	; 61
     276:	d1 91       	ld	r29, Z+
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f 91       	pop	r16
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	ff 91       	pop	r31
     280:	ef 91       	pop	r30
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	bf 91       	pop	r27
     288:	af 91       	pop	r26
     28a:	9f 91       	pop	r25
     28c:	8f 91       	pop	r24
     28e:	7f 91       	pop	r23
     290:	6f 91       	pop	r22
     292:	5f 91       	pop	r21
     294:	4f 91       	pop	r20
     296:	3f 91       	pop	r19
     298:	2f 91       	pop	r18
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	bf 90       	pop	r11
     2a8:	af 90       	pop	r10
     2aa:	9f 90       	pop	r9
     2ac:	8f 90       	pop	r8
     2ae:	7f 90       	pop	r7
     2b0:	6f 90       	pop	r6
     2b2:	5f 90       	pop	r5
     2b4:	4f 90       	pop	r4
     2b6:	3f 90       	pop	r3
     2b8:	2f 90       	pop	r2
     2ba:	1f 90       	pop	r1
     2bc:	0f 90       	pop	r0
     2be:	08 95       	ret

000002c0 <OSIntCtxSw>:
     2c0:	00 91 4f 06 	lds	r16, 0x064F
     2c4:	00 93 50 06 	sts	0x0650, r16
     2c8:	e0 91 5f 06 	lds	r30, 0x065F
     2cc:	f0 91 60 06 	lds	r31, 0x0660
     2d0:	e0 93 6d 06 	sts	0x066D, r30
     2d4:	f0 93 6e 06 	sts	0x066E, r31
     2d8:	c1 91       	ld	r28, Z+
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	d1 91       	ld	r29, Z+
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f 91       	pop	r16
     2e2:	0f bf       	out	0x3f, r16	; 63
     2e4:	ff 91       	pop	r31
     2e6:	ef 91       	pop	r30
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	bf 91       	pop	r27
     2ee:	af 91       	pop	r26
     2f0:	9f 91       	pop	r25
     2f2:	8f 91       	pop	r24
     2f4:	7f 91       	pop	r23
     2f6:	6f 91       	pop	r22
     2f8:	5f 91       	pop	r21
     2fa:	4f 91       	pop	r20
     2fc:	3f 91       	pop	r19
     2fe:	2f 91       	pop	r18
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	1f 90       	pop	r1
     322:	0f 90       	pop	r0
     324:	08 95       	ret

00000326 <OSTickISR>:
     326:	0f 92       	push	r0
     328:	1f 92       	push	r1
     32a:	2f 92       	push	r2
     32c:	3f 92       	push	r3
     32e:	4f 92       	push	r4
     330:	5f 92       	push	r5
     332:	6f 92       	push	r6
     334:	7f 92       	push	r7
     336:	8f 92       	push	r8
     338:	9f 92       	push	r9
     33a:	af 92       	push	r10
     33c:	bf 92       	push	r11
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	2f 93       	push	r18
     34c:	3f 93       	push	r19
     34e:	4f 93       	push	r20
     350:	5f 93       	push	r21
     352:	6f 93       	push	r22
     354:	7f 93       	push	r23
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	0f b7       	in	r16, 0x3f	; 63
     368:	00 68       	ori	r16, 0x80	; 128
     36a:	0f 93       	push	r16
     36c:	00 91 6c 06 	lds	r16, 0x066C
     370:	03 95       	inc	r16
     372:	00 93 6c 06 	sts	0x066C, r16
     376:	01 30       	cpi	r16, 0x01	; 1
     378:	41 f4       	brne	.+16     	; 0x38a <_not_first_int>
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	e0 91 6d 06 	lds	r30, 0x066D
     382:	f0 91 6e 06 	lds	r31, 0x066E
     386:	c1 93       	st	Z+, r28
     388:	d1 93       	st	Z+, r29

0000038a <_not_first_int>:
     38a:	0d ee       	ldi	r16, 0xED	; 237
     38c:	06 bd       	out	0x26, r16	; 38
     38e:	78 94       	sei
     390:	0e 94 da 06 	call	0xdb4	; 0xdb4 <OSTimeTick>
     394:	00 00       	nop
     396:	0e 94 c4 05 	call	0xb88	; 0xb88 <OSIntExit>
     39a:	0f 91       	pop	r16
     39c:	0f bf       	out	0x3f, r16	; 63
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	9f 90       	pop	r9
     3cc:	8f 90       	pop	r8
     3ce:	7f 90       	pop	r7
     3d0:	6f 90       	pop	r6
     3d2:	5f 90       	pop	r5
     3d4:	4f 90       	pop	r4
     3d6:	3f 90       	pop	r3
     3d8:	2f 90       	pop	r2
     3da:	1f 90       	pop	r1
     3dc:	0f 90       	pop	r0
     3de:	08 95       	ret

000003e0 <WatchDogReset>:
     3e0:	a8 95       	wdr
     3e2:	08 95       	ret

000003e4 <SerTxISR>:
     3e4:	08 95       	ret

000003e6 <TaskStart>:
{
	char *sys_on_str = "\r\rAutoGoni ON     \r\n(c) 2016        ";			//helps see when the system turns on
	char *clear_screen = "\r\r                \r\n                ";
	pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
     3e6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <OSStatInit>

	OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
     3ea:	2a e0       	ldi	r18, 0x0A	; 10
     3ec:	48 ec       	ldi	r20, 0xC8	; 200
     3ee:	55 e0       	ldi	r21, 0x05	; 5
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	8c e2       	ldi	r24, 0x2C	; 44
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
     3fc:	24 e1       	ldi	r18, 0x14	; 20
     3fe:	48 e4       	ldi	r20, 0x48	; 72
     400:	55 e0       	ldi	r21, 0x05	; 5
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	85 ec       	ldi	r24, 0xC5	; 197
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     40e:	80 e9       	ldi	r24, 0x90	; 144
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	80 91 45 04 	lds	r24, 0x0445
     41e:	90 91 46 04 	lds	r25, 0x0446
     422:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
	OSTimeDly(2*OS_TICKS_PER_SEC);
     426:	80 e9       	ldi	r24, 0x90	; 144
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
	OSMboxPost(SerialTxMBox, (void*)clear_screen);
     42e:	65 e2       	ldi	r22, 0x25	; 37
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	80 91 45 04 	lds	r24, 0x0445
     436:	90 91 46 04 	lds	r25, 0x0446
     43a:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>

	OSTaskCreate(AngleOutputTask, (void *) 0, &AngleOutputTaskStk[TASK_STK_SIZE - 1], 15);
     43e:	2f e0       	ldi	r18, 0x0F	; 15
     440:	44 e4       	ldi	r20, 0x44	; 68
     442:	54 e0       	ldi	r21, 0x04	; 4
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	8e e3       	ldi	r24, 0x3E	; 62
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
     450:	2b e0       	ldi	r18, 0x0B	; 11
     452:	46 ec       	ldi	r20, 0xC6	; 198
     454:	54 e0       	ldi	r21, 0x04	; 4
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	8c eb       	ldi	r24, 0xBC	; 188
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
     462:	10 92 53 06 	sts	0x0653, r1
     466:	10 92 54 06 	sts	0x0654, r1
     46a:	10 92 55 06 	sts	0x0655, r1
     46e:	10 92 56 06 	sts	0x0656, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
     472:	88 ec       	ldi	r24, 0xC8	; 200
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
     47a:	f3 cf       	rjmp	.-26     	; 0x462 <TaskStart+0x7c>

0000047c <AngleOutputTask>:
 *                                                  AngleOutputTask
 *********************************************************************************************************
 */

void  AngleOutputTask (void *pdata)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	68 97       	sbiw	r28, 0x18	; 24
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
			CommRxBuff[digitCounter] = '\r';
			CommRxBuff[digitCounter + 1] = '\n';
			
			while (digitCounter >= 0)
			{
				CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     490:	0f 2e       	mov	r0, r31
     492:	fa e0       	ldi	r31, 0x0A	; 10
     494:	ef 2e       	mov	r14, r31
     496:	f1 2c       	mov	r15, r1
     498:	f0 2d       	mov	r31, r0
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     49a:	0f 2e       	mov	r0, r31
     49c:	fd e0       	ldi	r31, 0x0D	; 13
     49e:	cf 2e       	mov	r12, r31
     4a0:	f0 2d       	mov	r31, r0
			CommRxBuff[digitCounter + 1] = '\n';
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fa e0       	ldi	r31, 0x0A	; 10
     4a6:	df 2e       	mov	r13, r31
     4a8:	f0 2d       	mov	r31, r0
		}
		else
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
     4aa:	a1 2c       	mov	r10, r1
     4ac:	b1 2c       	mov	r11, r1
		//}
		*/
		
		if (rotaryInput == 0)
		{
			CommRxBuff[0] = '0';
     4ae:	0f 2e       	mov	r0, r31
     4b0:	f0 e3       	ldi	r31, 0x30	; 48
     4b2:	9f 2e       	mov	r9, r31
     4b4:	f0 2d       	mov	r31, r0
			//OSMboxPost(SerialTxMBox, (void *)&TextMessage);
		//}
		
		// LSB PC0 (pin A0) -> PC3 (pin A3)
		//	   PD4 (pin 4)  -> PD7 (pin 7)
		rotaryInput = (INT8U)((PINC & 0b00001111) | (PIND & 0b11110000));
     4b6:	86 b1       	in	r24, 0x06	; 6
     4b8:	e9 b1       	in	r30, 0x09	; 9
     4ba:	e0 7f       	andi	r30, 0xF0	; 240
     4bc:	8f 70       	andi	r24, 0x0F	; 15
     4be:	e8 2b       	or	r30, r24
		//rotaryInput = RotaryUnMapTbl[rotaryInput];
		rotaryInput = pgm_read_byte(&RotaryUnMapTbl[rotaryInput]); 
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e8 59       	subi	r30, 0x98	; 152
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	e4 91       	lpm	r30, Z
		//{
			//rotaryInput = 0;
		//}
		*/
		
		if (rotaryInput == 0)
     4c8:	e1 11       	cpse	r30, r1
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <AngleOutputTask+0x6a>
		{
			CommRxBuff[0] = '0';
     4cc:	99 82       	std	Y+1, r9	; 0x01
			CommRxBuff[1] = '\r';
     4ce:	ca 82       	std	Y+2, r12	; 0x02
			CommRxBuff[2] = '\n';
     4d0:	db 82       	std	Y+3, r13	; 0x03
			OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
     4d2:	be 01       	movw	r22, r28
     4d4:	6f 5f       	subi	r22, 0xFF	; 255
     4d6:	7f 4f       	sbci	r23, 0xFF	; 255
     4d8:	80 91 45 04 	lds	r24, 0x0445
     4dc:	90 91 46 04 	lds	r25, 0x0446
     4e0:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
     4e4:	39 c0       	rjmp	.+114    	; 0x558 <AngleOutputTask+0xdc>
		}
		else
		{
			tempInt = rotaryInput;
     4e6:	2e 2f       	mov	r18, r30
     4e8:	30 e0       	ldi	r19, 0x00	; 0
			
			digitCounter = 0;
			
			while(tempInt != 0)
     4ea:	21 15       	cp	r18, r1
     4ec:	31 05       	cpc	r19, r1
     4ee:	c9 f1       	breq	.+114    	; 0x562 <AngleOutputTask+0xe6>
			CommRxBuff[2] = '\n';
			OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
		}
		else
		{
			tempInt = rotaryInput;
     4f0:	c9 01       	movw	r24, r18
			
			digitCounter = 0;
     4f2:	0a 2d       	mov	r16, r10
     4f4:	1b 2d       	mov	r17, r11
			
			while(tempInt != 0)
			{
				digitCounter++;
     4f6:	f8 01       	movw	r30, r16
     4f8:	31 96       	adiw	r30, 0x01	; 1
				tempInt = tempInt / 10;
     4fa:	b7 01       	movw	r22, r14
     4fc:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     500:	cb 01       	movw	r24, r22
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
			
			while(tempInt != 0)
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	11 f0       	breq	.+4      	; 0x50a <AngleOutputTask+0x8e>
			{
				digitCounter++;
     506:	8f 01       	movw	r16, r30
     508:	f6 cf       	rjmp	.-20     	; 0x4f6 <AngleOutputTask+0x7a>
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     50a:	a1 e0       	ldi	r26, 0x01	; 1
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	ac 0f       	add	r26, r28
     510:	bd 1f       	adc	r27, r29
     512:	ae 0f       	add	r26, r30
     514:	bf 1f       	adc	r27, r31
     516:	cc 92       	st	X, r12
			CommRxBuff[digitCounter + 1] = '\n';
     518:	a3 e0       	ldi	r26, 0x03	; 3
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	ac 0f       	add	r26, r28
     51e:	bd 1f       	adc	r27, r29
     520:	a0 0f       	add	r26, r16
     522:	b1 1f       	adc	r27, r17
     524:	dc 92       	st	X, r13
			
			while (digitCounter >= 0)
     526:	ff 23       	and	r31, r31
     528:	04 f5       	brge	.+64     	; 0x56a <AngleOutputTask+0xee>
     52a:	0d c0       	rjmp	.+26     	; 0x546 <AngleOutputTask+0xca>
			{
				CommRxBuff[digitCounter - 1] = (tempInt % 10) + ASCII_CHAR_OFFSET;	// and add inputs, starting from the most significant digit
     52c:	31 97       	sbiw	r30, 0x01	; 1
     52e:	c9 01       	movw	r24, r18
     530:	b7 01       	movw	r22, r14
     532:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     536:	80 5d       	subi	r24, 0xD0	; 208
     538:	d8 01       	movw	r26, r16
     53a:	8e 93       	st	-X, r24
     53c:	8d 01       	movw	r16, r26
				digitCounter--;
				tempInt = tempInt / 10;
     53e:	26 2f       	mov	r18, r22
     540:	37 2f       	mov	r19, r23
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
			CommRxBuff[digitCounter + 1] = '\n';
			
			while (digitCounter >= 0)
     542:	ff 23       	and	r31, r31
     544:	9c f7       	brge	.-26     	; 0x52c <AngleOutputTask+0xb0>
			}
			// END Turn number value into serial ^
			
			if(CommRxBuff)
			{
				OSMboxPost(SerialTxMBox, (void *)&CommRxBuff[0]);
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 91 45 04 	lds	r24, 0x0445
     550:	90 91 46 04 	lds	r25, 0x0446
     554:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
			}
		}
					
		OSTimeDly(OS_TICKS_PER_SEC);	// relinquish CPU
     558:	88 ec       	ldi	r24, 0xC8	; 200
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
    }	
     560:	aa cf       	rjmp	.-172    	; 0x4b6 <AngleOutputTask+0x3a>
			tempInt = rotaryInput;	// reset input

			// Decimal 48 -> ASCII '0'
			// Decimal 57 -> ASCII '9'
			
			CommRxBuff[digitCounter] = '\r';
     562:	c9 82       	std	Y+1, r12	; 0x01
			CommRxBuff[digitCounter + 1] = '\n';
     564:	da 82       	std	Y+2, r13	; 0x02
		}
		else
		{
			tempInt = rotaryInput;
			
			digitCounter = 0;
     566:	ea 2d       	mov	r30, r10
     568:	fb 2d       	mov	r31, r11
     56a:	01 e0       	ldi	r16, 0x01	; 1
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	0c 0f       	add	r16, r28
     570:	1d 1f       	adc	r17, r29
     572:	0e 0f       	add	r16, r30
     574:	1f 1f       	adc	r17, r31
     576:	da cf       	rjmp	.-76     	; 0x52c <AngleOutputTask+0xb0>

00000578 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	69 97       	sbiw	r28, 0x19	; 25
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
     58c:	68 94       	set
     58e:	ff 24       	eor	r15, r15
     590:	f1 f8       	bld	r15, 1
		OSMboxPost(LedMBox, (void *)&tmp);
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Hi]            ");
     592:	13 e1       	ldi	r17, 0x13	; 19
		OSMboxPost(SerialTxMBox, (void *)TextMessage);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
     594:	01 e0       	ldi	r16, 0x01	; 1
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
     596:	80 ed       	ldi	r24, 0xD0	; 208
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
     59e:	f9 82       	std	Y+1, r15	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 91 c1 03 	lds	r24, 0x03C1
     5aa:	90 91 c2 03 	lds	r25, 0x03C2
     5ae:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
		//strcpy(TextMessage, "HIGH ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Hi]            ");
     5b2:	ea e4       	ldi	r30, 0x4A	; 74
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	de 01       	movw	r26, r28
     5b8:	12 96       	adiw	r26, 0x02	; 2
     5ba:	81 2f       	mov	r24, r17
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <TimerTask+0x44>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     5c4:	be 01       	movw	r22, r28
     5c6:	6e 5f       	subi	r22, 0xFE	; 254
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	80 91 45 04 	lds	r24, 0x0445
     5ce:	90 91 46 04 	lds	r25, 0x0446
     5d2:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
     5d6:	80 ed       	ldi	r24, 0xD0	; 208
     5d8:	97 e0       	ldi	r25, 0x07	; 7
     5da:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
     5de:	09 83       	std	Y+1, r16	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
     5e0:	be 01       	movw	r22, r28
     5e2:	6f 5f       	subi	r22, 0xFF	; 255
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	80 91 c1 03 	lds	r24, 0x03C1
     5ea:	90 91 c2 03 	lds	r25, 0x03C2
     5ee:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
		//strcpy(TextMessage, "MED ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[Med]           ");
     5f2:	ed e5       	ldi	r30, 0x5D	; 93
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	de 01       	movw	r26, r28
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	81 2f       	mov	r24, r17
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <TimerTask+0x84>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     604:	be 01       	movw	r22, r28
     606:	6e 5f       	subi	r22, 0xFE	; 254
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	80 91 45 04 	lds	r24, 0x0445
     60e:	90 91 46 04 	lds	r25, 0x0446
     612:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
     616:	80 ed       	ldi	r24, 0xD0	; 208
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
     61e:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 91 c1 03 	lds	r24, 0x03C1
     62a:	90 91 c2 03 	lds	r25, 0x03C2
     62e:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
		//strcpy(TextMessage, "NO ERR STATE\n\r");
		strcpy(TextMessage, "\r\r[No]            ");
     632:	e0 e7       	ldi	r30, 0x70	; 112
     634:	f1 e0       	ldi	r31, 0x01	; 1
     636:	de 01       	movw	r26, r28
     638:	12 96       	adiw	r26, 0x02	; 2
     63a:	81 2f       	mov	r24, r17
     63c:	01 90       	ld	r0, Z+
     63e:	0d 92       	st	X+, r0
     640:	8a 95       	dec	r24
     642:	e1 f7       	brne	.-8      	; 0x63c <TimerTask+0xc4>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
     644:	be 01       	movw	r22, r28
     646:	6e 5f       	subi	r22, 0xFE	; 254
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	80 91 45 04 	lds	r24, 0x0445
     64e:	90 91 46 04 	lds	r25, 0x0446
     652:	0e 94 51 07 	call	0xea2	; 0xea2 <OSMboxPost>
     656:	9f cf       	rjmp	.-194    	; 0x596 <TimerTask+0x1e>

00000658 <LedTask>:
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage
     658:	0d ec       	ldi	r16, 0xCD	; 205
     65a:	1c ec       	ldi	r17, 0xCC	; 204
     65c:	dc ec       	ldi	r29, 0xCC	; 204
     65e:	cd e3       	ldi	r28, 0x3D	; 61
	INT8U tmp;
	void *msg;
	INT16U OnPeriodTimeout = OS_TICKS_PER_SEC/10;
	INT16U OffPeriodTimeout = OS_TICKS_PER_SEC-OnPeriodTimeout;
	INT8U LocalMessage = NO_SYSTEM_ERROR;
	float blink_freq = 1.0;	//in Hz
     660:	81 2c       	mov	r8, r1
     662:	91 2c       	mov	r9, r1
     664:	68 94       	set
     666:	aa 24       	eor	r10, r10
     668:	a7 f8       	bld	r10, 7
     66a:	0f 2e       	mov	r0, r31
     66c:	ff e3       	ldi	r31, 0x3F	; 63
     66e:	bf 2e       	mov	r11, r31
     670:	f0 2d       	mov	r31, r0
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     672:	41 2c       	mov	r4, r1
     674:	51 2c       	mov	r5, r1
     676:	61 2c       	mov	r6, r1
     678:	0f 2e       	mov	r0, r31
     67a:	ff e3       	ldi	r31, 0x3F	; 63
     67c:	7f 2e       	mov	r7, r31
     67e:	f0 2d       	mov	r31, r0
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     680:	0f 2e       	mov	r0, r31
     682:	fd ec       	ldi	r31, 0xCD	; 205
     684:	2f 2e       	mov	r2, r31
     686:	f0 2d       	mov	r31, r0
     688:	0f 2e       	mov	r0, r31
     68a:	fc ec       	ldi	r31, 0xCC	; 204
     68c:	3f 2e       	mov	r3, r31
     68e:	f0 2d       	mov	r31, r0
     690:	0d c0       	rjmp	.+26     	; 0x6ac <LedTask+0x54>
		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
     692:	0d ec       	ldi	r16, 0xCD	; 205
     694:	1c ec       	ldi	r17, 0xCC	; 204
     696:	dc ec       	ldi	r29, 0xCC	; 204
     698:	cd e3       	ldi	r28, 0x3D	; 61

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
     69a:	81 2c       	mov	r8, r1
     69c:	91 2c       	mov	r9, r1
     69e:	68 94       	set
     6a0:	aa 24       	eor	r10, r10
     6a2:	a7 f8       	bld	r10, 7
     6a4:	0f 2e       	mov	r0, r31
     6a6:	ff e3       	ldi	r31, 0x3F	; 63
     6a8:	bf 2e       	mov	r11, r31
     6aa:	f0 2d       	mov	r31, r0
	float blink_freq = 1.0;	//in Hz
	float duty_cycle = 0.1; //as percentage

    for (;;) {
		/*HANDLE LED BLINKING*/
		PORTB |= _BV(PORTB5); // turn off led
     6ac:	2d 9a       	sbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * duty_cycle * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6ae:	28 2d       	mov	r18, r8
     6b0:	39 2d       	mov	r19, r9
     6b2:	4a 2d       	mov	r20, r10
     6b4:	5b 2d       	mov	r21, r11
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e8       	ldi	r24, 0x80	; 128
     6bc:	9f e3       	ldi	r25, 0x3F	; 63
     6be:	0e 94 c7 09 	call	0x138e	; 0x138e <__divsf3>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
     6c6:	20 2f       	mov	r18, r16
     6c8:	31 2f       	mov	r19, r17
     6ca:	4d 2f       	mov	r20, r29
     6cc:	5c 2f       	mov	r21, r28
     6ce:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	48 e4       	ldi	r20, 0x48	; 72
     6d8:	53 e4       	ldi	r21, 0x43	; 67
     6da:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     6de:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fixunssfsi>
     6e2:	cb 01       	movw	r24, r22
     6e4:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
		PORTB &= ~_BV(PORTB5); // turn on led
     6e8:	2d 98       	cbi	0x05, 5	; 5
		OSTimeDly ((1.0 / blink_freq) * (1 - duty_cycle) * OS_TICKS_PER_SEC); //keep it off for the 1 - duty cycle %
     6ea:	20 2f       	mov	r18, r16
     6ec:	31 2f       	mov	r19, r17
     6ee:	4d 2f       	mov	r20, r29
     6f0:	5c 2f       	mov	r21, r28
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 e8       	ldi	r24, 0x80	; 128
     6f8:	9f e3       	ldi	r25, 0x3F	; 63
     6fa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__subsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c7 01       	movw	r24, r14
     704:	b6 01       	movw	r22, r12
     706:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	48 e4       	ldi	r20, 0x48	; 72
     710:	53 e4       	ldi	r21, 0x43	; 67
     712:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__mulsf3>
     716:	0e 94 2f 0a 	call	0x145e	; 0x145e <__fixunssfsi>
     71a:	cb 01       	movw	r24, r22
     71c:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>

		/*SEE IF LED STATE HAS CHANGED*/
		msg = OSMboxAccept(LedMBox); //receive message
     720:	80 91 c1 03 	lds	r24, 0x03C1
     724:	90 91 c2 03 	lds	r25, 0x03C2
     728:	0e 94 20 07 	call	0xe40	; 0xe40 <OSMboxAccept>

		if (msg != NULL){	//ONLY CHANGE IF YOU RECEIVE A MESSAGE
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	09 f4       	brne	.+2      	; 0x732 <LedTask+0xda>
     730:	bd cf       	rjmp	.-134    	; 0x6ac <LedTask+0x54>
			LocalMessage = *((INT8U *)msg);
			switch(LocalMessage){	//react to localmessage FSM
     732:	fc 01       	movw	r30, r24
     734:	80 81       	ld	r24, Z
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	c9 f0       	breq	.+50     	; 0x76c <LedTask+0x114>
     73a:	08 f4       	brcc	.+2      	; 0x73e <LedTask+0xe6>
     73c:	aa cf       	rjmp	.-172    	; 0x692 <LedTask+0x3a>
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	09 f0       	breq	.+2      	; 0x744 <LedTask+0xec>
     742:	b4 cf       	rjmp	.-152    	; 0x6ac <LedTask+0x54>
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
     744:	04 2d       	mov	r16, r4
     746:	15 2d       	mov	r17, r5
     748:	d6 2d       	mov	r29, r6
     74a:	c7 2d       	mov	r28, r7
				case NO_SYSTEM_ERROR:
					blink_freq = 1.0;
					duty_cycle = 0.1;
					break;
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
     74c:	0f 2e       	mov	r0, r31
     74e:	fa e9       	ldi	r31, 0x9A	; 154
     750:	8f 2e       	mov	r8, r31
     752:	f0 2d       	mov	r31, r0
     754:	0f 2e       	mov	r0, r31
     756:	f9 e9       	ldi	r31, 0x99	; 153
     758:	9f 2e       	mov	r9, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	0f 2e       	mov	r0, r31
     75e:	f9 e1       	ldi	r31, 0x19	; 25
     760:	af 2e       	mov	r10, r31
     762:	f0 2d       	mov	r31, r0
     764:	68 94       	set
     766:	bb 24       	eor	r11, r11
     768:	b6 f8       	bld	r11, 6
					duty_cycle = 0.5;
					break;
     76a:	a0 cf       	rjmp	.-192    	; 0x6ac <LedTask+0x54>
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
					duty_cycle = 0.5;
     76c:	04 2d       	mov	r16, r4
     76e:	15 2d       	mov	r17, r5
     770:	d6 2d       	mov	r29, r6
     772:	c7 2d       	mov	r28, r7
				case HIGH_PRIORITY_ERROR:
					blink_freq = 2.4;
					duty_cycle = 0.5;
					break;
				case MEDIUM_PRIORITY_ERROR:
					blink_freq = 0.4;
     774:	82 2c       	mov	r8, r2
     776:	93 2c       	mov	r9, r3
     778:	0f 2e       	mov	r0, r31
     77a:	fc ec       	ldi	r31, 0xCC	; 204
     77c:	af 2e       	mov	r10, r31
     77e:	f0 2d       	mov	r31, r0
     780:	0f 2e       	mov	r0, r31
     782:	fe e3       	ldi	r31, 0x3E	; 62
     784:	bf 2e       	mov	r11, r31
     786:	f0 2d       	mov	r31, r0
					duty_cycle = 0.5;
					break; 
     788:	91 cf       	rjmp	.-222    	; 0x6ac <LedTask+0x54>

0000078a <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	69 97       	sbiw	r28, 0x19	; 25
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     79e:	0f 2e       	mov	r0, r31
     7a0:	f1 ec       	ldi	r31, 0xC1	; 193
     7a2:	cf 2e       	mov	r12, r31
     7a4:	d1 2c       	mov	r13, r1
     7a6:	f0 2d       	mov	r31, r0
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7a8:	61 2c       	mov	r6, r1
     7aa:	71 2c       	mov	r7, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
						TextMessage[str_index] = (char)254;
     7ac:	0f 2e       	mov	r0, r31
     7ae:	fe ef       	ldi	r31, 0xFE	; 254
     7b0:	af 2e       	mov	r10, r31
     7b2:	f0 2d       	mov	r31, r0
						TextMessage[str_index+1] = (char)128;
     7b4:	68 94       	set
     7b6:	88 24       	eor	r8, r8
     7b8:	87 f8       	bld	r8, 7
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
						TextMessage[str_index] = (char)254;
						TextMessage[str_index+1] = (char)192;
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f0 ec       	ldi	r31, 0xC0	; 192
     7be:	9f 2e       	mov	r9, r31
     7c0:	f0 2d       	mov	r31, r0
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
					
					PORTB |= _BV(PORTB4); // turn on debug port
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f6 ec       	ldi	r31, 0xC6	; 198
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f1 2c       	mov	r15, r1
     7ca:	f0 2d       	mov	r31, r0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
     7cc:	88 ec       	ldi	r24, 0xC8	; 200
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
     7d4:	80 91 45 04 	lds	r24, 0x0445
     7d8:	90 91 46 04 	lds	r25, 0x0446
     7dc:	0e 94 20 07 	call	0xe40	; 0xe40 <OSMboxAccept>
		
		if(msg != NULL){
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <SerialTransmitTask+0x5c>
     7e4:	6f c0       	rjmp	.+222    	; 0x8c4 <SerialTransmitTask+0x13a>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
     7e6:	bc 01       	movw	r22, r24
     7e8:	ce 01       	movw	r24, r28
     7ea:	02 96       	adiw	r24, 0x02	; 2
     7ec:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <strcpy>

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
     7f0:	f6 01       	movw	r30, r12
     7f2:	80 81       	ld	r24, Z
     7f4:	86 60       	ori	r24, 0x06	; 6
     7f6:	80 83       	st	Z, r24
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	88 23       	and	r24, r24
     7fc:	09 f4       	brne	.+2      	; 0x800 <SerialTransmitTask+0x76>
     7fe:	62 c0       	rjmp	.+196    	; 0x8c4 <SerialTransmitTask+0x13a>
     800:	06 2d       	mov	r16, r6
     802:	17 2d       	mov	r17, r7
     804:	b1 2c       	mov	r11, r1
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\r'){
     806:	8d 30       	cpi	r24, 0x0D	; 13
     808:	c9 f4       	brne	.+50     	; 0x83c <SerialTransmitTask+0xb2>
     80a:	c8 01       	movw	r24, r16
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	e2 e0       	ldi	r30, 0x02	; 2
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	ec 0f       	add	r30, r28
     814:	fd 1f       	adc	r31, r29
     816:	e8 0f       	add	r30, r24
     818:	f9 1f       	adc	r31, r25
     81a:	20 81       	ld	r18, Z
     81c:	2d 30       	cpi	r18, 0x0D	; 13
     81e:	71 f4       	brne	.+28     	; 0x83c <SerialTransmitTask+0xb2>
						TextMessage[str_index] = (char)254;
     820:	e2 e0       	ldi	r30, 0x02	; 2
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	e0 0f       	add	r30, r16
     82a:	f1 1f       	adc	r31, r17
     82c:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)128;
     82e:	e2 e0       	ldi	r30, 0x02	; 2
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ec 0f       	add	r30, r28
     834:	fd 1f       	adc	r31, r29
     836:	e8 0f       	add	r30, r24
     838:	f9 1f       	adc	r31, r25
     83a:	80 82       	st	Z, r8
					}
					if(TextMessage[str_index] == '\r' && TextMessage[str_index + 1] == '\n'){
     83c:	e2 e0       	ldi	r30, 0x02	; 2
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	ec 0f       	add	r30, r28
     842:	fd 1f       	adc	r31, r29
     844:	e0 0f       	add	r30, r16
     846:	f1 1f       	adc	r31, r17
     848:	80 81       	ld	r24, Z
     84a:	8d 30       	cpi	r24, 0x0D	; 13
     84c:	c9 f4       	brne	.+50     	; 0x880 <SerialTransmitTask+0xf6>
     84e:	c8 01       	movw	r24, r16
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	e2 e0       	ldi	r30, 0x02	; 2
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	ec 0f       	add	r30, r28
     858:	fd 1f       	adc	r31, r29
     85a:	e8 0f       	add	r30, r24
     85c:	f9 1f       	adc	r31, r25
     85e:	20 81       	ld	r18, Z
     860:	2a 30       	cpi	r18, 0x0A	; 10
     862:	71 f4       	brne	.+28     	; 0x880 <SerialTransmitTask+0xf6>
						TextMessage[str_index] = (char)254;
     864:	e2 e0       	ldi	r30, 0x02	; 2
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	e0 0f       	add	r30, r16
     86e:	f1 1f       	adc	r31, r17
     870:	a0 82       	st	Z, r10
						TextMessage[str_index+1] = (char)192;
     872:	e2 e0       	ldi	r30, 0x02	; 2
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ec 0f       	add	r30, r28
     878:	fd 1f       	adc	r31, r29
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	90 82       	st	Z, r9
					}
	//				USART_Transmit(TextMessage[str_index]);
					
					/* Wait for empty transmit buffer */
					OSSemPend(SerialTxSem, 1, &err);
     880:	ae 01       	movw	r20, r28
     882:	4f 5f       	subi	r20, 0xFF	; 255
     884:	5f 4f       	sbci	r21, 0xFF	; 255
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 c7 04 	lds	r24, 0x04C7
     88e:	90 91 c8 04 	lds	r25, 0x04C8
     892:	0e 94 90 07 	call	0xf20	; 0xf20 <OSSemPend>
					
					PORTB |= _BV(PORTB4); // turn on debug port
     896:	2c 9a       	sbi	0x05, 4	; 5
					/* Put data into buffer, sends the data */
					UDR0 = TextMessage[str_index];
     898:	e2 e0       	ldi	r30, 0x02	; 2
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	ec 0f       	add	r30, r28
     89e:	fd 1f       	adc	r31, r29
     8a0:	e0 0f       	add	r30, r16
     8a2:	f1 1f       	adc	r31, r17
     8a4:	80 81       	ld	r24, Z
     8a6:	f7 01       	movw	r30, r14
     8a8:	80 83       	st	Z, r24
					PORTB &= ~_BV(PORTB4); // turn off debug port
     8aa:	2c 98       	cbi	0x05, 4	; 5
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string

			UCSR0B |= TXCIE0;	//ENABLE TX COMPLETE INTERRUPT
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
     8ac:	b3 94       	inc	r11
     8ae:	0b 2d       	mov	r16, r11
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	e2 e0       	ldi	r30, 0x02	; 2
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ec 0f       	add	r30, r28
     8b8:	fd 1f       	adc	r31, r29
     8ba:	e0 0f       	add	r30, r16
     8bc:	f1 1f       	adc	r31, r17
     8be:	80 81       	ld	r24, Z
     8c0:	81 11       	cpse	r24, r1
     8c2:	a1 cf       	rjmp	.-190    	; 0x806 <SerialTransmitTask+0x7c>
					UDR0 = TextMessage[str_index];
					PORTB &= ~_BV(PORTB4); // turn off debug port
				}

		}
		UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     8c4:	f6 01       	movw	r30, r12
     8c6:	80 81       	ld	r24, Z
     8c8:	89 7f       	andi	r24, 0xF9	; 249
     8ca:	80 83       	st	Z, r24
	}
     8cc:	7f cf       	rjmp	.-258    	; 0x7cc <SerialTransmitTask+0x42>

000008ce <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
     8ce:	0e 94 91 04 	call	0x922	; 0x922 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
     8d2:	0e 94 45 08 	call	0x108a	; 0x108a <OSInit>
	
	USART_Init();
     8d6:	0e 94 be 04 	call	0x97c	; 0x97c <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 34 07 	call	0xe68	; 0xe68 <OSMboxCreate>
     8e2:	90 93 c2 03 	sts	0x03C2, r25
     8e6:	80 93 c1 03 	sts	0x03C1, r24
	SerialTxMBox = OSMboxCreate((void *)0);
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 34 07 	call	0xe68	; 0xe68 <OSMboxCreate>
     8f2:	90 93 46 04 	sts	0x0446, r25
     8f6:	80 93 45 04 	sts	0x0445, r24
	SerialTxSem = OSSemCreate(1);
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 73 07 	call	0xee6	; 0xee6 <OSSemCreate>
     902:	90 93 c8 04 	sts	0x04C8, r25
     906:	80 93 c7 04 	sts	0x04C7, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	48 e4       	ldi	r20, 0x48	; 72
     90e:	56 e0       	ldi	r21, 0x06	; 6
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	83 ef       	ldi	r24, 0xF3	; 243
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
     91c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <OSStart>
     920:	ff cf       	rjmp	.-2      	; 0x920 <__stack+0x21>

00000922 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
     922:	f8 94       	cli
	WatchDogReset();
     924:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
     928:	84 b7       	in	r24, 0x34	; 52
     92a:	87 7f       	andi	r24, 0xF7	; 247
     92c:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
     92e:	e0 e6       	ldi	r30, 0x60	; 96
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	88 61       	ori	r24, 0x18	; 24
     936:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
     938:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
     93a:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
     93c:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
     93e:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4); // set pin 4 of PORTB for output
     940:	24 9a       	sbi	0x04, 4	; 4
	
	// TEAM ROTA-REE!!!!!!!!
	
	DDRC &= 0b11110000;	// Set Port 0-3 of PORTC to input (by setting lower four bits to 0 for input)
     942:	87 b1       	in	r24, 0x07	; 7
     944:	80 7f       	andi	r24, 0xF0	; 240
     946:	87 b9       	out	0x07, r24	; 7
	DDRD &= 0b00001111; // Set Port 4-7 of PORTD to input (by setting upper four bits to 0 for input)
     948:	8a b1       	in	r24, 0x0a	; 10
     94a:	8f 70       	andi	r24, 0x0F	; 15
     94c:	8a b9       	out	0x0a, r24	; 10
	// END TEAM ROTARY
	

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
     952:	8d e0       	ldi	r24, 0x0D	; 13
     954:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
     956:	82 e1       	ldi	r24, 0x12	; 18
     958:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
     95a:	ee e6       	ldi	r30, 0x6E	; 110
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	81 60       	ori	r24, 0x01	; 1
     962:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
     964:	e4 e6       	ldi	r30, 0x64	; 100
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	8f 7d       	andi	r24, 0xDF	; 223
     96c:	80 83       	st	Z, r24


/* setup USART here  */	

	UCSR0B &= ~TXCIE0;	//DISABLE TX COMPLETE INTERRUPT
     96e:	e1 ec       	ldi	r30, 0xC1	; 193
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	89 7f       	andi	r24, 0xF9	; 249
     976:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
     978:	78 94       	sei
     97a:	08 95       	ret

0000097c <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
     97c:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     980:	87 e6       	ldi	r24, 0x67	; 103
     982:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     986:	88 e1       	ldi	r24, 0x18	; 24
     988:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     98c:	8e e0       	ldi	r24, 0x0E	; 14
     98e:	80 93 c2 00 	sts	0x00C2, r24
     992:	08 95       	ret

00000994 <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
     994:	fa 01       	movw	r30, r20
     996:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
     a22:	ca 01       	movw	r24, r20
     a24:	83 97       	sbiw	r24, 0x23	; 35
     a26:	08 95       	ret

00000a28 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
     a28:	08 95       	ret

00000a2a <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
     a2a:	08 95       	ret

00000a2c <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
     a2c:	08 95       	ret

00000a2e <OSTaskIdle>:
     a2e:	f8 94       	cli
     a30:	78 94       	sei
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <OSTaskIdle>

00000a34 <OSEventTaskRdy>:
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	fc 01       	movw	r30, r24
     a3e:	05 85       	ldd	r16, Z+13	; 0x0d
     a40:	e0 2f       	mov	r30, r16
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	ed 57       	subi	r30, 0x7D	; 125
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	10 81       	ld	r17, Z
     a4a:	21 2f       	mov	r18, r17
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	d9 01       	movw	r26, r18
     a50:	ad 57       	subi	r26, 0x7D	; 125
     a52:	bd 4f       	sbci	r27, 0xFD	; 253
     a54:	dc 91       	ld	r29, X
     a56:	fc 01       	movw	r30, r24
     a58:	e2 0f       	add	r30, r18
     a5a:	f3 1f       	adc	r31, r19
     a5c:	52 81       	ldd	r21, Z+2	; 0x02
     a5e:	a5 2f       	mov	r26, r21
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	ad 57       	subi	r26, 0x7D	; 125
     a64:	be 4f       	sbci	r27, 0xFE	; 254
     a66:	cc 91       	ld	r28, X
     a68:	ac 2f       	mov	r26, r28
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ad 57       	subi	r26, 0x7D	; 125
     a6e:	bd 4f       	sbci	r27, 0xFD	; 253
     a70:	ac 91       	ld	r26, X
     a72:	11 0f       	add	r17, r17
     a74:	11 0f       	add	r17, r17
     a76:	11 0f       	add	r17, r17
     a78:	c1 0f       	add	r28, r17
     a7a:	ba 2f       	mov	r27, r26
     a7c:	b0 95       	com	r27
     a7e:	5b 23       	and	r21, r27
     a80:	52 83       	std	Z+2, r21	; 0x02
     a82:	51 11       	cpse	r21, r1
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <OSEventTaskRdy+0x5c>
     a86:	5d 2f       	mov	r21, r29
     a88:	50 95       	com	r21
     a8a:	05 23       	and	r16, r21
     a8c:	fc 01       	movw	r30, r24
     a8e:	05 87       	std	Z+13, r16	; 0x0d
     a90:	ec 2f       	mov	r30, r28
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	e0 50       	subi	r30, 0x00	; 0
     a9a:	f9 4f       	sbci	r31, 0xF9	; 249
     a9c:	01 90       	ld	r0, Z+
     a9e:	f0 81       	ld	r31, Z
     aa0:	e0 2d       	mov	r30, r0
     aa2:	13 86       	std	Z+11, r1	; 0x0b
     aa4:	12 86       	std	Z+10, r1	; 0x0a
     aa6:	17 82       	std	Z+7, r1	; 0x07
     aa8:	16 82       	std	Z+6, r1	; 0x06
     aaa:	71 87       	std	Z+9, r23	; 0x09
     aac:	60 87       	std	Z+8, r22	; 0x08
     aae:	40 95       	com	r20
     ab0:	84 85       	ldd	r24, Z+12	; 0x0c
     ab2:	48 23       	and	r20, r24
     ab4:	44 87       	std	Z+12, r20	; 0x0c
     ab6:	41 11       	cpse	r20, r1
     ab8:	0b c0       	rjmp	.+22     	; 0xad0 <OSEventTaskRdy+0x9c>
     aba:	80 91 61 06 	lds	r24, 0x0661
     abe:	d8 2b       	or	r29, r24
     ac0:	d0 93 61 06 	sts	0x0661, r29
     ac4:	f9 01       	movw	r30, r18
     ac6:	ee 59       	subi	r30, 0x9E	; 158
     ac8:	f9 4f       	sbci	r31, 0xF9	; 249
     aca:	80 81       	ld	r24, Z
     acc:	a8 2b       	or	r26, r24
     ace:	a0 83       	st	Z, r26
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <OSEventTaskWait>:
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	e0 91 6d 06 	lds	r30, 0x066D
     ae2:	f0 91 6e 06 	lds	r31, 0x066E
     ae6:	97 83       	std	Z+7, r25	; 0x07
     ae8:	86 83       	std	Z+6, r24	; 0x06
     aea:	a7 85       	ldd	r26, Z+15	; 0x0f
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	20 89       	ldd	r18, Z+16	; 0x10
     af0:	ed 01       	movw	r28, r26
     af2:	ce 59       	subi	r28, 0x9E	; 158
     af4:	d9 4f       	sbci	r29, 0xF9	; 249
     af6:	42 2f       	mov	r20, r18
     af8:	40 95       	com	r20
     afa:	38 81       	ld	r19, Y
     afc:	34 23       	and	r19, r20
     afe:	38 83       	st	Y, r19
     b00:	31 11       	cpse	r19, r1
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <OSEventTaskWait+0x38>
     b04:	31 89       	ldd	r19, Z+17	; 0x11
     b06:	30 95       	com	r19
     b08:	40 91 61 06 	lds	r20, 0x0661
     b0c:	34 23       	and	r19, r20
     b0e:	30 93 61 06 	sts	0x0661, r19
     b12:	a8 0f       	add	r26, r24
     b14:	b9 1f       	adc	r27, r25
     b16:	12 96       	adiw	r26, 0x02	; 2
     b18:	3c 91       	ld	r19, X
     b1a:	12 97       	sbiw	r26, 0x02	; 2
     b1c:	23 2b       	or	r18, r19
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	2c 93       	st	X, r18
     b22:	dc 01       	movw	r26, r24
     b24:	1d 96       	adiw	r26, 0x0d	; 13
     b26:	3c 91       	ld	r19, X
     b28:	1d 97       	sbiw	r26, 0x0d	; 13
     b2a:	21 89       	ldd	r18, Z+17	; 0x11
     b2c:	23 2b       	or	r18, r19
     b2e:	1d 96       	adiw	r26, 0x0d	; 13
     b30:	2c 93       	st	X, r18
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <OSEventTO>:
     b38:	e0 91 6d 06 	lds	r30, 0x066D
     b3c:	f0 91 6e 06 	lds	r31, 0x066E
     b40:	27 85       	ldd	r18, Z+15	; 0x0f
     b42:	dc 01       	movw	r26, r24
     b44:	a2 0f       	add	r26, r18
     b46:	b1 1d       	adc	r27, r1
     b48:	20 89       	ldd	r18, Z+16	; 0x10
     b4a:	20 95       	com	r18
     b4c:	12 96       	adiw	r26, 0x02	; 2
     b4e:	3c 91       	ld	r19, X
     b50:	12 97       	sbiw	r26, 0x02	; 2
     b52:	23 23       	and	r18, r19
     b54:	12 96       	adiw	r26, 0x02	; 2
     b56:	2c 93       	st	X, r18
     b58:	21 11       	cpse	r18, r1
     b5a:	09 c0       	rjmp	.+18     	; 0xb6e <OSEventTO+0x36>
     b5c:	21 89       	ldd	r18, Z+17	; 0x11
     b5e:	20 95       	com	r18
     b60:	dc 01       	movw	r26, r24
     b62:	1d 96       	adiw	r26, 0x0d	; 13
     b64:	3c 91       	ld	r19, X
     b66:	1d 97       	sbiw	r26, 0x0d	; 13
     b68:	23 23       	and	r18, r19
     b6a:	1d 96       	adiw	r26, 0x0d	; 13
     b6c:	2c 93       	st	X, r18
     b6e:	14 86       	std	Z+12, r1	; 0x0c
     b70:	17 82       	std	Z+7, r1	; 0x07
     b72:	16 82       	std	Z+6, r1	; 0x06
     b74:	08 95       	ret

00000b76 <OSEventWaitListInit>:
     b76:	fc 01       	movw	r30, r24
     b78:	15 86       	std	Z+13, r1	; 0x0d
     b7a:	32 96       	adiw	r30, 0x02	; 2
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	11 92       	st	Z+, r1
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	88 30       	cpi	r24, 0x08	; 8
     b84:	e1 f7       	brne	.-8      	; 0xb7e <OSEventWaitListInit+0x8>
     b86:	08 95       	ret

00000b88 <OSIntExit>:
     b88:	f8 94       	cli
     b8a:	80 91 6c 06 	lds	r24, 0x066C
     b8e:	81 50       	subi	r24, 0x01	; 1
     b90:	80 93 6c 06 	sts	0x066C, r24
     b94:	90 91 49 06 	lds	r25, 0x0649
     b98:	89 2b       	or	r24, r25
     b9a:	e1 f5       	brne	.+120    	; 0xc14 <OSIntExit+0x8c>
     b9c:	e0 91 61 06 	lds	r30, 0x0661
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ed 57       	subi	r30, 0x7D	; 125
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	80 81       	ld	r24, Z
     ba8:	80 93 c0 03 	sts	0x03C0, r24
     bac:	e8 2f       	mov	r30, r24
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ee 59       	subi	r30, 0x9E	; 158
     bb2:	f9 4f       	sbci	r31, 0xF9	; 249
     bb4:	e0 81       	ld	r30, Z
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ed 57       	subi	r30, 0x7D	; 125
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	88 0f       	add	r24, r24
     bbe:	88 0f       	add	r24, r24
     bc0:	88 0f       	add	r24, r24
     bc2:	90 81       	ld	r25, Z
     bc4:	89 0f       	add	r24, r25
     bc6:	80 93 4f 06 	sts	0x064F, r24
     bca:	90 91 50 06 	lds	r25, 0x0650
     bce:	89 17       	cp	r24, r25
     bd0:	09 f1       	breq	.+66     	; 0xc14 <OSIntExit+0x8c>
     bd2:	e8 2f       	mov	r30, r24
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	e0 50       	subi	r30, 0x00	; 0
     bdc:	f9 4f       	sbci	r31, 0xF9	; 249
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	90 93 60 06 	sts	0x0660, r25
     be6:	80 93 5f 06 	sts	0x065F, r24
     bea:	80 91 53 06 	lds	r24, 0x0653
     bee:	90 91 54 06 	lds	r25, 0x0654
     bf2:	a0 91 55 06 	lds	r26, 0x0655
     bf6:	b0 91 56 06 	lds	r27, 0x0656
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	a1 1d       	adc	r26, r1
     bfe:	b1 1d       	adc	r27, r1
     c00:	80 93 53 06 	sts	0x0653, r24
     c04:	90 93 54 06 	sts	0x0654, r25
     c08:	a0 93 55 06 	sts	0x0655, r26
     c0c:	b0 93 56 06 	sts	0x0656, r27
     c10:	0e 94 60 01 	call	0x2c0	; 0x2c0 <OSIntCtxSw>
     c14:	78 94       	sei
     c16:	08 95       	ret

00000c18 <OSSched>:
     c18:	f8 94       	cli
     c1a:	90 91 6c 06 	lds	r25, 0x066C
     c1e:	80 91 49 06 	lds	r24, 0x0649
     c22:	89 2b       	or	r24, r25
     c24:	d1 f5       	brne	.+116    	; 0xc9a <OSSched+0x82>
     c26:	e0 91 61 06 	lds	r30, 0x0661
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ed 57       	subi	r30, 0x7D	; 125
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	80 81       	ld	r24, Z
     c32:	e8 2f       	mov	r30, r24
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 59       	subi	r30, 0x9E	; 158
     c38:	f9 4f       	sbci	r31, 0xF9	; 249
     c3a:	e0 81       	ld	r30, Z
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	ed 57       	subi	r30, 0x7D	; 125
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	88 0f       	add	r24, r24
     c44:	88 0f       	add	r24, r24
     c46:	88 0f       	add	r24, r24
     c48:	90 81       	ld	r25, Z
     c4a:	e8 2f       	mov	r30, r24
     c4c:	e9 0f       	add	r30, r25
     c4e:	e0 93 4f 06 	sts	0x064F, r30
     c52:	80 91 50 06 	lds	r24, 0x0650
     c56:	e8 17       	cp	r30, r24
     c58:	01 f1       	breq	.+64     	; 0xc9a <OSSched+0x82>
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e0 50       	subi	r30, 0x00	; 0
     c62:	f9 4f       	sbci	r31, 0xF9	; 249
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	90 93 60 06 	sts	0x0660, r25
     c6c:	80 93 5f 06 	sts	0x065F, r24
     c70:	80 91 53 06 	lds	r24, 0x0653
     c74:	90 91 54 06 	lds	r25, 0x0654
     c78:	a0 91 55 06 	lds	r26, 0x0655
     c7c:	b0 91 56 06 	lds	r27, 0x0656
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	a1 1d       	adc	r26, r1
     c84:	b1 1d       	adc	r27, r1
     c86:	80 93 53 06 	sts	0x0653, r24
     c8a:	90 93 54 06 	sts	0x0654, r25
     c8e:	a0 93 55 06 	sts	0x0655, r26
     c92:	b0 93 56 06 	sts	0x0656, r27
     c96:	0e 94 03 01 	call	0x206	; 0x206 <OSCtxSw>
     c9a:	78 94       	sei
     c9c:	08 95       	ret

00000c9e <OSStart>:
     c9e:	80 91 4a 06 	lds	r24, 0x064A
     ca2:	81 11       	cpse	r24, r1
     ca4:	26 c0       	rjmp	.+76     	; 0xcf2 <OSStart+0x54>
     ca6:	e0 91 61 06 	lds	r30, 0x0661
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ed 57       	subi	r30, 0x7D	; 125
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	e0 81       	ld	r30, Z
     cb2:	ae 2f       	mov	r26, r30
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ae 59       	subi	r26, 0x9E	; 158
     cb8:	b9 4f       	sbci	r27, 0xF9	; 249
     cba:	ac 91       	ld	r26, X
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ad 57       	subi	r26, 0x7D	; 125
     cc0:	be 4f       	sbci	r27, 0xFE	; 254
     cc2:	ee 0f       	add	r30, r30
     cc4:	ee 0f       	add	r30, r30
     cc6:	ee 0f       	add	r30, r30
     cc8:	8c 91       	ld	r24, X
     cca:	e8 0f       	add	r30, r24
     ccc:	e0 93 4f 06 	sts	0x064F, r30
     cd0:	e0 93 50 06 	sts	0x0650, r30
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	e0 50       	subi	r30, 0x00	; 0
     cdc:	f9 4f       	sbci	r31, 0xF9	; 249
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	90 93 60 06 	sts	0x0660, r25
     ce6:	80 93 5f 06 	sts	0x065F, r24
     cea:	90 93 6e 06 	sts	0x066E, r25
     cee:	80 93 6d 06 	sts	0x066D, r24
     cf2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <OSStartHighRdy>
     cf6:	08 95       	ret

00000cf8 <OSTCBInit>:
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	f8 94       	cli
     cfe:	e0 91 5b 06 	lds	r30, 0x065B
     d02:	f0 91 5c 06 	lds	r31, 0x065C
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	09 f4       	brne	.+2      	; 0xd0c <OSTCBInit+0x14>
     d0a:	4f c0       	rjmp	.+158    	; 0xdaa <OSTCBInit+0xb2>
     d0c:	22 81       	ldd	r18, Z+2	; 0x02
     d0e:	33 81       	ldd	r19, Z+3	; 0x03
     d10:	30 93 5c 06 	sts	0x065C, r19
     d14:	20 93 5b 06 	sts	0x065B, r18
     d18:	78 94       	sei
     d1a:	71 83       	std	Z+1, r23	; 0x01
     d1c:	60 83       	st	Z, r22
     d1e:	85 87       	std	Z+13, r24	; 0x0d
     d20:	14 86       	std	Z+12, r1	; 0x0c
     d22:	13 86       	std	Z+11, r1	; 0x0b
     d24:	12 86       	std	Z+10, r1	; 0x0a
     d26:	c8 2f       	mov	r28, r24
     d28:	c6 95       	lsr	r28
     d2a:	c6 95       	lsr	r28
     d2c:	c6 95       	lsr	r28
     d2e:	c7 87       	std	Z+15, r28	; 0x0f
     d30:	d0 e0       	ldi	r29, 0x00	; 0
     d32:	cd 57       	subi	r28, 0x7D	; 125
     d34:	dd 4f       	sbci	r29, 0xFD	; 253
     d36:	98 81       	ld	r25, Y
     d38:	91 8b       	std	Z+17, r25	; 0x11
     d3a:	c8 2f       	mov	r28, r24
     d3c:	c7 70       	andi	r28, 0x07	; 7
     d3e:	c6 87       	std	Z+14, r28	; 0x0e
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	cd 57       	subi	r28, 0x7D	; 125
     d44:	dd 4f       	sbci	r29, 0xFD	; 253
     d46:	98 81       	ld	r25, Y
     d48:	90 8b       	std	Z+16, r25	; 0x10
     d4a:	17 82       	std	Z+7, r1	; 0x07
     d4c:	16 82       	std	Z+6, r1	; 0x06
     d4e:	11 86       	std	Z+9, r1	; 0x09
     d50:	10 86       	std	Z+8, r1	; 0x08
     d52:	f8 94       	cli
     d54:	a8 2f       	mov	r26, r24
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	aa 0f       	add	r26, r26
     d5a:	bb 1f       	adc	r27, r27
     d5c:	a0 50       	subi	r26, 0x00	; 0
     d5e:	b9 4f       	sbci	r27, 0xF9	; 249
     d60:	ed 93       	st	X+, r30
     d62:	fc 93       	st	X, r31
     d64:	a0 91 51 06 	lds	r26, 0x0651
     d68:	b0 91 52 06 	lds	r27, 0x0652
     d6c:	b3 83       	std	Z+3, r27	; 0x03
     d6e:	a2 83       	std	Z+2, r26	; 0x02
     d70:	15 82       	std	Z+5, r1	; 0x05
     d72:	14 82       	std	Z+4, r1	; 0x04
     d74:	10 97       	sbiw	r26, 0x00	; 0
     d76:	21 f0       	breq	.+8      	; 0xd80 <OSTCBInit+0x88>
     d78:	15 96       	adiw	r26, 0x05	; 5
     d7a:	fc 93       	st	X, r31
     d7c:	ee 93       	st	-X, r30
     d7e:	14 97       	sbiw	r26, 0x04	; 4
     d80:	f0 93 52 06 	sts	0x0652, r31
     d84:	e0 93 51 06 	sts	0x0651, r30
     d88:	90 91 61 06 	lds	r25, 0x0661
     d8c:	81 89       	ldd	r24, Z+17	; 0x11
     d8e:	89 2b       	or	r24, r25
     d90:	80 93 61 06 	sts	0x0661, r24
     d94:	a7 85       	ldd	r26, Z+15	; 0x0f
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ae 59       	subi	r26, 0x9E	; 158
     d9a:	b9 4f       	sbci	r27, 0xF9	; 249
     d9c:	9c 91       	ld	r25, X
     d9e:	80 89       	ldd	r24, Z+16	; 0x10
     da0:	89 2b       	or	r24, r25
     da2:	8c 93       	st	X, r24
     da4:	78 94       	sei
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <OSTCBInit+0xb6>
     daa:	78 94       	sei
     dac:	86 e4       	ldi	r24, 0x46	; 70
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <OSTimeTick>:
     db4:	0e 94 16 05 	call	0xa2c	; 0xa2c <OSTimeTickHook>
     db8:	e0 91 51 06 	lds	r30, 0x0651
     dbc:	f0 91 52 06 	lds	r31, 0x0652
     dc0:	85 85       	ldd	r24, Z+13	; 0x0d
     dc2:	8f 33       	cpi	r24, 0x3F	; 63
     dc4:	39 f1       	breq	.+78     	; 0xe14 <OSTimeTick+0x60>
     dc6:	40 91 61 06 	lds	r20, 0x0661
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	f8 94       	cli
     dd0:	82 85       	ldd	r24, Z+10	; 0x0a
     dd2:	93 85       	ldd	r25, Z+11	; 0x0b
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	a9 f0       	breq	.+42     	; 0xe02 <OSTimeTick+0x4e>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	93 87       	std	Z+11, r25	; 0x0b
     ddc:	82 87       	std	Z+10, r24	; 0x0a
     dde:	89 2b       	or	r24, r25
     de0:	81 f4       	brne	.+32     	; 0xe02 <OSTimeTick+0x4e>
     de2:	84 85       	ldd	r24, Z+12	; 0x0c
     de4:	83 fd       	sbrc	r24, 3
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <OSTimeTick+0x4a>
     de8:	81 89       	ldd	r24, Z+17	; 0x11
     dea:	a7 85       	ldd	r26, Z+15	; 0x0f
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ae 59       	subi	r26, 0x9E	; 158
     df0:	b9 4f       	sbci	r27, 0xF9	; 249
     df2:	5c 91       	ld	r21, X
     df4:	90 89       	ldd	r25, Z+16	; 0x10
     df6:	95 2b       	or	r25, r21
     df8:	9c 93       	st	X, r25
     dfa:	48 2b       	or	r20, r24
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <OSTimeTick+0x4e>
     dfe:	33 87       	std	Z+11, r19	; 0x0b
     e00:	22 87       	std	Z+10, r18	; 0x0a
     e02:	02 80       	ldd	r0, Z+2	; 0x02
     e04:	f3 81       	ldd	r31, Z+3	; 0x03
     e06:	e0 2d       	mov	r30, r0
     e08:	78 94       	sei
     e0a:	85 85       	ldd	r24, Z+13	; 0x0d
     e0c:	8f 33       	cpi	r24, 0x3F	; 63
     e0e:	f9 f6       	brne	.-66     	; 0xdce <OSTimeTick+0x1a>
     e10:	40 93 61 06 	sts	0x0661, r20
     e14:	f8 94       	cli
     e16:	80 91 6f 06 	lds	r24, 0x066F
     e1a:	90 91 70 06 	lds	r25, 0x0670
     e1e:	a0 91 71 06 	lds	r26, 0x0671
     e22:	b0 91 72 06 	lds	r27, 0x0672
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	a1 1d       	adc	r26, r1
     e2a:	b1 1d       	adc	r27, r1
     e2c:	80 93 6f 06 	sts	0x066F, r24
     e30:	90 93 70 06 	sts	0x0670, r25
     e34:	a0 93 71 06 	sts	0x0671, r26
     e38:	b0 93 72 06 	sts	0x0672, r27
     e3c:	78 94       	sei
     e3e:	08 95       	ret

00000e40 <OSMboxAccept>:
     e40:	fc 01       	movw	r30, r24
     e42:	f8 94       	cli
     e44:	84 85       	ldd	r24, Z+12	; 0x0c
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	21 f0       	breq	.+8      	; 0xe52 <OSMboxAccept+0x12>
     e4a:	78 94       	sei
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	08 95       	ret
     e52:	20 81       	ld	r18, Z
     e54:	31 81       	ldd	r19, Z+1	; 0x01
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	11 f0       	breq	.+4      	; 0xe60 <OSMboxAccept+0x20>
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	10 82       	st	Z, r1
     e60:	78 94       	sei
     e62:	82 2f       	mov	r24, r18
     e64:	93 2f       	mov	r25, r19
     e66:	08 95       	ret

00000e68 <OSMboxCreate>:
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	f8 94       	cli
     e6e:	c0 91 6a 06 	lds	r28, 0x066A
     e72:	d0 91 6b 06 	lds	r29, 0x066B
     e76:	20 97       	sbiw	r28, 0x00	; 0
     e78:	31 f0       	breq	.+12     	; 0xe86 <OSMboxCreate+0x1e>
     e7a:	28 81       	ld	r18, Y
     e7c:	39 81       	ldd	r19, Y+1	; 0x01
     e7e:	30 93 6b 06 	sts	0x066B, r19
     e82:	20 93 6a 06 	sts	0x066A, r18
     e86:	78 94       	sei
     e88:	20 97       	sbiw	r28, 0x00	; 0
     e8a:	39 f0       	breq	.+14     	; 0xe9a <OSMboxCreate+0x32>
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	2c 87       	std	Y+12, r18	; 0x0c
     e90:	99 83       	std	Y+1, r25	; 0x01
     e92:	88 83       	st	Y, r24
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 bb 05 	call	0xb76	; 0xb76 <OSEventWaitListInit>
     e9a:	ce 01       	movw	r24, r28
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <OSMboxPost>:
     ea2:	f8 94       	cli
     ea4:	fc 01       	movw	r30, r24
     ea6:	24 85       	ldd	r18, Z+12	; 0x0c
     ea8:	21 30       	cpi	r18, 0x01	; 1
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <OSMboxPost+0x10>
     eac:	78 94       	sei
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret
     eb2:	fc 01       	movw	r30, r24
     eb4:	25 85       	ldd	r18, Z+13	; 0x0d
     eb6:	22 23       	and	r18, r18
     eb8:	41 f0       	breq	.+16     	; 0xeca <OSMboxPost+0x28>
     eba:	42 e0       	ldi	r20, 0x02	; 2
     ebc:	0e 94 1a 05 	call	0xa34	; 0xa34 <OSEventTaskRdy>
     ec0:	78 94       	sei
     ec2:	0e 94 0c 06 	call	0xc18	; 0xc18 <OSSched>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	08 95       	ret
     eca:	fc 01       	movw	r30, r24
     ecc:	20 81       	ld	r18, Z
     ece:	31 81       	ldd	r19, Z+1	; 0x01
     ed0:	23 2b       	or	r18, r19
     ed2:	19 f0       	breq	.+6      	; 0xeda <OSMboxPost+0x38>
     ed4:	78 94       	sei
     ed6:	84 e1       	ldi	r24, 0x14	; 20
     ed8:	08 95       	ret
     eda:	fc 01       	movw	r30, r24
     edc:	71 83       	std	Z+1, r23	; 0x01
     ede:	60 83       	st	Z, r22
     ee0:	78 94       	sei
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret

00000ee6 <OSSemCreate>:
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	f8 94       	cli
     eec:	c0 91 6a 06 	lds	r28, 0x066A
     ef0:	d0 91 6b 06 	lds	r29, 0x066B
     ef4:	20 97       	sbiw	r28, 0x00	; 0
     ef6:	31 f0       	breq	.+12     	; 0xf04 <OSSemCreate+0x1e>
     ef8:	28 81       	ld	r18, Y
     efa:	39 81       	ldd	r19, Y+1	; 0x01
     efc:	30 93 6b 06 	sts	0x066B, r19
     f00:	20 93 6a 06 	sts	0x066A, r18
     f04:	78 94       	sei
     f06:	20 97       	sbiw	r28, 0x00	; 0
     f08:	39 f0       	breq	.+14     	; 0xf18 <OSSemCreate+0x32>
     f0a:	23 e0       	ldi	r18, 0x03	; 3
     f0c:	2c 87       	std	Y+12, r18	; 0x0c
     f0e:	9b 87       	std	Y+11, r25	; 0x0b
     f10:	8a 87       	std	Y+10, r24	; 0x0a
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 bb 05 	call	0xb76	; 0xb76 <OSEventWaitListInit>
     f18:	ce 01       	movw	r24, r28
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <OSSemPend>:
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
     f2a:	8a 01       	movw	r16, r20
     f2c:	f8 94       	cli
     f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	21 f0       	breq	.+8      	; 0xf3c <OSSemPend+0x1c>
     f34:	78 94       	sei
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	fa 01       	movw	r30, r20
     f3a:	80 83       	st	Z, r24
     f3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	39 f0       	breq	.+14     	; 0xf52 <OSSemPend+0x32>
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	9b 87       	std	Y+11, r25	; 0x0b
     f48:	8a 87       	std	Y+10, r24	; 0x0a
     f4a:	78 94       	sei
     f4c:	f8 01       	movw	r30, r16
     f4e:	10 82       	st	Z, r1
     f50:	2d c0       	rjmp	.+90     	; 0xfac <OSSemPend+0x8c>
     f52:	80 91 6c 06 	lds	r24, 0x066C
     f56:	88 23       	and	r24, r24
     f58:	29 f0       	breq	.+10     	; 0xf64 <OSSemPend+0x44>
     f5a:	78 94       	sei
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	f8 01       	movw	r30, r16
     f60:	80 83       	st	Z, r24
     f62:	24 c0       	rjmp	.+72     	; 0xfac <OSSemPend+0x8c>
     f64:	e0 91 6d 06 	lds	r30, 0x066D
     f68:	f0 91 6e 06 	lds	r31, 0x066E
     f6c:	84 85       	ldd	r24, Z+12	; 0x0c
     f6e:	81 60       	ori	r24, 0x01	; 1
     f70:	84 87       	std	Z+12, r24	; 0x0c
     f72:	73 87       	std	Z+11, r23	; 0x0b
     f74:	62 87       	std	Z+10, r22	; 0x0a
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 6d 05 	call	0xada	; 0xada <OSEventTaskWait>
     f7c:	78 94       	sei
     f7e:	0e 94 0c 06 	call	0xc18	; 0xc18 <OSSched>
     f82:	f8 94       	cli
     f84:	e0 91 6d 06 	lds	r30, 0x066D
     f88:	f0 91 6e 06 	lds	r31, 0x066E
     f8c:	84 85       	ldd	r24, Z+12	; 0x0c
     f8e:	80 ff       	sbrs	r24, 0
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <OSSemPend+0x82>
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 9c 05 	call	0xb38	; 0xb38 <OSEventTO>
     f98:	78 94       	sei
     f9a:	8a e0       	ldi	r24, 0x0A	; 10
     f9c:	f8 01       	movw	r30, r16
     f9e:	80 83       	st	Z, r24
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <OSSemPend+0x8c>
     fa2:	17 82       	std	Z+7, r1	; 0x07
     fa4:	16 82       	std	Z+6, r1	; 0x06
     fa6:	78 94       	sei
     fa8:	f8 01       	movw	r30, r16
     faa:	10 82       	st	Z, r1
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <OSTaskCreate>:
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	b2 2e       	mov	r11, r18
     fca:	2f e3       	ldi	r18, 0x3F	; 63
     fcc:	2b 15       	cp	r18, r11
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <OSTaskCreate+0x1c>
     fd0:	4f c0       	rjmp	.+158    	; 0x1070 <OSTaskCreate+0xba>
     fd2:	f8 94       	cli
     fd4:	cb 2d       	mov	r28, r11
     fd6:	d0 e0       	ldi	r29, 0x00	; 0
     fd8:	fe 01       	movw	r30, r28
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	e0 50       	subi	r30, 0x00	; 0
     fe0:	f9 4f       	sbci	r31, 0xF9	; 249
     fe2:	01 90       	ld	r0, Z+
     fe4:	f0 81       	ld	r31, Z
     fe6:	e0 2d       	mov	r30, r0
     fe8:	ef 2b       	or	r30, r31
     fea:	09 f0       	breq	.+2      	; 0xfee <OSTaskCreate+0x38>
     fec:	3e c0       	rjmp	.+124    	; 0x106a <OSTaskCreate+0xb4>
     fee:	fe 01       	movw	r30, r28
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	e0 50       	subi	r30, 0x00	; 0
     ff6:	f9 4f       	sbci	r31, 0xF9	; 249
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	31 83       	std	Z+1, r19	; 0x01
     ffe:	20 83       	st	Z, r18
    1000:	78 94       	sei
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	0e 94 ca 04 	call	0x994	; 0x994 <OSTaskStkInit>
    100a:	c1 2c       	mov	r12, r1
    100c:	d1 2c       	mov	r13, r1
    100e:	e1 2c       	mov	r14, r1
    1010:	f1 2c       	mov	r15, r1
    1012:	00 e0       	ldi	r16, 0x00	; 0
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	bc 01       	movw	r22, r24
    1020:	8b 2d       	mov	r24, r11
    1022:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <OSTCBInit>
    1026:	81 11       	cpse	r24, r1
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <OSTaskCreate+0xa2>
    102a:	f8 94       	cli
    102c:	80 91 5e 06 	lds	r24, 0x065E
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 5e 06 	sts	0x065E, r24
    1036:	cc 0f       	add	r28, r28
    1038:	dd 1f       	adc	r29, r29
    103a:	c0 50       	subi	r28, 0x00	; 0
    103c:	d9 4f       	sbci	r29, 0xF9	; 249
    103e:	88 81       	ld	r24, Y
    1040:	99 81       	ldd	r25, Y+1	; 0x01
    1042:	0e 94 14 05 	call	0xa28	; 0xa28 <OSTaskCreateHook>
    1046:	78 94       	sei
    1048:	80 91 4a 06 	lds	r24, 0x064A
    104c:	88 23       	and	r24, r24
    104e:	91 f0       	breq	.+36     	; 0x1074 <OSTaskCreate+0xbe>
    1050:	0e 94 0c 06 	call	0xc18	; 0xc18 <OSSched>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <OSTaskCreate+0xc0>
    1058:	f8 94       	cli
    105a:	cc 0f       	add	r28, r28
    105c:	dd 1f       	adc	r29, r29
    105e:	c0 50       	subi	r28, 0x00	; 0
    1060:	d9 4f       	sbci	r29, 0xF9	; 249
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	18 82       	st	Y, r1
    1066:	78 94       	sei
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <OSTaskCreate+0xc0>
    106a:	78 94       	sei
    106c:	88 e2       	ldi	r24, 0x28	; 40
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <OSTaskCreate+0xc0>
    1070:	8a e2       	ldi	r24, 0x2A	; 42
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <OSTaskCreate+0xc0>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	08 95       	ret

0000108a <OSInit>:
    108a:	10 92 6f 06 	sts	0x066F, r1
    108e:	10 92 70 06 	sts	0x0670, r1
    1092:	10 92 71 06 	sts	0x0671, r1
    1096:	10 92 72 06 	sts	0x0672, r1
    109a:	10 92 6c 06 	sts	0x066C, r1
    109e:	10 92 49 06 	sts	0x0649, r1
    10a2:	10 92 5e 06 	sts	0x065E, r1
    10a6:	10 92 4a 06 	sts	0x064A, r1
    10aa:	10 92 4b 06 	sts	0x064B, r1
    10ae:	10 92 4c 06 	sts	0x064C, r1
    10b2:	10 92 4d 06 	sts	0x064D, r1
    10b6:	10 92 4e 06 	sts	0x064E, r1
    10ba:	10 92 53 06 	sts	0x0653, r1
    10be:	10 92 54 06 	sts	0x0654, r1
    10c2:	10 92 55 06 	sts	0x0655, r1
    10c6:	10 92 56 06 	sts	0x0656, r1
    10ca:	10 92 61 06 	sts	0x0661, r1
    10ce:	e2 e6       	ldi	r30, 0x62	; 98
    10d0:	f6 e0       	ldi	r31, 0x06	; 6
    10d2:	8a e6       	ldi	r24, 0x6A	; 106
    10d4:	96 e0       	ldi	r25, 0x06	; 6
    10d6:	11 92       	st	Z+, r1
    10d8:	e8 17       	cp	r30, r24
    10da:	f9 07       	cpc	r31, r25
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <OSInit+0x4c>
    10de:	10 92 50 06 	sts	0x0650, r1
    10e2:	10 92 4f 06 	sts	0x064F, r1
    10e6:	10 92 60 06 	sts	0x0660, r1
    10ea:	10 92 5f 06 	sts	0x065F, r1
    10ee:	10 92 6e 06 	sts	0x066E, r1
    10f2:	10 92 6d 06 	sts	0x066D, r1
    10f6:	10 92 52 06 	sts	0x0652, r1
    10fa:	10 92 51 06 	sts	0x0651, r1
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f7 e0       	ldi	r31, 0x07	; 7
    1102:	80 e8       	ldi	r24, 0x80	; 128
    1104:	97 e0       	ldi	r25, 0x07	; 7
    1106:	11 92       	st	Z+, r1
    1108:	11 92       	st	Z+, r1
    110a:	e8 17       	cp	r30, r24
    110c:	f9 07       	cpc	r31, r25
    110e:	d9 f7       	brne	.-10     	; 0x1106 <OSInit+0x7c>
    1110:	8e e9       	ldi	r24, 0x9E	; 158
    1112:	92 e0       	ldi	r25, 0x02	; 2
    1114:	20 e4       	ldi	r18, 0x40	; 64
    1116:	33 e0       	ldi	r19, 0x03	; 3
    1118:	fc 01       	movw	r30, r24
    111a:	70 97       	sbiw	r30, 0x10	; 16
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	42 96       	adiw	r24, 0x12	; 18
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	c1 f7       	brne	.-16     	; 0x1118 <OSInit+0x8e>
    1128:	10 92 31 03 	sts	0x0331, r1
    112c:	10 92 30 03 	sts	0x0330, r1
    1130:	8c e8       	ldi	r24, 0x8C	; 140
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	90 93 5c 06 	sts	0x065C, r25
    1138:	80 93 5b 06 	sts	0x065B, r24
    113c:	81 e8       	ldi	r24, 0x81	; 129
    113e:	96 e0       	ldi	r25, 0x06	; 6
    1140:	2f ef       	ldi	r18, 0xFF	; 255
    1142:	36 e0       	ldi	r19, 0x06	; 6
    1144:	fc 01       	movw	r30, r24
    1146:	3e 97       	sbiw	r30, 0x0e	; 14
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	80 83       	st	Z, r24
    114c:	0e 96       	adiw	r24, 0x0e	; 14
    114e:	82 17       	cp	r24, r18
    1150:	93 07       	cpc	r25, r19
    1152:	c1 f7       	brne	.-16     	; 0x1144 <OSInit+0xba>
    1154:	10 92 f2 06 	sts	0x06F2, r1
    1158:	10 92 f1 06 	sts	0x06F1, r1
    115c:	83 e7       	ldi	r24, 0x73	; 115
    115e:	96 e0       	ldi	r25, 0x06	; 6
    1160:	90 93 6b 06 	sts	0x066B, r25
    1164:	80 93 6a 06 	sts	0x066A, r24
    1168:	2f e3       	ldi	r18, 0x3F	; 63
    116a:	4f eb       	ldi	r20, 0xBF	; 191
    116c:	53 e0       	ldi	r21, 0x03	; 3
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	87 e1       	ldi	r24, 0x17	; 23
    1174:	95 e0       	ldi	r25, 0x05	; 5
    1176:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
    117a:	2e e3       	ldi	r18, 0x3E	; 62
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	53 e0       	ldi	r21, 0x03	; 3
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	8e e0       	ldi	r24, 0x0E	; 14
    1186:	99 e0       	ldi	r25, 0x09	; 9
    1188:	0e 94 db 07 	call	0xfb6	; 0xfb6 <OSTaskCreate>
    118c:	08 95       	ret

0000118e <OSTimeDly>:
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	e1 f0       	breq	.+56     	; 0x11ca <OSTimeDly+0x3c>
    1192:	f8 94       	cli
    1194:	e0 91 6d 06 	lds	r30, 0x066D
    1198:	f0 91 6e 06 	lds	r31, 0x066E
    119c:	a7 85       	ldd	r26, Z+15	; 0x0f
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ae 59       	subi	r26, 0x9E	; 158
    11a2:	b9 4f       	sbci	r27, 0xF9	; 249
    11a4:	20 89       	ldd	r18, Z+16	; 0x10
    11a6:	20 95       	com	r18
    11a8:	3c 91       	ld	r19, X
    11aa:	23 23       	and	r18, r19
    11ac:	2c 93       	st	X, r18
    11ae:	21 11       	cpse	r18, r1
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <OSTimeDly+0x32>
    11b2:	21 89       	ldd	r18, Z+17	; 0x11
    11b4:	20 95       	com	r18
    11b6:	30 91 61 06 	lds	r19, 0x0661
    11ba:	23 23       	and	r18, r19
    11bc:	20 93 61 06 	sts	0x0661, r18
    11c0:	93 87       	std	Z+11, r25	; 0x0b
    11c2:	82 87       	std	Z+10, r24	; 0x0a
    11c4:	78 94       	sei
    11c6:	0e 94 0c 06 	call	0xc18	; 0xc18 <OSSched>
    11ca:	08 95       	ret

000011cc <OSStatInit>:
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
    11d4:	f8 94       	cli
    11d6:	10 92 4b 06 	sts	0x064B, r1
    11da:	10 92 4c 06 	sts	0x064C, r1
    11de:	10 92 4d 06 	sts	0x064D, r1
    11e2:	10 92 4e 06 	sts	0x064E, r1
    11e6:	78 94       	sei
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
    11f0:	f8 94       	cli
    11f2:	80 91 4b 06 	lds	r24, 0x064B
    11f6:	90 91 4c 06 	lds	r25, 0x064C
    11fa:	a0 91 4d 06 	lds	r26, 0x064D
    11fe:	b0 91 4e 06 	lds	r27, 0x064E
    1202:	80 93 57 06 	sts	0x0657, r24
    1206:	90 93 58 06 	sts	0x0658, r25
    120a:	a0 93 59 06 	sts	0x0659, r26
    120e:	b0 93 5a 06 	sts	0x065A, r27
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 ff 06 	sts	0x06FF, r24
    1218:	78 94       	sei
    121a:	08 95       	ret

0000121c <OSTaskStat>:
    121c:	80 91 ff 06 	lds	r24, 0x06FF
    1220:	81 11       	cpse	r24, r1
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <OSTaskStat+0x18>
    1224:	80 e9       	ldi	r24, 0x90	; 144
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
    122c:	80 91 ff 06 	lds	r24, 0x06FF
    1230:	88 23       	and	r24, r24
    1232:	c1 f3       	breq	.-16     	; 0x1224 <OSTaskStat+0x8>
    1234:	c4 e6       	ldi	r28, 0x64	; 100
    1236:	f8 94       	cli
    1238:	20 91 4b 06 	lds	r18, 0x064B
    123c:	30 91 4c 06 	lds	r19, 0x064C
    1240:	40 91 4d 06 	lds	r20, 0x064D
    1244:	50 91 4e 06 	lds	r21, 0x064E
    1248:	20 93 80 07 	sts	0x0780, r18
    124c:	30 93 81 07 	sts	0x0781, r19
    1250:	40 93 82 07 	sts	0x0782, r20
    1254:	50 93 83 07 	sts	0x0783, r21
    1258:	10 92 4b 06 	sts	0x064B, r1
    125c:	10 92 4c 06 	sts	0x064C, r1
    1260:	10 92 4d 06 	sts	0x064D, r1
    1264:	10 92 4e 06 	sts	0x064E, r1
    1268:	78 94       	sei
    126a:	c0 90 57 06 	lds	r12, 0x0657
    126e:	d0 90 58 06 	lds	r13, 0x0658
    1272:	e0 90 59 06 	lds	r14, 0x0659
    1276:	f0 90 5a 06 	lds	r15, 0x065A
    127a:	c1 14       	cp	r12, r1
    127c:	d1 04       	cpc	r13, r1
    127e:	e1 04       	cpc	r14, r1
    1280:	f1 04       	cpc	r15, r1
    1282:	b9 f0       	breq	.+46     	; 0x12b2 <OSTaskStat+0x96>
    1284:	a4 e6       	ldi	r26, 0x64	; 100
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__muluhisi3>
    128c:	a7 01       	movw	r20, r14
    128e:	96 01       	movw	r18, r12
    1290:	0e 94 23 0b 	call	0x1646	; 0x1646 <__udivmodsi4>
    1294:	8c 2f       	mov	r24, r28
    1296:	82 1b       	sub	r24, r18
    1298:	85 36       	cpi	r24, 0x65	; 101
    129a:	1c f0       	brlt	.+6      	; 0x12a2 <OSTaskStat+0x86>
    129c:	c0 93 5d 06 	sts	0x065D, r28
    12a0:	0a c0       	rjmp	.+20     	; 0x12b6 <OSTaskStat+0x9a>
    12a2:	88 23       	and	r24, r24
    12a4:	1c f4       	brge	.+6      	; 0x12ac <OSTaskStat+0x90>
    12a6:	10 92 5d 06 	sts	0x065D, r1
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <OSTaskStat+0x9a>
    12ac:	80 93 5d 06 	sts	0x065D, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <OSTaskStat+0x9a>
    12b2:	10 92 5d 06 	sts	0x065D, r1
    12b6:	0e 94 15 05 	call	0xa2a	; 0xa2a <OSTaskStatHook>
    12ba:	88 ec       	ldi	r24, 0xC8	; 200
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 c7 08 	call	0x118e	; 0x118e <OSTimeDly>
    12c2:	b9 cf       	rjmp	.-142    	; 0x1236 <OSTaskStat+0x1a>

000012c4 <__subsf3>:
    12c4:	50 58       	subi	r21, 0x80	; 128

000012c6 <__addsf3>:
    12c6:	bb 27       	eor	r27, r27
    12c8:	aa 27       	eor	r26, r26
    12ca:	0e d0       	rcall	.+28     	; 0x12e8 <__addsf3x>
    12cc:	0b c1       	rjmp	.+534    	; 0x14e4 <__fp_round>
    12ce:	fc d0       	rcall	.+504    	; 0x14c8 <__fp_pscA>
    12d0:	30 f0       	brcs	.+12     	; 0x12de <__addsf3+0x18>
    12d2:	01 d1       	rcall	.+514    	; 0x14d6 <__fp_pscB>
    12d4:	20 f0       	brcs	.+8      	; 0x12de <__addsf3+0x18>
    12d6:	31 f4       	brne	.+12     	; 0x12e4 <__addsf3+0x1e>
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	11 f4       	brne	.+4      	; 0x12e0 <__addsf3+0x1a>
    12dc:	1e f4       	brtc	.+6      	; 0x12e4 <__addsf3+0x1e>
    12de:	f1 c0       	rjmp	.+482    	; 0x14c2 <__fp_nan>
    12e0:	0e f4       	brtc	.+2      	; 0x12e4 <__addsf3+0x1e>
    12e2:	e0 95       	com	r30
    12e4:	e7 fb       	bst	r30, 7
    12e6:	e7 c0       	rjmp	.+462    	; 0x14b6 <__fp_inf>

000012e8 <__addsf3x>:
    12e8:	e9 2f       	mov	r30, r25
    12ea:	0d d1       	rcall	.+538    	; 0x1506 <__fp_split3>
    12ec:	80 f3       	brcs	.-32     	; 0x12ce <__addsf3+0x8>
    12ee:	ba 17       	cp	r27, r26
    12f0:	62 07       	cpc	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	95 07       	cpc	r25, r21
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <__addsf3x+0x18>
    12fa:	71 f4       	brne	.+28     	; 0x1318 <__addsf3x+0x30>
    12fc:	9e f5       	brtc	.+102    	; 0x1364 <__addsf3x+0x7c>
    12fe:	25 c1       	rjmp	.+586    	; 0x154a <__fp_zero>
    1300:	0e f4       	brtc	.+2      	; 0x1304 <__addsf3x+0x1c>
    1302:	e0 95       	com	r30
    1304:	0b 2e       	mov	r0, r27
    1306:	ba 2f       	mov	r27, r26
    1308:	a0 2d       	mov	r26, r0
    130a:	0b 01       	movw	r0, r22
    130c:	b9 01       	movw	r22, r18
    130e:	90 01       	movw	r18, r0
    1310:	0c 01       	movw	r0, r24
    1312:	ca 01       	movw	r24, r20
    1314:	a0 01       	movw	r20, r0
    1316:	11 24       	eor	r1, r1
    1318:	ff 27       	eor	r31, r31
    131a:	59 1b       	sub	r21, r25
    131c:	99 f0       	breq	.+38     	; 0x1344 <__addsf3x+0x5c>
    131e:	59 3f       	cpi	r21, 0xF9	; 249
    1320:	50 f4       	brcc	.+20     	; 0x1336 <__addsf3x+0x4e>
    1322:	50 3e       	cpi	r21, 0xE0	; 224
    1324:	68 f1       	brcs	.+90     	; 0x1380 <__addsf3x+0x98>
    1326:	1a 16       	cp	r1, r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	a2 2f       	mov	r26, r18
    132c:	23 2f       	mov	r18, r19
    132e:	34 2f       	mov	r19, r20
    1330:	44 27       	eor	r20, r20
    1332:	58 5f       	subi	r21, 0xF8	; 248
    1334:	f3 cf       	rjmp	.-26     	; 0x131c <__addsf3x+0x34>
    1336:	46 95       	lsr	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	a7 95       	ror	r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	53 95       	inc	r21
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__addsf3x+0x4e>
    1344:	7e f4       	brtc	.+30     	; 0x1364 <__addsf3x+0x7c>
    1346:	1f 16       	cp	r1, r31
    1348:	ba 0b       	sbc	r27, r26
    134a:	62 0b       	sbc	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba f0       	brmi	.+46     	; 0x1380 <__addsf3x+0x98>
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	a1 f0       	breq	.+40     	; 0x137e <__addsf3x+0x96>
    1356:	ff 0f       	add	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	c2 f7       	brpl	.-16     	; 0x1352 <__addsf3x+0x6a>
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <__addsf3x+0x98>
    1364:	ba 0f       	add	r27, r26
    1366:	62 1f       	adc	r22, r18
    1368:	73 1f       	adc	r23, r19
    136a:	84 1f       	adc	r24, r20
    136c:	48 f4       	brcc	.+18     	; 0x1380 <__addsf3x+0x98>
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9e 3f       	cpi	r25, 0xFE	; 254
    137a:	08 f0       	brcs	.+2      	; 0x137e <__addsf3x+0x96>
    137c:	b3 cf       	rjmp	.-154    	; 0x12e4 <__addsf3+0x1e>
    137e:	93 95       	inc	r25
    1380:	88 0f       	add	r24, r24
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__addsf3x+0x9e>
    1384:	99 27       	eor	r25, r25
    1386:	ee 0f       	add	r30, r30
    1388:	97 95       	ror	r25
    138a:	87 95       	ror	r24
    138c:	08 95       	ret

0000138e <__divsf3>:
    138e:	0c d0       	rcall	.+24     	; 0x13a8 <__divsf3x>
    1390:	a9 c0       	rjmp	.+338    	; 0x14e4 <__fp_round>
    1392:	a1 d0       	rcall	.+322    	; 0x14d6 <__fp_pscB>
    1394:	40 f0       	brcs	.+16     	; 0x13a6 <__divsf3+0x18>
    1396:	98 d0       	rcall	.+304    	; 0x14c8 <__fp_pscA>
    1398:	30 f0       	brcs	.+12     	; 0x13a6 <__divsf3+0x18>
    139a:	21 f4       	brne	.+8      	; 0x13a4 <__divsf3+0x16>
    139c:	5f 3f       	cpi	r21, 0xFF	; 255
    139e:	19 f0       	breq	.+6      	; 0x13a6 <__divsf3+0x18>
    13a0:	8a c0       	rjmp	.+276    	; 0x14b6 <__fp_inf>
    13a2:	51 11       	cpse	r21, r1
    13a4:	d3 c0       	rjmp	.+422    	; 0x154c <__fp_szero>
    13a6:	8d c0       	rjmp	.+282    	; 0x14c2 <__fp_nan>

000013a8 <__divsf3x>:
    13a8:	ae d0       	rcall	.+348    	; 0x1506 <__fp_split3>
    13aa:	98 f3       	brcs	.-26     	; 0x1392 <__divsf3+0x4>

000013ac <__divsf3_pse>:
    13ac:	99 23       	and	r25, r25
    13ae:	c9 f3       	breq	.-14     	; 0x13a2 <__divsf3+0x14>
    13b0:	55 23       	and	r21, r21
    13b2:	b1 f3       	breq	.-20     	; 0x13a0 <__divsf3+0x12>
    13b4:	95 1b       	sub	r25, r21
    13b6:	55 0b       	sbc	r21, r21
    13b8:	bb 27       	eor	r27, r27
    13ba:	aa 27       	eor	r26, r26
    13bc:	62 17       	cp	r22, r18
    13be:	73 07       	cpc	r23, r19
    13c0:	84 07       	cpc	r24, r20
    13c2:	38 f0       	brcs	.+14     	; 0x13d2 <__divsf3_pse+0x26>
    13c4:	9f 5f       	subi	r25, 0xFF	; 255
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	44 1f       	adc	r20, r20
    13ce:	aa 1f       	adc	r26, r26
    13d0:	a9 f3       	breq	.-22     	; 0x13bc <__divsf3_pse+0x10>
    13d2:	33 d0       	rcall	.+102    	; 0x143a <__divsf3_pse+0x8e>
    13d4:	0e 2e       	mov	r0, r30
    13d6:	3a f0       	brmi	.+14     	; 0x13e6 <__divsf3_pse+0x3a>
    13d8:	e0 e8       	ldi	r30, 0x80	; 128
    13da:	30 d0       	rcall	.+96     	; 0x143c <__divsf3_pse+0x90>
    13dc:	91 50       	subi	r25, 0x01	; 1
    13de:	50 40       	sbci	r21, 0x00	; 0
    13e0:	e6 95       	lsr	r30
    13e2:	00 1c       	adc	r0, r0
    13e4:	ca f7       	brpl	.-14     	; 0x13d8 <__divsf3_pse+0x2c>
    13e6:	29 d0       	rcall	.+82     	; 0x143a <__divsf3_pse+0x8e>
    13e8:	fe 2f       	mov	r31, r30
    13ea:	27 d0       	rcall	.+78     	; 0x143a <__divsf3_pse+0x8e>
    13ec:	66 0f       	add	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	bb 1f       	adc	r27, r27
    13f4:	26 17       	cp	r18, r22
    13f6:	37 07       	cpc	r19, r23
    13f8:	48 07       	cpc	r20, r24
    13fa:	ab 07       	cpc	r26, r27
    13fc:	b0 e8       	ldi	r27, 0x80	; 128
    13fe:	09 f0       	breq	.+2      	; 0x1402 <__divsf3_pse+0x56>
    1400:	bb 0b       	sbc	r27, r27
    1402:	80 2d       	mov	r24, r0
    1404:	bf 01       	movw	r22, r30
    1406:	ff 27       	eor	r31, r31
    1408:	93 58       	subi	r25, 0x83	; 131
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	2a f0       	brmi	.+10     	; 0x1418 <__divsf3_pse+0x6c>
    140e:	9e 3f       	cpi	r25, 0xFE	; 254
    1410:	51 05       	cpc	r21, r1
    1412:	68 f0       	brcs	.+26     	; 0x142e <__divsf3_pse+0x82>
    1414:	50 c0       	rjmp	.+160    	; 0x14b6 <__fp_inf>
    1416:	9a c0       	rjmp	.+308    	; 0x154c <__fp_szero>
    1418:	5f 3f       	cpi	r21, 0xFF	; 255
    141a:	ec f3       	brlt	.-6      	; 0x1416 <__divsf3_pse+0x6a>
    141c:	98 3e       	cpi	r25, 0xE8	; 232
    141e:	dc f3       	brlt	.-10     	; 0x1416 <__divsf3_pse+0x6a>
    1420:	86 95       	lsr	r24
    1422:	77 95       	ror	r23
    1424:	67 95       	ror	r22
    1426:	b7 95       	ror	r27
    1428:	f7 95       	ror	r31
    142a:	9f 5f       	subi	r25, 0xFF	; 255
    142c:	c9 f7       	brne	.-14     	; 0x1420 <__divsf3_pse+0x74>
    142e:	88 0f       	add	r24, r24
    1430:	91 1d       	adc	r25, r1
    1432:	96 95       	lsr	r25
    1434:	87 95       	ror	r24
    1436:	97 f9       	bld	r25, 7
    1438:	08 95       	ret
    143a:	e1 e0       	ldi	r30, 0x01	; 1
    143c:	66 0f       	add	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	bb 1f       	adc	r27, r27
    1444:	62 17       	cp	r22, r18
    1446:	73 07       	cpc	r23, r19
    1448:	84 07       	cpc	r24, r20
    144a:	ba 07       	cpc	r27, r26
    144c:	20 f0       	brcs	.+8      	; 0x1456 <__divsf3_pse+0xaa>
    144e:	62 1b       	sub	r22, r18
    1450:	73 0b       	sbc	r23, r19
    1452:	84 0b       	sbc	r24, r20
    1454:	ba 0b       	sbc	r27, r26
    1456:	ee 1f       	adc	r30, r30
    1458:	88 f7       	brcc	.-30     	; 0x143c <__divsf3_pse+0x90>
    145a:	e0 95       	com	r30
    145c:	08 95       	ret

0000145e <__fixunssfsi>:
    145e:	5b d0       	rcall	.+182    	; 0x1516 <__fp_splitA>
    1460:	88 f0       	brcs	.+34     	; 0x1484 <__fixunssfsi+0x26>
    1462:	9f 57       	subi	r25, 0x7F	; 127
    1464:	90 f0       	brcs	.+36     	; 0x148a <__fixunssfsi+0x2c>
    1466:	b9 2f       	mov	r27, r25
    1468:	99 27       	eor	r25, r25
    146a:	b7 51       	subi	r27, 0x17	; 23
    146c:	a0 f0       	brcs	.+40     	; 0x1496 <__fixunssfsi+0x38>
    146e:	d1 f0       	breq	.+52     	; 0x14a4 <__fixunssfsi+0x46>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	1a f0       	brmi	.+6      	; 0x1480 <__fixunssfsi+0x22>
    147a:	ba 95       	dec	r27
    147c:	c9 f7       	brne	.-14     	; 0x1470 <__fixunssfsi+0x12>
    147e:	12 c0       	rjmp	.+36     	; 0x14a4 <__fixunssfsi+0x46>
    1480:	b1 30       	cpi	r27, 0x01	; 1
    1482:	81 f0       	breq	.+32     	; 0x14a4 <__fixunssfsi+0x46>
    1484:	62 d0       	rcall	.+196    	; 0x154a <__fp_zero>
    1486:	b1 e0       	ldi	r27, 0x01	; 1
    1488:	08 95       	ret
    148a:	5f c0       	rjmp	.+190    	; 0x154a <__fp_zero>
    148c:	67 2f       	mov	r22, r23
    148e:	78 2f       	mov	r23, r24
    1490:	88 27       	eor	r24, r24
    1492:	b8 5f       	subi	r27, 0xF8	; 248
    1494:	39 f0       	breq	.+14     	; 0x14a4 <__fixunssfsi+0x46>
    1496:	b9 3f       	cpi	r27, 0xF9	; 249
    1498:	cc f3       	brlt	.-14     	; 0x148c <__fixunssfsi+0x2e>
    149a:	86 95       	lsr	r24
    149c:	77 95       	ror	r23
    149e:	67 95       	ror	r22
    14a0:	b3 95       	inc	r27
    14a2:	d9 f7       	brne	.-10     	; 0x149a <__fixunssfsi+0x3c>
    14a4:	3e f4       	brtc	.+14     	; 0x14b4 <__fixunssfsi+0x56>
    14a6:	90 95       	com	r25
    14a8:	80 95       	com	r24
    14aa:	70 95       	com	r23
    14ac:	61 95       	neg	r22
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8f 4f       	sbci	r24, 0xFF	; 255
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__fp_inf>:
    14b6:	97 f9       	bld	r25, 7
    14b8:	9f 67       	ori	r25, 0x7F	; 127
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	08 95       	ret

000014c2 <__fp_nan>:
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	80 ec       	ldi	r24, 0xC0	; 192
    14c6:	08 95       	ret

000014c8 <__fp_pscA>:
    14c8:	00 24       	eor	r0, r0
    14ca:	0a 94       	dec	r0
    14cc:	16 16       	cp	r1, r22
    14ce:	17 06       	cpc	r1, r23
    14d0:	18 06       	cpc	r1, r24
    14d2:	09 06       	cpc	r0, r25
    14d4:	08 95       	ret

000014d6 <__fp_pscB>:
    14d6:	00 24       	eor	r0, r0
    14d8:	0a 94       	dec	r0
    14da:	12 16       	cp	r1, r18
    14dc:	13 06       	cpc	r1, r19
    14de:	14 06       	cpc	r1, r20
    14e0:	05 06       	cpc	r0, r21
    14e2:	08 95       	ret

000014e4 <__fp_round>:
    14e4:	09 2e       	mov	r0, r25
    14e6:	03 94       	inc	r0
    14e8:	00 0c       	add	r0, r0
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <__fp_round+0xc>
    14ec:	88 23       	and	r24, r24
    14ee:	52 f0       	brmi	.+20     	; 0x1504 <__fp_round+0x20>
    14f0:	bb 0f       	add	r27, r27
    14f2:	40 f4       	brcc	.+16     	; 0x1504 <__fp_round+0x20>
    14f4:	bf 2b       	or	r27, r31
    14f6:	11 f4       	brne	.+4      	; 0x14fc <__fp_round+0x18>
    14f8:	60 ff       	sbrs	r22, 0
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__fp_round+0x20>
    14fc:	6f 5f       	subi	r22, 0xFF	; 255
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	8f 4f       	sbci	r24, 0xFF	; 255
    1502:	9f 4f       	sbci	r25, 0xFF	; 255
    1504:	08 95       	ret

00001506 <__fp_split3>:
    1506:	57 fd       	sbrc	r21, 7
    1508:	90 58       	subi	r25, 0x80	; 128
    150a:	44 0f       	add	r20, r20
    150c:	55 1f       	adc	r21, r21
    150e:	59 f0       	breq	.+22     	; 0x1526 <__fp_splitA+0x10>
    1510:	5f 3f       	cpi	r21, 0xFF	; 255
    1512:	71 f0       	breq	.+28     	; 0x1530 <__fp_splitA+0x1a>
    1514:	47 95       	ror	r20

00001516 <__fp_splitA>:
    1516:	88 0f       	add	r24, r24
    1518:	97 fb       	bst	r25, 7
    151a:	99 1f       	adc	r25, r25
    151c:	61 f0       	breq	.+24     	; 0x1536 <__fp_splitA+0x20>
    151e:	9f 3f       	cpi	r25, 0xFF	; 255
    1520:	79 f0       	breq	.+30     	; 0x1540 <__fp_splitA+0x2a>
    1522:	87 95       	ror	r24
    1524:	08 95       	ret
    1526:	12 16       	cp	r1, r18
    1528:	13 06       	cpc	r1, r19
    152a:	14 06       	cpc	r1, r20
    152c:	55 1f       	adc	r21, r21
    152e:	f2 cf       	rjmp	.-28     	; 0x1514 <__fp_split3+0xe>
    1530:	46 95       	lsr	r20
    1532:	f1 df       	rcall	.-30     	; 0x1516 <__fp_splitA>
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <__fp_splitA+0x30>
    1536:	16 16       	cp	r1, r22
    1538:	17 06       	cpc	r1, r23
    153a:	18 06       	cpc	r1, r24
    153c:	99 1f       	adc	r25, r25
    153e:	f1 cf       	rjmp	.-30     	; 0x1522 <__fp_splitA+0xc>
    1540:	86 95       	lsr	r24
    1542:	71 05       	cpc	r23, r1
    1544:	61 05       	cpc	r22, r1
    1546:	08 94       	sec
    1548:	08 95       	ret

0000154a <__fp_zero>:
    154a:	e8 94       	clt

0000154c <__fp_szero>:
    154c:	bb 27       	eor	r27, r27
    154e:	66 27       	eor	r22, r22
    1550:	77 27       	eor	r23, r23
    1552:	cb 01       	movw	r24, r22
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__mulsf3>:
    1558:	0b d0       	rcall	.+22     	; 0x1570 <__mulsf3x>
    155a:	c4 cf       	rjmp	.-120    	; 0x14e4 <__fp_round>
    155c:	b5 df       	rcall	.-150    	; 0x14c8 <__fp_pscA>
    155e:	28 f0       	brcs	.+10     	; 0x156a <__mulsf3+0x12>
    1560:	ba df       	rcall	.-140    	; 0x14d6 <__fp_pscB>
    1562:	18 f0       	brcs	.+6      	; 0x156a <__mulsf3+0x12>
    1564:	95 23       	and	r25, r21
    1566:	09 f0       	breq	.+2      	; 0x156a <__mulsf3+0x12>
    1568:	a6 cf       	rjmp	.-180    	; 0x14b6 <__fp_inf>
    156a:	ab cf       	rjmp	.-170    	; 0x14c2 <__fp_nan>
    156c:	11 24       	eor	r1, r1
    156e:	ee cf       	rjmp	.-36     	; 0x154c <__fp_szero>

00001570 <__mulsf3x>:
    1570:	ca df       	rcall	.-108    	; 0x1506 <__fp_split3>
    1572:	a0 f3       	brcs	.-24     	; 0x155c <__mulsf3+0x4>

00001574 <__mulsf3_pse>:
    1574:	95 9f       	mul	r25, r21
    1576:	d1 f3       	breq	.-12     	; 0x156c <__mulsf3+0x14>
    1578:	95 0f       	add	r25, r21
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	55 1f       	adc	r21, r21
    157e:	62 9f       	mul	r22, r18
    1580:	f0 01       	movw	r30, r0
    1582:	72 9f       	mul	r23, r18
    1584:	bb 27       	eor	r27, r27
    1586:	f0 0d       	add	r31, r0
    1588:	b1 1d       	adc	r27, r1
    158a:	63 9f       	mul	r22, r19
    158c:	aa 27       	eor	r26, r26
    158e:	f0 0d       	add	r31, r0
    1590:	b1 1d       	adc	r27, r1
    1592:	aa 1f       	adc	r26, r26
    1594:	64 9f       	mul	r22, r20
    1596:	66 27       	eor	r22, r22
    1598:	b0 0d       	add	r27, r0
    159a:	a1 1d       	adc	r26, r1
    159c:	66 1f       	adc	r22, r22
    159e:	82 9f       	mul	r24, r18
    15a0:	22 27       	eor	r18, r18
    15a2:	b0 0d       	add	r27, r0
    15a4:	a1 1d       	adc	r26, r1
    15a6:	62 1f       	adc	r22, r18
    15a8:	73 9f       	mul	r23, r19
    15aa:	b0 0d       	add	r27, r0
    15ac:	a1 1d       	adc	r26, r1
    15ae:	62 1f       	adc	r22, r18
    15b0:	83 9f       	mul	r24, r19
    15b2:	a0 0d       	add	r26, r0
    15b4:	61 1d       	adc	r22, r1
    15b6:	22 1f       	adc	r18, r18
    15b8:	74 9f       	mul	r23, r20
    15ba:	33 27       	eor	r19, r19
    15bc:	a0 0d       	add	r26, r0
    15be:	61 1d       	adc	r22, r1
    15c0:	23 1f       	adc	r18, r19
    15c2:	84 9f       	mul	r24, r20
    15c4:	60 0d       	add	r22, r0
    15c6:	21 1d       	adc	r18, r1
    15c8:	82 2f       	mov	r24, r18
    15ca:	76 2f       	mov	r23, r22
    15cc:	6a 2f       	mov	r22, r26
    15ce:	11 24       	eor	r1, r1
    15d0:	9f 57       	subi	r25, 0x7F	; 127
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	8a f0       	brmi	.+34     	; 0x15f8 <__mulsf3_pse+0x84>
    15d6:	e1 f0       	breq	.+56     	; 0x1610 <__mulsf3_pse+0x9c>
    15d8:	88 23       	and	r24, r24
    15da:	4a f0       	brmi	.+18     	; 0x15ee <__mulsf3_pse+0x7a>
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	bb 1f       	adc	r27, r27
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	a9 f7       	brne	.-22     	; 0x15d8 <__mulsf3_pse+0x64>
    15ee:	9e 3f       	cpi	r25, 0xFE	; 254
    15f0:	51 05       	cpc	r21, r1
    15f2:	70 f0       	brcs	.+28     	; 0x1610 <__mulsf3_pse+0x9c>
    15f4:	60 cf       	rjmp	.-320    	; 0x14b6 <__fp_inf>
    15f6:	aa cf       	rjmp	.-172    	; 0x154c <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	ec f3       	brlt	.-6      	; 0x15f6 <__mulsf3_pse+0x82>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	dc f3       	brlt	.-10     	; 0x15f6 <__mulsf3_pse+0x82>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x8c>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__divmodhi4>:
    161e:	97 fb       	bst	r25, 7
    1620:	07 2e       	mov	r0, r23
    1622:	16 f4       	brtc	.+4      	; 0x1628 <__divmodhi4+0xa>
    1624:	00 94       	com	r0
    1626:	07 d0       	rcall	.+14     	; 0x1636 <__divmodhi4_neg1>
    1628:	77 fd       	sbrc	r23, 7
    162a:	09 d0       	rcall	.+18     	; 0x163e <__divmodhi4_neg2>
    162c:	0e 94 5f 0b 	call	0x16be	; 0x16be <__udivmodhi4>
    1630:	07 fc       	sbrc	r0, 7
    1632:	05 d0       	rcall	.+10     	; 0x163e <__divmodhi4_neg2>
    1634:	3e f4       	brtc	.+14     	; 0x1644 <__divmodhi4_exit>

00001636 <__divmodhi4_neg1>:
    1636:	90 95       	com	r25
    1638:	81 95       	neg	r24
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	08 95       	ret

0000163e <__divmodhi4_neg2>:
    163e:	70 95       	com	r23
    1640:	61 95       	neg	r22
    1642:	7f 4f       	sbci	r23, 0xFF	; 255

00001644 <__divmodhi4_exit>:
    1644:	08 95       	ret

00001646 <__udivmodsi4>:
    1646:	a1 e2       	ldi	r26, 0x21	; 33
    1648:	1a 2e       	mov	r1, r26
    164a:	aa 1b       	sub	r26, r26
    164c:	bb 1b       	sub	r27, r27
    164e:	fd 01       	movw	r30, r26
    1650:	0d c0       	rjmp	.+26     	; 0x166c <__udivmodsi4_ep>

00001652 <__udivmodsi4_loop>:
    1652:	aa 1f       	adc	r26, r26
    1654:	bb 1f       	adc	r27, r27
    1656:	ee 1f       	adc	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	a2 17       	cp	r26, r18
    165c:	b3 07       	cpc	r27, r19
    165e:	e4 07       	cpc	r30, r20
    1660:	f5 07       	cpc	r31, r21
    1662:	20 f0       	brcs	.+8      	; 0x166c <__udivmodsi4_ep>
    1664:	a2 1b       	sub	r26, r18
    1666:	b3 0b       	sbc	r27, r19
    1668:	e4 0b       	sbc	r30, r20
    166a:	f5 0b       	sbc	r31, r21

0000166c <__udivmodsi4_ep>:
    166c:	66 1f       	adc	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	1a 94       	dec	r1
    1676:	69 f7       	brne	.-38     	; 0x1652 <__udivmodsi4_loop>
    1678:	60 95       	com	r22
    167a:	70 95       	com	r23
    167c:	80 95       	com	r24
    167e:	90 95       	com	r25
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	bd 01       	movw	r22, r26
    1686:	cf 01       	movw	r24, r30
    1688:	08 95       	ret

0000168a <__umulhisi3>:
    168a:	a2 9f       	mul	r26, r18
    168c:	b0 01       	movw	r22, r0
    168e:	b3 9f       	mul	r27, r19
    1690:	c0 01       	movw	r24, r0
    1692:	a3 9f       	mul	r26, r19
    1694:	70 0d       	add	r23, r0
    1696:	81 1d       	adc	r24, r1
    1698:	11 24       	eor	r1, r1
    169a:	91 1d       	adc	r25, r1
    169c:	b2 9f       	mul	r27, r18
    169e:	70 0d       	add	r23, r0
    16a0:	81 1d       	adc	r24, r1
    16a2:	11 24       	eor	r1, r1
    16a4:	91 1d       	adc	r25, r1
    16a6:	08 95       	ret

000016a8 <__muluhisi3>:
    16a8:	0e 94 45 0b 	call	0x168a	; 0x168a <__umulhisi3>
    16ac:	a5 9f       	mul	r26, r21
    16ae:	90 0d       	add	r25, r0
    16b0:	b4 9f       	mul	r27, r20
    16b2:	90 0d       	add	r25, r0
    16b4:	a4 9f       	mul	r26, r20
    16b6:	80 0d       	add	r24, r0
    16b8:	91 1d       	adc	r25, r1
    16ba:	11 24       	eor	r1, r1
    16bc:	08 95       	ret

000016be <__udivmodhi4>:
    16be:	aa 1b       	sub	r26, r26
    16c0:	bb 1b       	sub	r27, r27
    16c2:	51 e1       	ldi	r21, 0x11	; 17
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <__udivmodhi4_ep>

000016c6 <__udivmodhi4_loop>:
    16c6:	aa 1f       	adc	r26, r26
    16c8:	bb 1f       	adc	r27, r27
    16ca:	a6 17       	cp	r26, r22
    16cc:	b7 07       	cpc	r27, r23
    16ce:	10 f0       	brcs	.+4      	; 0x16d4 <__udivmodhi4_ep>
    16d0:	a6 1b       	sub	r26, r22
    16d2:	b7 0b       	sbc	r27, r23

000016d4 <__udivmodhi4_ep>:
    16d4:	88 1f       	adc	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	5a 95       	dec	r21
    16da:	a9 f7       	brne	.-22     	; 0x16c6 <__udivmodhi4_loop>
    16dc:	80 95       	com	r24
    16de:	90 95       	com	r25
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	08 95       	ret

000016e6 <strcpy>:
    16e6:	fb 01       	movw	r30, r22
    16e8:	dc 01       	movw	r26, r24
    16ea:	01 90       	ld	r0, Z+
    16ec:	0d 92       	st	X+, r0
    16ee:	00 20       	and	r0, r0
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <strcpy+0x4>
    16f2:	08 95       	ret

000016f4 <_exit>:
    16f4:	f8 94       	cli

000016f6 <__stop_program>:
    16f6:	ff cf       	rjmp	.-2      	; 0x16f6 <__stop_program>
