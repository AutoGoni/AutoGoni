
Lab2_Blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005fe  00800248  00800248  00000fe0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001010  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f67  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  0000318f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000935  00000000  00000000  000038fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000046c  00000000  00000000  00004230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000089f  00000000  00000000  0000469c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014c1  00000000  00000000  00004f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <OSTickISR>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <SerTxISR>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <main>
  9e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <OSStartHighRdy>:
  a6:	00 91 0c 07 	lds	r16, 0x070C
  aa:	03 95       	inc	r16
  ac:	00 93 0c 07 	sts	0x070C, r16
  b0:	e0 91 21 07 	lds	r30, 0x0721
  b4:	f0 91 22 07 	lds	r31, 0x0722
  b8:	c1 91       	ld	r28, Z+
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	d1 91       	ld	r29, Z+
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f 91       	pop	r16
  c2:	0f bf       	out	0x3f, r16	; 63
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	bf 91       	pop	r27
  ce:	af 91       	pop	r26
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	7f 91       	pop	r23
  d6:	6f 91       	pop	r22
  d8:	5f 91       	pop	r21
  da:	4f 91       	pop	r20
  dc:	3f 91       	pop	r19
  de:	2f 91       	pop	r18
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	af 90       	pop	r10
  f0:	9f 90       	pop	r9
  f2:	8f 90       	pop	r8
  f4:	7f 90       	pop	r7
  f6:	6f 90       	pop	r6
  f8:	5f 90       	pop	r5
  fa:	4f 90       	pop	r4
  fc:	3f 90       	pop	r3
  fe:	2f 90       	pop	r2
 100:	1f 90       	pop	r1
 102:	0f 90       	pop	r0
 104:	08 95       	ret

00000106 <OSCtxSw>:
 106:	0f 92       	push	r0
 108:	1f 92       	push	r1
 10a:	2f 92       	push	r2
 10c:	3f 92       	push	r3
 10e:	4f 92       	push	r4
 110:	5f 92       	push	r5
 112:	6f 92       	push	r6
 114:	7f 92       	push	r7
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
 146:	0f b7       	in	r16, 0x3f	; 63
 148:	0f 93       	push	r16
 14a:	e0 91 2f 07 	lds	r30, 0x072F
 14e:	f0 91 30 07 	lds	r31, 0x0730
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	c1 93       	st	Z+, r28
 156:	de b7       	in	r29, 0x3e	; 62
 158:	d1 93       	st	Z+, r29
 15a:	00 91 11 07 	lds	r16, 0x0711
 15e:	00 93 12 07 	sts	0x0712, r16
 162:	e0 91 21 07 	lds	r30, 0x0721
 166:	f0 91 22 07 	lds	r31, 0x0722
 16a:	e0 93 2f 07 	sts	0x072F, r30
 16e:	f0 93 30 07 	sts	0x0730, r31
 172:	c1 91       	ld	r28, Z+
 174:	cd bf       	out	0x3d, r28	; 61
 176:	d1 91       	ld	r29, Z+
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f 91       	pop	r16
 17c:	0f bf       	out	0x3f, r16	; 63
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	af 90       	pop	r10
 1aa:	9f 90       	pop	r9
 1ac:	8f 90       	pop	r8
 1ae:	7f 90       	pop	r7
 1b0:	6f 90       	pop	r6
 1b2:	5f 90       	pop	r5
 1b4:	4f 90       	pop	r4
 1b6:	3f 90       	pop	r3
 1b8:	2f 90       	pop	r2
 1ba:	1f 90       	pop	r1
 1bc:	0f 90       	pop	r0
 1be:	08 95       	ret

000001c0 <OSIntCtxSw>:
 1c0:	00 91 11 07 	lds	r16, 0x0711
 1c4:	00 93 12 07 	sts	0x0712, r16
 1c8:	e0 91 21 07 	lds	r30, 0x0721
 1cc:	f0 91 22 07 	lds	r31, 0x0722
 1d0:	e0 93 2f 07 	sts	0x072F, r30
 1d4:	f0 93 30 07 	sts	0x0730, r31
 1d8:	c1 91       	ld	r28, Z+
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	d1 91       	ld	r29, Z+
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f 91       	pop	r16
 1e2:	0f bf       	out	0x3f, r16	; 63
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	ff 90       	pop	r15
 206:	ef 90       	pop	r14
 208:	df 90       	pop	r13
 20a:	cf 90       	pop	r12
 20c:	bf 90       	pop	r11
 20e:	af 90       	pop	r10
 210:	9f 90       	pop	r9
 212:	8f 90       	pop	r8
 214:	7f 90       	pop	r7
 216:	6f 90       	pop	r6
 218:	5f 90       	pop	r5
 21a:	4f 90       	pop	r4
 21c:	3f 90       	pop	r3
 21e:	2f 90       	pop	r2
 220:	1f 90       	pop	r1
 222:	0f 90       	pop	r0
 224:	08 95       	ret

00000226 <OSTickISR>:
 226:	0f 92       	push	r0
 228:	1f 92       	push	r1
 22a:	2f 92       	push	r2
 22c:	3f 92       	push	r3
 22e:	4f 92       	push	r4
 230:	5f 92       	push	r5
 232:	6f 92       	push	r6
 234:	7f 92       	push	r7
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
 266:	0f b7       	in	r16, 0x3f	; 63
 268:	00 68       	ori	r16, 0x80	; 128
 26a:	0f 93       	push	r16
 26c:	00 91 2e 07 	lds	r16, 0x072E
 270:	03 95       	inc	r16
 272:	00 93 2e 07 	sts	0x072E, r16
 276:	01 30       	cpi	r16, 0x01	; 1
 278:	41 f4       	brne	.+16     	; 0x28a <_not_first_int>
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	e0 91 2f 07 	lds	r30, 0x072F
 282:	f0 91 30 07 	lds	r31, 0x0730
 286:	c1 93       	st	Z+, r28
 288:	d1 93       	st	Z+, r29

0000028a <_not_first_int>:
 28a:	09 ed       	ldi	r16, 0xD9	; 217
 28c:	06 bd       	out	0x26, r16	; 38
 28e:	78 94       	sei
 290:	0e 94 9d 04 	call	0x93a	; 0x93a <OSTimeTick>
 294:	00 00       	nop
 296:	0e 94 87 03 	call	0x70e	; 0x70e <OSIntExit>
 29a:	0f 91       	pop	r16
 29c:	0f bf       	out	0x3f, r16	; 63
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	9f 90       	pop	r9
 2cc:	8f 90       	pop	r8
 2ce:	7f 90       	pop	r7
 2d0:	6f 90       	pop	r6
 2d2:	5f 90       	pop	r5
 2d4:	4f 90       	pop	r4
 2d6:	3f 90       	pop	r3
 2d8:	2f 90       	pop	r2
 2da:	1f 90       	pop	r1
 2dc:	0f 90       	pop	r0
 2de:	08 95       	ret

000002e0 <WatchDogReset>:
 2e0:	a8 95       	wdr
 2e2:	08 95       	ret

000002e4 <SerTxISR>:
 2e4:	08 95       	ret

000002e6 <TaskStart>:
{
	
	char *sys_on_str = "uCOS ON\r\n---\r\n";			//helps see when the system turns on
    pdata = pdata;                                         /* Prevent compiler warning                 */
	
	OSStatInit();                                          /* Initialize uC/OS-II's statistics         */
 2e6:	0e 94 41 06 	call	0xc82	; 0xc82 <OSStatInit>
	
	OSTaskCreate(TimerTask, (void *)0, &TaskTimerStk[TRANSMIT_TASK_STK_SIZE - 1], 11);
 2ea:	2b e0       	ldi	r18, 0x0B	; 11
 2ec:	46 e0       	ldi	r20, 0x06	; 6
 2ee:	55 e0       	ldi	r21, 0x05	; 5
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	8b ed       	ldi	r24, 0xDB	; 219
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>

	//OSTaskCreate(LedTask, (void *) 0, &TaskLedStk[TASK_STK_SIZE - 1], 10);
	
	OSTaskCreate(SerialTransmitTask, (void *) 0, &SerialTransmitTaskStk[TRANSMIT_TASK_STK_SIZE-1], 20);
 2fc:	24 e1       	ldi	r18, 0x14	; 20
 2fe:	48 e8       	ldi	r20, 0x88	; 136
 300:	55 e0       	ldi	r21, 0x05	; 5
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	81 e5       	ldi	r24, 0x51	; 81
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
	
	
	OSTaskCreate(AngleMeasurementTask, (void *) 0, &AngleMeasurementTaskStk[TRANSMIT_TASK_STK_SIZE-1], 18);
 30e:	22 e1       	ldi	r18, 0x12	; 18
 310:	4e ef       	ldi	r20, 0xFE	; 254
 312:	53 e0       	ldi	r21, 0x03	; 3
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
	OSTaskCreate(ScreenDetectorTask, (void *) 0, &ScreenDetectorTaskStk[TRANSMIT_TASK_STK_SIZE-1], 19);
 320:	23 e1       	ldi	r18, 0x13	; 19
 322:	48 e0       	ldi	r20, 0x08	; 8
 324:	56 e0       	ldi	r21, 0x06	; 6
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	81 ed       	ldi	r24, 0xD1	; 209
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
	OSTaskCreate(ButtonDetectorTask, (void *) 0, &ButtonDetectorTaskStk[TRANSMIT_TASK_STK_SIZE-1], 21);	
 332:	25 e1       	ldi	r18, 0x15	; 21
 334:	40 e8       	ldi	r20, 0x80	; 128
 336:	54 e0       	ldi	r21, 0x04	; 4
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 ec       	ldi	r24, 0xC5	; 197
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
	OSTaskCreate(GyroDetectorTask, (void *) 0, &GyroDetectorTaskStk[TRANSMIT_TASK_STK_SIZE-1], 17);
 344:	21 e1       	ldi	r18, 0x11	; 17
 346:	4a e0       	ldi	r20, 0x0A	; 10
 348:	57 e0       	ldi	r21, 0x07	; 7
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	86 ed       	ldi	r24, 0xD6	; 214
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
	OSMboxPost(SerialTxMBox, (void *)sys_on_str);	//tell the user debugging that we're on!
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	71 e0       	ldi	r23, 0x01	; 1
 35a:	80 91 85 04 	lds	r24, 0x0485
 35e:	90 91 86 04 	lds	r25, 0x0486
 362:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>

    for (;;) {	
        OSCtxSwCtr = 0;                         /* Clear context switch counter             */
 366:	10 92 15 07 	sts	0x0715, r1
 36a:	10 92 16 07 	sts	0x0716, r1
 36e:	10 92 17 07 	sts	0x0717, r1
 372:	10 92 18 07 	sts	0x0718, r1
        OSTimeDly(OS_TICKS_PER_SEC);			/* Wait one second                          */
 376:	88 ec       	ldi	r24, 0xC8	; 200
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 37e:	f3 cf       	rjmp	.-26     	; 0x366 <TaskStart+0x80>

00000380 <AngleMeasurementTask>:
	}
}

void  AngleMeasurementTask (void *pdata){
	for(;;){
		OSTimeDly(1*OS_TICKS_PER_SEC);
 380:	88 ec       	ldi	r24, 0xC8	; 200
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 388:	fb cf       	rjmp	.-10     	; 0x380 <AngleMeasurementTask>

0000038a <ButtonDetectorTask>:
	//PORTD |= (1<<PD2);    //Activate pull-ups in PORTD pin 2
	
	
	
	for(;;){
		OSTimeDly(0.01*OS_TICKS_PER_SEC);
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
		
		//itoa(buttonState, msg, tmp);
		//OSMboxPost(SerialTxMBox, (void *)buttonState);
		tmp = 100;
		
		if(buttonState == 0)
 392:	4a 99       	sbic	0x09, 2	; 9
 394:	fa cf       	rjmp	.-12     	; 0x38a <ButtonDetectorTask>
		{        
			//If the button was pressed
			PINB |= _BV(PORTB5); // toggle led
 396:	1d 9a       	sbi	0x03, 5	; 3
			OSTimeDly(1*OS_TICKS_PER_SEC);
 398:	88 ec       	ldi	r24, 0xC8	; 200
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 3a0:	f4 cf       	rjmp	.-24     	; 0x38a <ButtonDetectorTask>

000003a2 <ScreenDetectorTask>:
}


void ScreenDetectorTask(void *pdata){
	for(;;){
		OSTimeDly(1*OS_TICKS_PER_SEC);
 3a2:	88 ec       	ldi	r24, 0xC8	; 200
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 3aa:	fb cf       	rjmp	.-10     	; 0x3a2 <ScreenDetectorTask>

000003ac <GyroDetectorTask>:
}
	

void GyroDetectorTask(void *pdata){
		for(;;){
		OSTimeDly(1*OS_TICKS_PER_SEC);
 3ac:	88 ec       	ldi	r24, 0xC8	; 200
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 3b4:	fb cf       	rjmp	.-10     	; 0x3ac <GyroDetectorTask>

000003b6 <TimerTask>:
 *                                                  TimerTASK
 *********************************************************************************************************
 */

void  TimerTask (void *pdata)
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	69 97       	sbiw	r28, 0x19	; 25
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	f8 94       	cli
 3c4:	de bf       	out	0x3e, r29	; 62
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	cd bf       	out	0x3d, r28	; 61
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = HIGH_PRIORITY_ERROR;
 3ca:	68 94       	set
 3cc:	dd 24       	eor	r13, r13
 3ce:	d1 f8       	bld	r13, 1
		OSMboxPost(LedMBox, (void *)&tmp);
		strcpy(TextMessage, "HIGH ERR STATE\n\r");
 3d0:	0f 2e       	mov	r0, r31
 3d2:	f1 e1       	ldi	r31, 0x11	; 17
 3d4:	ef 2e       	mov	r14, r31
 3d6:	f0 2d       	mov	r31, r0
		OSMboxPost(SerialTxMBox, (void *)TextMessage);

		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = MEDIUM_PRIORITY_ERROR;
 3d8:	ff 24       	eor	r15, r15
 3da:	f3 94       	inc	r15
		OSMboxPost(LedMBox, (void *)&tmp);	
		strcpy(TextMessage, "MED ERR STATE\n\r");
 3dc:	00 e1       	ldi	r16, 0x10	; 16
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
		tmp = NO_SYSTEM_ERROR;
		OSMboxPost(LedMBox, (void *)&tmp);
		strcpy(TextMessage, "NO ERR STATE\n\r");
 3de:	1f e0       	ldi	r17, 0x0F	; 15
	INT16U Message;
	INT8U tmp;
	char  TextMessage[TRANSMIT_BUFFER_SIZE];
	
    for (;;) {
		OSTimeDly (10*OS_TICKS_PER_SEC);
 3e0:	80 ed       	ldi	r24, 0xD0	; 208
 3e2:	97 e0       	ldi	r25, 0x07	; 7
 3e4:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
		tmp = HIGH_PRIORITY_ERROR;
 3e8:	d9 82       	std	Y+1, r13	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
 3ea:	be 01       	movw	r22, r28
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	80 91 7d 03 	lds	r24, 0x037D
 3f4:	90 91 7e 03 	lds	r25, 0x037E
 3f8:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>
		strcpy(TextMessage, "HIGH ERR STATE\n\r");
 3fc:	ef e0       	ldi	r30, 0x0F	; 15
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	de 01       	movw	r26, r28
 402:	12 96       	adiw	r26, 0x02	; 2
 404:	8e 2d       	mov	r24, r14
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	8a 95       	dec	r24
 40c:	e1 f7       	brne	.-8      	; 0x406 <TimerTask+0x50>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
 40e:	be 01       	movw	r22, r28
 410:	6e 5f       	subi	r22, 0xFE	; 254
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	80 91 85 04 	lds	r24, 0x0485
 418:	90 91 86 04 	lds	r25, 0x0486
 41c:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>

		OSTimeDly (10*OS_TICKS_PER_SEC);
 420:	80 ed       	ldi	r24, 0xD0	; 208
 422:	97 e0       	ldi	r25, 0x07	; 7
 424:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
		tmp = MEDIUM_PRIORITY_ERROR;
 428:	f9 82       	std	Y+1, r15	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);	
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	80 91 7d 03 	lds	r24, 0x037D
 434:	90 91 7e 03 	lds	r25, 0x037E
 438:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>
		strcpy(TextMessage, "MED ERR STATE\n\r");
 43c:	e0 e2       	ldi	r30, 0x20	; 32
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	de 01       	movw	r26, r28
 442:	12 96       	adiw	r26, 0x02	; 2
 444:	80 2f       	mov	r24, r16
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <TimerTask+0x90>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
 44e:	be 01       	movw	r22, r28
 450:	6e 5f       	subi	r22, 0xFE	; 254
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	80 91 85 04 	lds	r24, 0x0485
 458:	90 91 86 04 	lds	r25, 0x0486
 45c:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>
	
		OSTimeDly (10*OS_TICKS_PER_SEC);
 460:	80 ed       	ldi	r24, 0xD0	; 208
 462:	97 e0       	ldi	r25, 0x07	; 7
 464:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
		tmp = NO_SYSTEM_ERROR;
 468:	19 82       	std	Y+1, r1	; 0x01
		OSMboxPost(LedMBox, (void *)&tmp);
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	80 91 7d 03 	lds	r24, 0x037D
 474:	90 91 7e 03 	lds	r25, 0x037E
 478:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>
		strcpy(TextMessage, "NO ERR STATE\n\r");
 47c:	e0 e3       	ldi	r30, 0x30	; 48
 47e:	f1 e0       	ldi	r31, 0x01	; 1
 480:	de 01       	movw	r26, r28
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	81 2f       	mov	r24, r17
 486:	01 90       	ld	r0, Z+
 488:	0d 92       	st	X+, r0
 48a:	8a 95       	dec	r24
 48c:	e1 f7       	brne	.-8      	; 0x486 <TimerTask+0xd0>
		OSMboxPost(SerialTxMBox, (void *)TextMessage);
 48e:	be 01       	movw	r22, r28
 490:	6e 5f       	subi	r22, 0xFE	; 254
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	80 91 85 04 	lds	r24, 0x0485
 498:	90 91 86 04 	lds	r25, 0x0486
 49c:	0e 94 14 05 	call	0xa28	; 0xa28 <OSMboxPost>
 4a0:	9f cf       	rjmp	.-194    	; 0x3e0 <TimerTask+0x2a>

000004a2 <SerialTransmitTask>:
		}
    }
}

void  SerialTransmitTask (void *pdata)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	68 97       	sbiw	r28, 0x18	; 24
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
			
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
 4b6:	00 e0       	ldi	r16, 0x00	; 0
	INT8U str_index;
	INT16U StringLength;
	char TextMessage[TRANSMIT_BUFFER_SIZE];
	
	for (;;) {
		OSTimeDly (1*OS_TICKS_PER_SEC);
 4b8:	88 ec       	ldi	r24, 0xC8	; 200
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
		msg = OSMboxAccept(SerialTxMBox);
 4c0:	80 91 85 04 	lds	r24, 0x0485
 4c4:	90 91 86 04 	lds	r25, 0x0486
 4c8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <OSMboxAccept>
		
		if(msg != NULL){
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	a1 f3       	breq	.-24     	; 0x4b8 <SerialTransmitTask+0x16>
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
 4d0:	bc 01       	movw	r22, r24
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <strcpy>
			
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	88 23       	and	r24, r24
 4de:	61 f3       	breq	.-40     	; 0x4b8 <SerialTransmitTask+0x16>
 4e0:	10 2f       	mov	r17, r16
				USART_Transmit(TextMessage[str_index]);
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <USART_Transmit>
		msg = OSMboxAccept(SerialTxMBox);
		
		if(msg != NULL){
			strcpy(TextMessage, msg);	//copy the contents of the passed pointer to the new local string
			
			for(str_index=0;TextMessage[str_index]!='\0';str_index++){ //print the string
 4e8:	1f 5f       	subi	r17, 0xFF	; 255
 4ea:	e1 e0       	ldi	r30, 0x01	; 1
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ec 0f       	add	r30, r28
 4f0:	fd 1f       	adc	r31, r29
 4f2:	e1 0f       	add	r30, r17
 4f4:	f1 1d       	adc	r31, r1
 4f6:	80 81       	ld	r24, Z
 4f8:	81 11       	cpse	r24, r1
 4fa:	f3 cf       	rjmp	.-26     	; 0x4e2 <SerialTransmitTask+0x40>
 4fc:	dd cf       	rjmp	.-70     	; 0x4b8 <SerialTransmitTask+0x16>

000004fe <main>:
 *                                                MAIN
 *********************************************************************************************************
 */
int main (void)
{
	InitPeripherals();
 4fe:	0e 94 a1 02 	call	0x542	; 0x542 <InitPeripherals>
	
    OSInit();                                              /* Initialize uC/OS-II                      */
 502:	0e 94 a0 05 	call	0xb40	; 0xb40 <OSInit>
	
	USART_Init();
 506:	0e 94 c5 02 	call	0x58a	; 0x58a <USART_Init>

/* Create OS_EVENT resources here  */

	LedMBox = OSMboxCreate((void *)0);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <OSMboxCreate>
 512:	90 93 7e 03 	sts	0x037E, r25
 516:	80 93 7d 03 	sts	0x037D, r24
	SerialTxMBox = OSMboxCreate((void *)0);
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <OSMboxCreate>
 522:	90 93 86 04 	sts	0x0486, r25
 526:	80 93 85 04 	sts	0x0485, r24
	
/* END Create OS_EVENT resources   */

    OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	48 e8       	ldi	r20, 0x88	; 136
 52e:	56 e0       	ldi	r21, 0x06	; 6
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	83 e7       	ldi	r24, 0x73	; 115
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
	
    OSStart();                                             /* Start multitasking                       */
 53c:	0e 94 12 04 	call	0x824	; 0x824 <OSStart>
 540:	ff cf       	rjmp	.-2      	; 0x540 <main+0x42>

00000542 <InitPeripherals>:

void InitPeripherals(void)
{

	// manage WDT
	cli();	
 542:	f8 94       	cli
	WatchDogReset();
 544:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WatchDogReset>
	MCUSR &= ~(1<<WDRF);			// clear WDRF in MCUSR
 548:	84 b7       	in	r24, 0x34	; 52
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE)|(1<<WDE)|0x08;	// write a logic one to WDCE and WDE and keep old prescalar setting to prevent unintentional timeout
 54e:	e0 e6       	ldi	r30, 0x60	; 96
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	88 61       	ori	r24, 0x18	; 24
 556:	80 83       	st	Z, r24
	WDTCSR=0x00;					// turn wdt off
 558:	10 82       	st	Z, r1

	
	// PortB: set 
	//
	PORTB &= ~_BV(PORTB5); // set pin 5 (Arduino DIO pin 13) low to turn led off
 55a:	2d 98       	cbi	0x05, 5	; 5
	PORTB &= ~_BV(PORTB4); // set pin 4 low to turn led off
 55c:	2c 98       	cbi	0x05, 4	; 5
	DDRB |= _BV(DDB5); // set pin 5 of PORTB for output
 55e:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~_BV(DDB4); // set pin 4 of PORTB for INPUT
 560:	24 98       	cbi	0x04, 4	; 4
	
	/*EXAMPLE FROM ONLINE*/
	//DDRB = 0xFF;  //set port b to output
	
	DDRD &= ~(1<<PIND2);    //Configure PORTD pin 2 as an input
 562:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PIND2);    //Activate pull-ups in PORTD pin 2
 564:	5a 9a       	sbi	0x0b, 2	; 11
	
	//DDRD &= ~(1 << PD2);

	// setup Timer0 for UC/OS-II timer tick
	//
	TCCR0A = _BV(WGM01) | _BV(WGM00);				/* set timer0: OC0A/OC0B disconnected; fast PCM mode           */
 566:	83 e0       	ldi	r24, 0x03	; 3
 568:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(WGM02) | _BV(CS02)| _BV(CS00);		/* timer0 clock = system clock/1024      */
 56a:	8d e0       	ldi	r24, 0x0D	; 13
 56c:	85 bd       	out	0x25, r24	; 37
	OCR0A = (CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)-1; /* This combination yields an interrupt every 5 msec  */
 56e:	86 e2       	ldi	r24, 0x26	; 38
 570:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= _BV(TOIE0);							/* enable timer0 CTC-A interrupt */
 572:	ee e6       	ldi	r30, 0x6E	; 110
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	80 83       	st	Z, r24
	PRR &= ~_BV(PRTIM0);							/* turn on the module in the power management section */
 57c:	e4 e6       	ldi	r30, 0x64	; 100
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8f 7d       	andi	r24, 0xDF	; 223
 584:	80 83       	st	Z, r24
/* END setup USART   */	
	

	// Enable Global Interrupts
	//
	sei();							/* enable interrupts                */
 586:	78 94       	sei
 588:	08 95       	ret

0000058a <USART_Init>:
}

void USART_Init();

void USART_Init(){
	UBRR0H = (unsigned char)(UBRR>>8);
 58a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
 58e:	89 e1       	ldi	r24, 0x19	; 25
 590:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 594:	88 e1       	ldi	r24, 0x18	; 24
 596:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 59a:	8e e0       	ldi	r24, 0x0E	; 14
 59c:	80 93 c2 00 	sts	0x00C2, r24
 5a0:	08 95       	ret

000005a2 <USART_Transmit>:
}

void USART_Transmit(unsigned char data);

void USART_Transmit(unsigned char data){
	PORTB |= _BV(PORTB4); // turn off led
 5a2:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 5a4:	e0 ec       	ldi	r30, 0xC0	; 192
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	90 81       	ld	r25, Z
 5aa:	95 ff       	sbrs	r25, 5
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <USART_Transmit+0x6>
	;
	PORTB &= ~_BV(PORTB4); // turn on led
 5ae:	2c 98       	cbi	0x05, 4	; 5
	/* Put data into buffer, sends the data */
	UDR0 = data;
 5b0:	80 93 c6 00 	sts	0x00C6, r24
 5b4:	08 95       	ret

000005b6 <OSTaskStkInit>:
    stk     = (INT8U *)ptos;		    /* AVR return stack ("hardware stack")          		*/
    tmp     = (INT16U)task;

    /* "push" initial register values onto the stack */

    *stk-- = (INT8U)tmp;                   /* Put task start address on top of stack          	        */
 5b6:	fa 01       	movw	r30, r20
 5b8:	80 83       	st	Z, r24
    *stk-- = (INT8U)(tmp >> 8);
 5ba:	31 97       	sbiw	r30, 0x01	; 1
 5bc:	90 83       	st	Z, r25

    *stk-- = (INT8U)0x00;                   /* R0  = 0x00                                               */
 5be:	31 97       	sbiw	r30, 0x01	; 1
 5c0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R1  = 0x00                                               */
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R2  = 0x00                                               */
 5c6:	31 97       	sbiw	r30, 0x01	; 1
 5c8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R3  = 0x00                                               */
 5ca:	31 97       	sbiw	r30, 0x01	; 1
 5cc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R4  = 0x00                                               */
 5ce:	31 97       	sbiw	r30, 0x01	; 1
 5d0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R5  = 0x00                                               */
 5d2:	31 97       	sbiw	r30, 0x01	; 1
 5d4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R6  = 0x00                                               */
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R7  = 0x00                                               */
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R8  = 0x00                                               */
 5de:	31 97       	sbiw	r30, 0x01	; 1
 5e0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R9  = 0x00                                               */
 5e2:	31 97       	sbiw	r30, 0x01	; 1
 5e4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R10 = 0x00                                               */
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R11 = 0x00                                               */
 5ea:	31 97       	sbiw	r30, 0x01	; 1
 5ec:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R12 = 0x00                                               */
 5ee:	31 97       	sbiw	r30, 0x01	; 1
 5f0:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R13 = 0x00                                               */
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R14 = 0x00                                               */
 5f6:	31 97       	sbiw	r30, 0x01	; 1
 5f8:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R15 = 0x00                                               */
 5fa:	31 97       	sbiw	r30, 0x01	; 1
 5fc:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R16 = 0x00                                               */
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R17 = 0x00                                               */
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R18 = 0x00                                               */
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R19 = 0x00                                               */
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R20 = 0x00                                               */
 60e:	31 97       	sbiw	r30, 0x01	; 1
 610:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R21 = 0x00                                               */
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R22 = 0x00                                               */
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R23 = 0x00                                               */
 61a:	31 97       	sbiw	r30, 0x01	; 1
 61c:	10 82       	st	Z, r1
 	
    tmp    = (INT16U)pdata;
    *stk-- = (INT8U)tmp;                    /* Simulate call to function with argument                  */
 61e:	31 97       	sbiw	r30, 0x01	; 1
 620:	60 83       	st	Z, r22
    *stk-- = (INT8U)(tmp >> 8);		    /* R24, R25 contains argument pointer pdata 		*/
 622:	31 97       	sbiw	r30, 0x01	; 1
 624:	70 83       	st	Z, r23

    *stk-- = (INT8U)0x00;                   /* R26 = 0x00                                               */
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R27 = 0x00                                               */
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R28 = 0x00                                               */
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R29 = 0x00                                               */
 632:	31 97       	sbiw	r30, 0x01	; 1
 634:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R30 = 0x00                                               */
 636:	31 97       	sbiw	r30, 0x01	; 1
 638:	10 82       	st	Z, r1
    *stk-- = (INT8U)0x00;                   /* R31 = 0x00                                               */
 63a:	31 97       	sbiw	r30, 0x01	; 1
 63c:	10 82       	st	Z, r1
#ifdef RAMPZ
    *stk-- = (INT8U)0x00;                   /* RAMPZ = 0x00                                             */
#endif
    *stk-- = (INT8U)0x80;                   /* SREG = Interrupts enabled                                */
 63e:	31 97       	sbiw	r30, 0x01	; 1
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	80 83       	st	Z, r24
    return ((OS_STK *)stk);
}
 644:	ca 01       	movw	r24, r20
 646:	83 97       	sbiw	r24, 0x23	; 35
 648:	08 95       	ret

0000064a <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void OSTaskCreateHook (OS_TCB *ptcb)
{
 64a:	08 95       	ret

0000064c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 64c:	08 95       	ret

0000064e <OSTimeTickHook>:
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) 
//#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void OSTimeTickHook (void)
{
 64e:	08 95       	ret

00000650 <OSTaskIdle>:
 650:	f8 94       	cli
 652:	78 94       	sei
 654:	fd cf       	rjmp	.-6      	; 0x650 <OSTaskIdle>

00000656 <OSEventTaskRdy>:
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	fc 01       	movw	r30, r24
 660:	05 85       	ldd	r16, Z+13	; 0x0d
 662:	e0 2f       	mov	r30, r16
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	e1 5c       	subi	r30, 0xC1	; 193
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	10 81       	ld	r17, Z
 66c:	21 2f       	mov	r18, r17
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	d9 01       	movw	r26, r18
 672:	a1 5c       	subi	r26, 0xC1	; 193
 674:	bd 4f       	sbci	r27, 0xFD	; 253
 676:	dc 91       	ld	r29, X
 678:	fc 01       	movw	r30, r24
 67a:	e2 0f       	add	r30, r18
 67c:	f3 1f       	adc	r31, r19
 67e:	52 81       	ldd	r21, Z+2	; 0x02
 680:	a5 2f       	mov	r26, r21
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	a1 5c       	subi	r26, 0xC1	; 193
 686:	be 4f       	sbci	r27, 0xFE	; 254
 688:	cc 91       	ld	r28, X
 68a:	ac 2f       	mov	r26, r28
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	a1 5c       	subi	r26, 0xC1	; 193
 690:	bd 4f       	sbci	r27, 0xFD	; 253
 692:	ac 91       	ld	r26, X
 694:	11 0f       	add	r17, r17
 696:	11 0f       	add	r17, r17
 698:	11 0f       	add	r17, r17
 69a:	c1 0f       	add	r28, r17
 69c:	ba 2f       	mov	r27, r26
 69e:	b0 95       	com	r27
 6a0:	5b 23       	and	r21, r27
 6a2:	52 83       	std	Z+2, r21	; 0x02
 6a4:	51 11       	cpse	r21, r1
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <OSEventTaskRdy+0x5c>
 6a8:	5d 2f       	mov	r21, r29
 6aa:	50 95       	com	r21
 6ac:	05 23       	and	r16, r21
 6ae:	fc 01       	movw	r30, r24
 6b0:	05 87       	std	Z+13, r16	; 0x0d
 6b2:	ec 2f       	mov	r30, r28
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	ee 53       	subi	r30, 0x3E	; 62
 6bc:	f8 4f       	sbci	r31, 0xF8	; 248
 6be:	01 90       	ld	r0, Z+
 6c0:	f0 81       	ld	r31, Z
 6c2:	e0 2d       	mov	r30, r0
 6c4:	13 86       	std	Z+11, r1	; 0x0b
 6c6:	12 86       	std	Z+10, r1	; 0x0a
 6c8:	17 82       	std	Z+7, r1	; 0x07
 6ca:	16 82       	std	Z+6, r1	; 0x06
 6cc:	71 87       	std	Z+9, r23	; 0x09
 6ce:	60 87       	std	Z+8, r22	; 0x08
 6d0:	40 95       	com	r20
 6d2:	84 85       	ldd	r24, Z+12	; 0x0c
 6d4:	48 23       	and	r20, r24
 6d6:	44 87       	std	Z+12, r20	; 0x0c
 6d8:	41 11       	cpse	r20, r1
 6da:	0b c0       	rjmp	.+22     	; 0x6f2 <OSEventTaskRdy+0x9c>
 6dc:	80 91 23 07 	lds	r24, 0x0723
 6e0:	d8 2b       	or	r29, r24
 6e2:	d0 93 23 07 	sts	0x0723, r29
 6e6:	f9 01       	movw	r30, r18
 6e8:	ec 5d       	subi	r30, 0xDC	; 220
 6ea:	f8 4f       	sbci	r31, 0xF8	; 248
 6ec:	80 81       	ld	r24, Z
 6ee:	a8 2b       	or	r26, r24
 6f0:	a0 83       	st	Z, r26
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	08 95       	ret

000006fc <OSEventWaitListInit>:
 6fc:	fc 01       	movw	r30, r24
 6fe:	15 86       	std	Z+13, r1	; 0x0d
 700:	32 96       	adiw	r30, 0x02	; 2
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	11 92       	st	Z+, r1
 706:	8f 5f       	subi	r24, 0xFF	; 255
 708:	88 30       	cpi	r24, 0x08	; 8
 70a:	e1 f7       	brne	.-8      	; 0x704 <OSEventWaitListInit+0x8>
 70c:	08 95       	ret

0000070e <OSIntExit>:
 70e:	f8 94       	cli
 710:	80 91 2e 07 	lds	r24, 0x072E
 714:	81 50       	subi	r24, 0x01	; 1
 716:	80 93 2e 07 	sts	0x072E, r24
 71a:	90 91 0b 07 	lds	r25, 0x070B
 71e:	89 2b       	or	r24, r25
 720:	e1 f5       	brne	.+120    	; 0x79a <OSIntExit+0x8c>
 722:	e0 91 23 07 	lds	r30, 0x0723
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	e1 5c       	subi	r30, 0xC1	; 193
 72a:	fe 4f       	sbci	r31, 0xFE	; 254
 72c:	80 81       	ld	r24, Z
 72e:	80 93 7c 03 	sts	0x037C, r24
 732:	e8 2f       	mov	r30, r24
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	ec 5d       	subi	r30, 0xDC	; 220
 738:	f8 4f       	sbci	r31, 0xF8	; 248
 73a:	e0 81       	ld	r30, Z
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	e1 5c       	subi	r30, 0xC1	; 193
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	88 0f       	add	r24, r24
 744:	88 0f       	add	r24, r24
 746:	88 0f       	add	r24, r24
 748:	90 81       	ld	r25, Z
 74a:	89 0f       	add	r24, r25
 74c:	80 93 11 07 	sts	0x0711, r24
 750:	90 91 12 07 	lds	r25, 0x0712
 754:	89 17       	cp	r24, r25
 756:	09 f1       	breq	.+66     	; 0x79a <OSIntExit+0x8c>
 758:	e8 2f       	mov	r30, r24
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	ee 53       	subi	r30, 0x3E	; 62
 762:	f8 4f       	sbci	r31, 0xF8	; 248
 764:	80 81       	ld	r24, Z
 766:	91 81       	ldd	r25, Z+1	; 0x01
 768:	90 93 22 07 	sts	0x0722, r25
 76c:	80 93 21 07 	sts	0x0721, r24
 770:	80 91 15 07 	lds	r24, 0x0715
 774:	90 91 16 07 	lds	r25, 0x0716
 778:	a0 91 17 07 	lds	r26, 0x0717
 77c:	b0 91 18 07 	lds	r27, 0x0718
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	a1 1d       	adc	r26, r1
 784:	b1 1d       	adc	r27, r1
 786:	80 93 15 07 	sts	0x0715, r24
 78a:	90 93 16 07 	sts	0x0716, r25
 78e:	a0 93 17 07 	sts	0x0717, r26
 792:	b0 93 18 07 	sts	0x0718, r27
 796:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <OSIntCtxSw>
 79a:	78 94       	sei
 79c:	08 95       	ret

0000079e <OSSched>:
 79e:	f8 94       	cli
 7a0:	90 91 2e 07 	lds	r25, 0x072E
 7a4:	80 91 0b 07 	lds	r24, 0x070B
 7a8:	89 2b       	or	r24, r25
 7aa:	d1 f5       	brne	.+116    	; 0x820 <OSSched+0x82>
 7ac:	e0 91 23 07 	lds	r30, 0x0723
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	e1 5c       	subi	r30, 0xC1	; 193
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	80 81       	ld	r24, Z
 7b8:	e8 2f       	mov	r30, r24
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	ec 5d       	subi	r30, 0xDC	; 220
 7be:	f8 4f       	sbci	r31, 0xF8	; 248
 7c0:	e0 81       	ld	r30, Z
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e1 5c       	subi	r30, 0xC1	; 193
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	88 0f       	add	r24, r24
 7ca:	88 0f       	add	r24, r24
 7cc:	88 0f       	add	r24, r24
 7ce:	90 81       	ld	r25, Z
 7d0:	e8 2f       	mov	r30, r24
 7d2:	e9 0f       	add	r30, r25
 7d4:	e0 93 11 07 	sts	0x0711, r30
 7d8:	80 91 12 07 	lds	r24, 0x0712
 7dc:	e8 17       	cp	r30, r24
 7de:	01 f1       	breq	.+64     	; 0x820 <OSSched+0x82>
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	ee 0f       	add	r30, r30
 7e4:	ff 1f       	adc	r31, r31
 7e6:	ee 53       	subi	r30, 0x3E	; 62
 7e8:	f8 4f       	sbci	r31, 0xF8	; 248
 7ea:	80 81       	ld	r24, Z
 7ec:	91 81       	ldd	r25, Z+1	; 0x01
 7ee:	90 93 22 07 	sts	0x0722, r25
 7f2:	80 93 21 07 	sts	0x0721, r24
 7f6:	80 91 15 07 	lds	r24, 0x0715
 7fa:	90 91 16 07 	lds	r25, 0x0716
 7fe:	a0 91 17 07 	lds	r26, 0x0717
 802:	b0 91 18 07 	lds	r27, 0x0718
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	a1 1d       	adc	r26, r1
 80a:	b1 1d       	adc	r27, r1
 80c:	80 93 15 07 	sts	0x0715, r24
 810:	90 93 16 07 	sts	0x0716, r25
 814:	a0 93 17 07 	sts	0x0717, r26
 818:	b0 93 18 07 	sts	0x0718, r27
 81c:	0e 94 83 00 	call	0x106	; 0x106 <OSCtxSw>
 820:	78 94       	sei
 822:	08 95       	ret

00000824 <OSStart>:
 824:	80 91 0c 07 	lds	r24, 0x070C
 828:	81 11       	cpse	r24, r1
 82a:	26 c0       	rjmp	.+76     	; 0x878 <OSStart+0x54>
 82c:	e0 91 23 07 	lds	r30, 0x0723
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	e1 5c       	subi	r30, 0xC1	; 193
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	e0 81       	ld	r30, Z
 838:	ae 2f       	mov	r26, r30
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	ac 5d       	subi	r26, 0xDC	; 220
 83e:	b8 4f       	sbci	r27, 0xF8	; 248
 840:	ac 91       	ld	r26, X
 842:	b0 e0       	ldi	r27, 0x00	; 0
 844:	a1 5c       	subi	r26, 0xC1	; 193
 846:	be 4f       	sbci	r27, 0xFE	; 254
 848:	ee 0f       	add	r30, r30
 84a:	ee 0f       	add	r30, r30
 84c:	ee 0f       	add	r30, r30
 84e:	8c 91       	ld	r24, X
 850:	e8 0f       	add	r30, r24
 852:	e0 93 11 07 	sts	0x0711, r30
 856:	e0 93 12 07 	sts	0x0712, r30
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	ee 53       	subi	r30, 0x3E	; 62
 862:	f8 4f       	sbci	r31, 0xF8	; 248
 864:	80 81       	ld	r24, Z
 866:	91 81       	ldd	r25, Z+1	; 0x01
 868:	90 93 22 07 	sts	0x0722, r25
 86c:	80 93 21 07 	sts	0x0721, r24
 870:	90 93 30 07 	sts	0x0730, r25
 874:	80 93 2f 07 	sts	0x072F, r24
 878:	0e 94 53 00 	call	0xa6	; 0xa6 <OSStartHighRdy>
 87c:	08 95       	ret

0000087e <OSTCBInit>:
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	f8 94       	cli
 884:	e0 91 1d 07 	lds	r30, 0x071D
 888:	f0 91 1e 07 	lds	r31, 0x071E
 88c:	30 97       	sbiw	r30, 0x00	; 0
 88e:	09 f4       	brne	.+2      	; 0x892 <OSTCBInit+0x14>
 890:	4f c0       	rjmp	.+158    	; 0x930 <__stack+0x31>
 892:	22 81       	ldd	r18, Z+2	; 0x02
 894:	33 81       	ldd	r19, Z+3	; 0x03
 896:	30 93 1e 07 	sts	0x071E, r19
 89a:	20 93 1d 07 	sts	0x071D, r18
 89e:	78 94       	sei
 8a0:	71 83       	std	Z+1, r23	; 0x01
 8a2:	60 83       	st	Z, r22
 8a4:	85 87       	std	Z+13, r24	; 0x0d
 8a6:	14 86       	std	Z+12, r1	; 0x0c
 8a8:	13 86       	std	Z+11, r1	; 0x0b
 8aa:	12 86       	std	Z+10, r1	; 0x0a
 8ac:	c8 2f       	mov	r28, r24
 8ae:	c6 95       	lsr	r28
 8b0:	c6 95       	lsr	r28
 8b2:	c6 95       	lsr	r28
 8b4:	c7 87       	std	Z+15, r28	; 0x0f
 8b6:	d0 e0       	ldi	r29, 0x00	; 0
 8b8:	c1 5c       	subi	r28, 0xC1	; 193
 8ba:	dd 4f       	sbci	r29, 0xFD	; 253
 8bc:	98 81       	ld	r25, Y
 8be:	91 8b       	std	Z+17, r25	; 0x11
 8c0:	c8 2f       	mov	r28, r24
 8c2:	c7 70       	andi	r28, 0x07	; 7
 8c4:	c6 87       	std	Z+14, r28	; 0x0e
 8c6:	d0 e0       	ldi	r29, 0x00	; 0
 8c8:	c1 5c       	subi	r28, 0xC1	; 193
 8ca:	dd 4f       	sbci	r29, 0xFD	; 253
 8cc:	98 81       	ld	r25, Y
 8ce:	90 8b       	std	Z+16, r25	; 0x10
 8d0:	17 82       	std	Z+7, r1	; 0x07
 8d2:	16 82       	std	Z+6, r1	; 0x06
 8d4:	11 86       	std	Z+9, r1	; 0x09
 8d6:	10 86       	std	Z+8, r1	; 0x08
 8d8:	f8 94       	cli
 8da:	a8 2f       	mov	r26, r24
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	aa 0f       	add	r26, r26
 8e0:	bb 1f       	adc	r27, r27
 8e2:	ae 53       	subi	r26, 0x3E	; 62
 8e4:	b8 4f       	sbci	r27, 0xF8	; 248
 8e6:	ed 93       	st	X+, r30
 8e8:	fc 93       	st	X, r31
 8ea:	a0 91 13 07 	lds	r26, 0x0713
 8ee:	b0 91 14 07 	lds	r27, 0x0714
 8f2:	b3 83       	std	Z+3, r27	; 0x03
 8f4:	a2 83       	std	Z+2, r26	; 0x02
 8f6:	15 82       	std	Z+5, r1	; 0x05
 8f8:	14 82       	std	Z+4, r1	; 0x04
 8fa:	10 97       	sbiw	r26, 0x00	; 0
 8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
 8fe:	15 96       	adiw	r26, 0x05	; 5
 900:	fc 93       	st	X, r31
 902:	ee 93       	st	-X, r30
 904:	14 97       	sbiw	r26, 0x04	; 4
 906:	f0 93 14 07 	sts	0x0714, r31
 90a:	e0 93 13 07 	sts	0x0713, r30
 90e:	90 91 23 07 	lds	r25, 0x0723
 912:	81 89       	ldd	r24, Z+17	; 0x11
 914:	89 2b       	or	r24, r25
 916:	80 93 23 07 	sts	0x0723, r24
 91a:	a7 85       	ldd	r26, Z+15	; 0x0f
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	ac 5d       	subi	r26, 0xDC	; 220
 920:	b8 4f       	sbci	r27, 0xF8	; 248
 922:	9c 91       	ld	r25, X
 924:	80 89       	ldd	r24, Z+16	; 0x10
 926:	89 2b       	or	r24, r25
 928:	8c 93       	st	X, r24
 92a:	78 94       	sei
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
 930:	78 94       	sei
 932:	86 e4       	ldi	r24, 0x46	; 70
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <OSTimeTick>:
 93a:	0e 94 27 03 	call	0x64e	; 0x64e <OSTimeTickHook>
 93e:	e0 91 13 07 	lds	r30, 0x0713
 942:	f0 91 14 07 	lds	r31, 0x0714
 946:	85 85       	ldd	r24, Z+13	; 0x0d
 948:	8f 33       	cpi	r24, 0x3F	; 63
 94a:	39 f1       	breq	.+78     	; 0x99a <OSTimeTick+0x60>
 94c:	40 91 23 07 	lds	r20, 0x0723
 950:	21 e0       	ldi	r18, 0x01	; 1
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	f8 94       	cli
 956:	82 85       	ldd	r24, Z+10	; 0x0a
 958:	93 85       	ldd	r25, Z+11	; 0x0b
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	a9 f0       	breq	.+42     	; 0x988 <OSTimeTick+0x4e>
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	93 87       	std	Z+11, r25	; 0x0b
 962:	82 87       	std	Z+10, r24	; 0x0a
 964:	89 2b       	or	r24, r25
 966:	81 f4       	brne	.+32     	; 0x988 <OSTimeTick+0x4e>
 968:	84 85       	ldd	r24, Z+12	; 0x0c
 96a:	83 fd       	sbrc	r24, 3
 96c:	0b c0       	rjmp	.+22     	; 0x984 <OSTimeTick+0x4a>
 96e:	81 89       	ldd	r24, Z+17	; 0x11
 970:	a7 85       	ldd	r26, Z+15	; 0x0f
 972:	b0 e0       	ldi	r27, 0x00	; 0
 974:	ac 5d       	subi	r26, 0xDC	; 220
 976:	b8 4f       	sbci	r27, 0xF8	; 248
 978:	5c 91       	ld	r21, X
 97a:	90 89       	ldd	r25, Z+16	; 0x10
 97c:	95 2b       	or	r25, r21
 97e:	9c 93       	st	X, r25
 980:	48 2b       	or	r20, r24
 982:	02 c0       	rjmp	.+4      	; 0x988 <OSTimeTick+0x4e>
 984:	33 87       	std	Z+11, r19	; 0x0b
 986:	22 87       	std	Z+10, r18	; 0x0a
 988:	02 80       	ldd	r0, Z+2	; 0x02
 98a:	f3 81       	ldd	r31, Z+3	; 0x03
 98c:	e0 2d       	mov	r30, r0
 98e:	78 94       	sei
 990:	85 85       	ldd	r24, Z+13	; 0x0d
 992:	8f 33       	cpi	r24, 0x3F	; 63
 994:	f9 f6       	brne	.-66     	; 0x954 <OSTimeTick+0x1a>
 996:	40 93 23 07 	sts	0x0723, r20
 99a:	f8 94       	cli
 99c:	80 91 31 07 	lds	r24, 0x0731
 9a0:	90 91 32 07 	lds	r25, 0x0732
 9a4:	a0 91 33 07 	lds	r26, 0x0733
 9a8:	b0 91 34 07 	lds	r27, 0x0734
 9ac:	01 96       	adiw	r24, 0x01	; 1
 9ae:	a1 1d       	adc	r26, r1
 9b0:	b1 1d       	adc	r27, r1
 9b2:	80 93 31 07 	sts	0x0731, r24
 9b6:	90 93 32 07 	sts	0x0732, r25
 9ba:	a0 93 33 07 	sts	0x0733, r26
 9be:	b0 93 34 07 	sts	0x0734, r27
 9c2:	78 94       	sei
 9c4:	08 95       	ret

000009c6 <OSMboxAccept>:
 9c6:	fc 01       	movw	r30, r24
 9c8:	f8 94       	cli
 9ca:	84 85       	ldd	r24, Z+12	; 0x0c
 9cc:	81 30       	cpi	r24, 0x01	; 1
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <OSMboxAccept+0x12>
 9d0:	78 94       	sei
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	08 95       	ret
 9d8:	20 81       	ld	r18, Z
 9da:	31 81       	ldd	r19, Z+1	; 0x01
 9dc:	21 15       	cp	r18, r1
 9de:	31 05       	cpc	r19, r1
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <OSMboxAccept+0x20>
 9e2:	11 82       	std	Z+1, r1	; 0x01
 9e4:	10 82       	st	Z, r1
 9e6:	78 94       	sei
 9e8:	82 2f       	mov	r24, r18
 9ea:	93 2f       	mov	r25, r19
 9ec:	08 95       	ret

000009ee <OSMboxCreate>:
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	f8 94       	cli
 9f4:	c0 91 2c 07 	lds	r28, 0x072C
 9f8:	d0 91 2d 07 	lds	r29, 0x072D
 9fc:	20 97       	sbiw	r28, 0x00	; 0
 9fe:	31 f0       	breq	.+12     	; 0xa0c <OSMboxCreate+0x1e>
 a00:	28 81       	ld	r18, Y
 a02:	39 81       	ldd	r19, Y+1	; 0x01
 a04:	30 93 2d 07 	sts	0x072D, r19
 a08:	20 93 2c 07 	sts	0x072C, r18
 a0c:	78 94       	sei
 a0e:	20 97       	sbiw	r28, 0x00	; 0
 a10:	39 f0       	breq	.+14     	; 0xa20 <OSMboxCreate+0x32>
 a12:	21 e0       	ldi	r18, 0x01	; 1
 a14:	2c 87       	std	Y+12, r18	; 0x0c
 a16:	99 83       	std	Y+1, r25	; 0x01
 a18:	88 83       	st	Y, r24
 a1a:	ce 01       	movw	r24, r28
 a1c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <OSEventWaitListInit>
 a20:	ce 01       	movw	r24, r28
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <OSMboxPost>:
 a28:	f8 94       	cli
 a2a:	fc 01       	movw	r30, r24
 a2c:	24 85       	ldd	r18, Z+12	; 0x0c
 a2e:	21 30       	cpi	r18, 0x01	; 1
 a30:	19 f0       	breq	.+6      	; 0xa38 <OSMboxPost+0x10>
 a32:	78 94       	sei
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	08 95       	ret
 a38:	fc 01       	movw	r30, r24
 a3a:	25 85       	ldd	r18, Z+13	; 0x0d
 a3c:	22 23       	and	r18, r18
 a3e:	41 f0       	breq	.+16     	; 0xa50 <OSMboxPost+0x28>
 a40:	42 e0       	ldi	r20, 0x02	; 2
 a42:	0e 94 2b 03 	call	0x656	; 0x656 <OSEventTaskRdy>
 a46:	78 94       	sei
 a48:	0e 94 cf 03 	call	0x79e	; 0x79e <OSSched>
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	08 95       	ret
 a50:	fc 01       	movw	r30, r24
 a52:	20 81       	ld	r18, Z
 a54:	31 81       	ldd	r19, Z+1	; 0x01
 a56:	23 2b       	or	r18, r19
 a58:	19 f0       	breq	.+6      	; 0xa60 <OSMboxPost+0x38>
 a5a:	78 94       	sei
 a5c:	84 e1       	ldi	r24, 0x14	; 20
 a5e:	08 95       	ret
 a60:	fc 01       	movw	r30, r24
 a62:	71 83       	std	Z+1, r23	; 0x01
 a64:	60 83       	st	Z, r22
 a66:	78 94       	sei
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	08 95       	ret

00000a6c <OSTaskCreate>:
 a6c:	bf 92       	push	r11
 a6e:	cf 92       	push	r12
 a70:	df 92       	push	r13
 a72:	ef 92       	push	r14
 a74:	ff 92       	push	r15
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	b2 2e       	mov	r11, r18
 a80:	2f e3       	ldi	r18, 0x3F	; 63
 a82:	2b 15       	cp	r18, r11
 a84:	08 f4       	brcc	.+2      	; 0xa88 <OSTaskCreate+0x1c>
 a86:	4f c0       	rjmp	.+158    	; 0xb26 <OSTaskCreate+0xba>
 a88:	f8 94       	cli
 a8a:	cb 2d       	mov	r28, r11
 a8c:	d0 e0       	ldi	r29, 0x00	; 0
 a8e:	fe 01       	movw	r30, r28
 a90:	ee 0f       	add	r30, r30
 a92:	ff 1f       	adc	r31, r31
 a94:	ee 53       	subi	r30, 0x3E	; 62
 a96:	f8 4f       	sbci	r31, 0xF8	; 248
 a98:	01 90       	ld	r0, Z+
 a9a:	f0 81       	ld	r31, Z
 a9c:	e0 2d       	mov	r30, r0
 a9e:	ef 2b       	or	r30, r31
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <OSTaskCreate+0x38>
 aa2:	3e c0       	rjmp	.+124    	; 0xb20 <OSTaskCreate+0xb4>
 aa4:	fe 01       	movw	r30, r28
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	ee 53       	subi	r30, 0x3E	; 62
 aac:	f8 4f       	sbci	r31, 0xF8	; 248
 aae:	21 e0       	ldi	r18, 0x01	; 1
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	31 83       	std	Z+1, r19	; 0x01
 ab4:	20 83       	st	Z, r18
 ab6:	78 94       	sei
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <OSTaskStkInit>
 ac0:	c1 2c       	mov	r12, r1
 ac2:	d1 2c       	mov	r13, r1
 ac4:	e1 2c       	mov	r14, r1
 ac6:	f1 2c       	mov	r15, r1
 ac8:	00 e0       	ldi	r16, 0x00	; 0
 aca:	10 e0       	ldi	r17, 0x00	; 0
 acc:	20 e0       	ldi	r18, 0x00	; 0
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	40 e0       	ldi	r20, 0x00	; 0
 ad2:	50 e0       	ldi	r21, 0x00	; 0
 ad4:	bc 01       	movw	r22, r24
 ad6:	8b 2d       	mov	r24, r11
 ad8:	0e 94 3f 04 	call	0x87e	; 0x87e <OSTCBInit>
 adc:	81 11       	cpse	r24, r1
 ade:	17 c0       	rjmp	.+46     	; 0xb0e <OSTaskCreate+0xa2>
 ae0:	f8 94       	cli
 ae2:	80 91 20 07 	lds	r24, 0x0720
 ae6:	8f 5f       	subi	r24, 0xFF	; 255
 ae8:	80 93 20 07 	sts	0x0720, r24
 aec:	cc 0f       	add	r28, r28
 aee:	dd 1f       	adc	r29, r29
 af0:	ce 53       	subi	r28, 0x3E	; 62
 af2:	d8 4f       	sbci	r29, 0xF8	; 248
 af4:	88 81       	ld	r24, Y
 af6:	99 81       	ldd	r25, Y+1	; 0x01
 af8:	0e 94 25 03 	call	0x64a	; 0x64a <OSTaskCreateHook>
 afc:	78 94       	sei
 afe:	80 91 0c 07 	lds	r24, 0x070C
 b02:	88 23       	and	r24, r24
 b04:	91 f0       	breq	.+36     	; 0xb2a <OSTaskCreate+0xbe>
 b06:	0e 94 cf 03 	call	0x79e	; 0x79e <OSSched>
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	0f c0       	rjmp	.+30     	; 0xb2c <OSTaskCreate+0xc0>
 b0e:	f8 94       	cli
 b10:	cc 0f       	add	r28, r28
 b12:	dd 1f       	adc	r29, r29
 b14:	ce 53       	subi	r28, 0x3E	; 62
 b16:	d8 4f       	sbci	r29, 0xF8	; 248
 b18:	19 82       	std	Y+1, r1	; 0x01
 b1a:	18 82       	st	Y, r1
 b1c:	78 94       	sei
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <OSTaskCreate+0xc0>
 b20:	78 94       	sei
 b22:	88 e2       	ldi	r24, 0x28	; 40
 b24:	03 c0       	rjmp	.+6      	; 0xb2c <OSTaskCreate+0xc0>
 b26:	8a e2       	ldi	r24, 0x2A	; 42
 b28:	01 c0       	rjmp	.+2      	; 0xb2c <OSTaskCreate+0xc0>
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	df 91       	pop	r29
 b2e:	cf 91       	pop	r28
 b30:	1f 91       	pop	r17
 b32:	0f 91       	pop	r16
 b34:	ff 90       	pop	r15
 b36:	ef 90       	pop	r14
 b38:	df 90       	pop	r13
 b3a:	cf 90       	pop	r12
 b3c:	bf 90       	pop	r11
 b3e:	08 95       	ret

00000b40 <OSInit>:
 b40:	10 92 31 07 	sts	0x0731, r1
 b44:	10 92 32 07 	sts	0x0732, r1
 b48:	10 92 33 07 	sts	0x0733, r1
 b4c:	10 92 34 07 	sts	0x0734, r1
 b50:	10 92 2e 07 	sts	0x072E, r1
 b54:	10 92 0b 07 	sts	0x070B, r1
 b58:	10 92 20 07 	sts	0x0720, r1
 b5c:	10 92 0c 07 	sts	0x070C, r1
 b60:	10 92 0d 07 	sts	0x070D, r1
 b64:	10 92 0e 07 	sts	0x070E, r1
 b68:	10 92 0f 07 	sts	0x070F, r1
 b6c:	10 92 10 07 	sts	0x0710, r1
 b70:	10 92 15 07 	sts	0x0715, r1
 b74:	10 92 16 07 	sts	0x0716, r1
 b78:	10 92 17 07 	sts	0x0717, r1
 b7c:	10 92 18 07 	sts	0x0718, r1
 b80:	10 92 23 07 	sts	0x0723, r1
 b84:	e4 e2       	ldi	r30, 0x24	; 36
 b86:	f7 e0       	ldi	r31, 0x07	; 7
 b88:	8c e2       	ldi	r24, 0x2C	; 44
 b8a:	97 e0       	ldi	r25, 0x07	; 7
 b8c:	11 92       	st	Z+, r1
 b8e:	e8 17       	cp	r30, r24
 b90:	f9 07       	cpc	r31, r25
 b92:	e1 f7       	brne	.-8      	; 0xb8c <OSInit+0x4c>
 b94:	10 92 12 07 	sts	0x0712, r1
 b98:	10 92 11 07 	sts	0x0711, r1
 b9c:	10 92 22 07 	sts	0x0722, r1
 ba0:	10 92 21 07 	sts	0x0721, r1
 ba4:	10 92 30 07 	sts	0x0730, r1
 ba8:	10 92 2f 07 	sts	0x072F, r1
 bac:	10 92 14 07 	sts	0x0714, r1
 bb0:	10 92 13 07 	sts	0x0713, r1
 bb4:	e2 ec       	ldi	r30, 0xC2	; 194
 bb6:	f7 e0       	ldi	r31, 0x07	; 7
 bb8:	82 e4       	ldi	r24, 0x42	; 66
 bba:	98 e0       	ldi	r25, 0x08	; 8
 bbc:	11 92       	st	Z+, r1
 bbe:	11 92       	st	Z+, r1
 bc0:	e8 17       	cp	r30, r24
 bc2:	f9 07       	cpc	r31, r25
 bc4:	d9 f7       	brne	.-10     	; 0xbbc <OSInit+0x7c>
 bc6:	8a e5       	ldi	r24, 0x5A	; 90
 bc8:	92 e0       	ldi	r25, 0x02	; 2
 bca:	2c ef       	ldi	r18, 0xFC	; 252
 bcc:	32 e0       	ldi	r19, 0x02	; 2
 bce:	fc 01       	movw	r30, r24
 bd0:	70 97       	sbiw	r30, 0x10	; 16
 bd2:	91 83       	std	Z+1, r25	; 0x01
 bd4:	80 83       	st	Z, r24
 bd6:	42 96       	adiw	r24, 0x12	; 18
 bd8:	82 17       	cp	r24, r18
 bda:	93 07       	cpc	r25, r19
 bdc:	c1 f7       	brne	.-16     	; 0xbce <OSInit+0x8e>
 bde:	10 92 ed 02 	sts	0x02ED, r1
 be2:	10 92 ec 02 	sts	0x02EC, r1
 be6:	88 e4       	ldi	r24, 0x48	; 72
 be8:	92 e0       	ldi	r25, 0x02	; 2
 bea:	90 93 1e 07 	sts	0x071E, r25
 bee:	80 93 1d 07 	sts	0x071D, r24
 bf2:	83 e4       	ldi	r24, 0x43	; 67
 bf4:	97 e0       	ldi	r25, 0x07	; 7
 bf6:	21 ec       	ldi	r18, 0xC1	; 193
 bf8:	37 e0       	ldi	r19, 0x07	; 7
 bfa:	fc 01       	movw	r30, r24
 bfc:	3e 97       	sbiw	r30, 0x0e	; 14
 bfe:	91 83       	std	Z+1, r25	; 0x01
 c00:	80 83       	st	Z, r24
 c02:	0e 96       	adiw	r24, 0x0e	; 14
 c04:	82 17       	cp	r24, r18
 c06:	93 07       	cpc	r25, r19
 c08:	c1 f7       	brne	.-16     	; 0xbfa <OSInit+0xba>
 c0a:	10 92 b4 07 	sts	0x07B4, r1
 c0e:	10 92 b3 07 	sts	0x07B3, r1
 c12:	85 e3       	ldi	r24, 0x35	; 53
 c14:	97 e0       	ldi	r25, 0x07	; 7
 c16:	90 93 2d 07 	sts	0x072D, r25
 c1a:	80 93 2c 07 	sts	0x072C, r24
 c1e:	2f e3       	ldi	r18, 0x3F	; 63
 c20:	4b e7       	ldi	r20, 0x7B	; 123
 c22:	53 e0       	ldi	r21, 0x03	; 3
 c24:	60 e0       	ldi	r22, 0x00	; 0
 c26:	70 e0       	ldi	r23, 0x00	; 0
 c28:	88 e2       	ldi	r24, 0x28	; 40
 c2a:	93 e0       	ldi	r25, 0x03	; 3
 c2c:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
 c30:	2e e3       	ldi	r18, 0x3E	; 62
 c32:	4b e3       	ldi	r20, 0x3B	; 59
 c34:	53 e0       	ldi	r21, 0x03	; 3
 c36:	60 e0       	ldi	r22, 0x00	; 0
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	89 e6       	ldi	r24, 0x69	; 105
 c3c:	96 e0       	ldi	r25, 0x06	; 6
 c3e:	0e 94 36 05 	call	0xa6c	; 0xa6c <OSTaskCreate>
 c42:	08 95       	ret

00000c44 <OSTimeDly>:
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	e1 f0       	breq	.+56     	; 0xc80 <OSTimeDly+0x3c>
 c48:	f8 94       	cli
 c4a:	e0 91 2f 07 	lds	r30, 0x072F
 c4e:	f0 91 30 07 	lds	r31, 0x0730
 c52:	a7 85       	ldd	r26, Z+15	; 0x0f
 c54:	b0 e0       	ldi	r27, 0x00	; 0
 c56:	ac 5d       	subi	r26, 0xDC	; 220
 c58:	b8 4f       	sbci	r27, 0xF8	; 248
 c5a:	20 89       	ldd	r18, Z+16	; 0x10
 c5c:	20 95       	com	r18
 c5e:	3c 91       	ld	r19, X
 c60:	23 23       	and	r18, r19
 c62:	2c 93       	st	X, r18
 c64:	21 11       	cpse	r18, r1
 c66:	07 c0       	rjmp	.+14     	; 0xc76 <OSTimeDly+0x32>
 c68:	21 89       	ldd	r18, Z+17	; 0x11
 c6a:	20 95       	com	r18
 c6c:	30 91 23 07 	lds	r19, 0x0723
 c70:	23 23       	and	r18, r19
 c72:	20 93 23 07 	sts	0x0723, r18
 c76:	93 87       	std	Z+11, r25	; 0x0b
 c78:	82 87       	std	Z+10, r24	; 0x0a
 c7a:	78 94       	sei
 c7c:	0e 94 cf 03 	call	0x79e	; 0x79e <OSSched>
 c80:	08 95       	ret

00000c82 <OSStatInit>:
 c82:	82 e0       	ldi	r24, 0x02	; 2
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 c8a:	f8 94       	cli
 c8c:	10 92 0d 07 	sts	0x070D, r1
 c90:	10 92 0e 07 	sts	0x070E, r1
 c94:	10 92 0f 07 	sts	0x070F, r1
 c98:	10 92 10 07 	sts	0x0710, r1
 c9c:	78 94       	sei
 c9e:	88 ec       	ldi	r24, 0xC8	; 200
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 ca6:	f8 94       	cli
 ca8:	80 91 0d 07 	lds	r24, 0x070D
 cac:	90 91 0e 07 	lds	r25, 0x070E
 cb0:	a0 91 0f 07 	lds	r26, 0x070F
 cb4:	b0 91 10 07 	lds	r27, 0x0710
 cb8:	80 93 19 07 	sts	0x0719, r24
 cbc:	90 93 1a 07 	sts	0x071A, r25
 cc0:	a0 93 1b 07 	sts	0x071B, r26
 cc4:	b0 93 1c 07 	sts	0x071C, r27
 cc8:	81 e0       	ldi	r24, 0x01	; 1
 cca:	80 93 c1 07 	sts	0x07C1, r24
 cce:	78 94       	sei
 cd0:	08 95       	ret

00000cd2 <OSTaskStat>:
 cd2:	80 91 c1 07 	lds	r24, 0x07C1
 cd6:	81 11       	cpse	r24, r1
 cd8:	08 c0       	rjmp	.+16     	; 0xcea <OSTaskStat+0x18>
 cda:	80 e9       	ldi	r24, 0x90	; 144
 cdc:	91 e0       	ldi	r25, 0x01	; 1
 cde:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 ce2:	80 91 c1 07 	lds	r24, 0x07C1
 ce6:	88 23       	and	r24, r24
 ce8:	c1 f3       	breq	.-16     	; 0xcda <OSTaskStat+0x8>
 cea:	c4 e6       	ldi	r28, 0x64	; 100
 cec:	f8 94       	cli
 cee:	20 91 0d 07 	lds	r18, 0x070D
 cf2:	30 91 0e 07 	lds	r19, 0x070E
 cf6:	40 91 0f 07 	lds	r20, 0x070F
 cfa:	50 91 10 07 	lds	r21, 0x0710
 cfe:	20 93 42 08 	sts	0x0842, r18
 d02:	30 93 43 08 	sts	0x0843, r19
 d06:	40 93 44 08 	sts	0x0844, r20
 d0a:	50 93 45 08 	sts	0x0845, r21
 d0e:	10 92 0d 07 	sts	0x070D, r1
 d12:	10 92 0e 07 	sts	0x070E, r1
 d16:	10 92 0f 07 	sts	0x070F, r1
 d1a:	10 92 10 07 	sts	0x0710, r1
 d1e:	78 94       	sei
 d20:	c0 90 19 07 	lds	r12, 0x0719
 d24:	d0 90 1a 07 	lds	r13, 0x071A
 d28:	e0 90 1b 07 	lds	r14, 0x071B
 d2c:	f0 90 1c 07 	lds	r15, 0x071C
 d30:	c1 14       	cp	r12, r1
 d32:	d1 04       	cpc	r13, r1
 d34:	e1 04       	cpc	r14, r1
 d36:	f1 04       	cpc	r15, r1
 d38:	b9 f0       	breq	.+46     	; 0xd68 <OSTaskStat+0x96>
 d3a:	a4 e6       	ldi	r26, 0x64	; 100
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
 d3e:	0e 94 ee 06 	call	0xddc	; 0xddc <__muluhisi3>
 d42:	a7 01       	movw	r20, r14
 d44:	96 01       	movw	r18, r12
 d46:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__udivmodsi4>
 d4a:	8c 2f       	mov	r24, r28
 d4c:	82 1b       	sub	r24, r18
 d4e:	85 36       	cpi	r24, 0x65	; 101
 d50:	1c f0       	brlt	.+6      	; 0xd58 <OSTaskStat+0x86>
 d52:	c0 93 1f 07 	sts	0x071F, r28
 d56:	0a c0       	rjmp	.+20     	; 0xd6c <OSTaskStat+0x9a>
 d58:	88 23       	and	r24, r24
 d5a:	1c f4       	brge	.+6      	; 0xd62 <OSTaskStat+0x90>
 d5c:	10 92 1f 07 	sts	0x071F, r1
 d60:	05 c0       	rjmp	.+10     	; 0xd6c <OSTaskStat+0x9a>
 d62:	80 93 1f 07 	sts	0x071F, r24
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <OSTaskStat+0x9a>
 d68:	10 92 1f 07 	sts	0x071F, r1
 d6c:	0e 94 26 03 	call	0x64c	; 0x64c <OSTaskStatHook>
 d70:	88 ec       	ldi	r24, 0xC8	; 200
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 22 06 	call	0xc44	; 0xc44 <OSTimeDly>
 d78:	b9 cf       	rjmp	.-142    	; 0xcec <OSTaskStat+0x1a>

00000d7a <__udivmodsi4>:
 d7a:	a1 e2       	ldi	r26, 0x21	; 33
 d7c:	1a 2e       	mov	r1, r26
 d7e:	aa 1b       	sub	r26, r26
 d80:	bb 1b       	sub	r27, r27
 d82:	fd 01       	movw	r30, r26
 d84:	0d c0       	rjmp	.+26     	; 0xda0 <__udivmodsi4_ep>

00000d86 <__udivmodsi4_loop>:
 d86:	aa 1f       	adc	r26, r26
 d88:	bb 1f       	adc	r27, r27
 d8a:	ee 1f       	adc	r30, r30
 d8c:	ff 1f       	adc	r31, r31
 d8e:	a2 17       	cp	r26, r18
 d90:	b3 07       	cpc	r27, r19
 d92:	e4 07       	cpc	r30, r20
 d94:	f5 07       	cpc	r31, r21
 d96:	20 f0       	brcs	.+8      	; 0xda0 <__udivmodsi4_ep>
 d98:	a2 1b       	sub	r26, r18
 d9a:	b3 0b       	sbc	r27, r19
 d9c:	e4 0b       	sbc	r30, r20
 d9e:	f5 0b       	sbc	r31, r21

00000da0 <__udivmodsi4_ep>:
 da0:	66 1f       	adc	r22, r22
 da2:	77 1f       	adc	r23, r23
 da4:	88 1f       	adc	r24, r24
 da6:	99 1f       	adc	r25, r25
 da8:	1a 94       	dec	r1
 daa:	69 f7       	brne	.-38     	; 0xd86 <__udivmodsi4_loop>
 dac:	60 95       	com	r22
 dae:	70 95       	com	r23
 db0:	80 95       	com	r24
 db2:	90 95       	com	r25
 db4:	9b 01       	movw	r18, r22
 db6:	ac 01       	movw	r20, r24
 db8:	bd 01       	movw	r22, r26
 dba:	cf 01       	movw	r24, r30
 dbc:	08 95       	ret

00000dbe <__umulhisi3>:
 dbe:	a2 9f       	mul	r26, r18
 dc0:	b0 01       	movw	r22, r0
 dc2:	b3 9f       	mul	r27, r19
 dc4:	c0 01       	movw	r24, r0
 dc6:	a3 9f       	mul	r26, r19
 dc8:	70 0d       	add	r23, r0
 dca:	81 1d       	adc	r24, r1
 dcc:	11 24       	eor	r1, r1
 dce:	91 1d       	adc	r25, r1
 dd0:	b2 9f       	mul	r27, r18
 dd2:	70 0d       	add	r23, r0
 dd4:	81 1d       	adc	r24, r1
 dd6:	11 24       	eor	r1, r1
 dd8:	91 1d       	adc	r25, r1
 dda:	08 95       	ret

00000ddc <__muluhisi3>:
 ddc:	0e 94 df 06 	call	0xdbe	; 0xdbe <__umulhisi3>
 de0:	a5 9f       	mul	r26, r21
 de2:	90 0d       	add	r25, r0
 de4:	b4 9f       	mul	r27, r20
 de6:	90 0d       	add	r25, r0
 de8:	a4 9f       	mul	r26, r20
 dea:	80 0d       	add	r24, r0
 dec:	91 1d       	adc	r25, r1
 dee:	11 24       	eor	r1, r1
 df0:	08 95       	ret

00000df2 <strcpy>:
 df2:	fb 01       	movw	r30, r22
 df4:	dc 01       	movw	r26, r24
 df6:	01 90       	ld	r0, Z+
 df8:	0d 92       	st	X+, r0
 dfa:	00 20       	and	r0, r0
 dfc:	e1 f7       	brne	.-8      	; 0xdf6 <strcpy+0x4>
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
